using System;
using NetRuntimeSystem = System;
using System.ComponentModel;
using NetOffice.Attributes;

namespace NetOffice.MSProjectApi.GlobalHelperModules
{
    ///<summary>
    /// Module GlobalModule
    /// SupportByVersion MSProject 11,12,14
    ///</summary>
    [SupportByVersion("MSProject", 11,12,14)]
	[EntityType(EntityType.IsModule), ModuleBaseType(typeof(MSProjectApi.Application))]
	public static class GlobalModule
	{
		#region Fields

		private static ICOMObject _instance;

        #endregion

        #region Internal Properties

        internal static ICOMObject Instance
        {
            get
            {
                return _instance;
            }
            set
            {
                if ((null == value) || (null == _instance))
                    _instance = value;
            }
        }

        internal static Core Factory
		{
			get
			{
				if(null != _instance)
					 return _instance.Factory;
			else
				return Core.Default;
			}
		}

		internal static Invoker Invoker
		{
			get
			{
				if(null != _instance)
					 return _instance.Invoker;
			else
				return Invoker.Default;
			}
		}

		#endregion

		#region Properties

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Application Application
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Application", paramsArray);
				NetOffice.MSProjectApi.Application newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Application.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Application;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Application", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Application Parent
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Parent", paramsArray);
				NetOffice.MSProjectApi.Application newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Application.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Application;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Parent", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Selection ActiveSelection
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveSelection", paramsArray);
				NetOffice.MSProjectApi.Selection newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Selection.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Selection;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ActiveSelection", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Cell ActiveCell
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveCell", paramsArray);
				NetOffice.MSProjectApi.Cell newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Cell.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Cell;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ActiveCell", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Project ActiveProject
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveProject", paramsArray);
				NetOffice.MSProjectApi.Project newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Project.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Project;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ActiveProject", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Window ActiveWindow
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveWindow", paramsArray);
				NetOffice.MSProjectApi.Window newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Window.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Window;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ActiveWindow", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SupportsMultipleDocuments
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "SupportsMultipleDocuments", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "SupportsMultipleDocuments", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SupportsMultipleWindows
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "SupportsMultipleWindows", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "SupportsMultipleWindows", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Visible
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Visible", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Visible", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string PathSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PathSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "PathSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string Caption
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Caption", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Caption", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string Name
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Name", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Name", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string Path
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Path", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Path", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string Version
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Version", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Version", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjWindowState WindowState
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "WindowState", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjWindowState)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "WindowState", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjDateOrder DateOrder
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DateOrder", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjDateOrder)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DateOrder", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string DateSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DateSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DateSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string ThousandSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ThousandSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ThousandSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string DecimalSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DecimalSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DecimalSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string ListSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ListSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ListSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string TimeSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "TimeSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "TimeSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TwelveHourTimeFormat
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "TwelveHourTimeFormat", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "TwelveHourTimeFormat", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string AMText
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AMText", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "AMText", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string PMText
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PMText", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "PMText", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string DefaultView
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DefaultView", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DefaultView", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayStatusBar
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayStatusBar", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayStatusBar", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayAlerts
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayAlerts", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayAlerts", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayEntryBar
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayEntryBar", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayEntryBar", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayScrollBars
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayScrollBars", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayScrollBars", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayWindowsInTaskbar
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayWindowsInTaskbar", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayWindowsInTaskbar", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjCalculation Calculation
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Calculation", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjCalculation)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Calculation", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AutoLevel
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AutoLevel", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "AutoLevel", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AutoClearLeveling
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AutoClearLeveling", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "AutoClearLeveling", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelWithinSlack
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelWithinSlack", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelWithinSlack", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjLevelOrder LevelOrder
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelOrder", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjLevelOrder)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelOrder", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjLevelPeriodBasis LevelPeriodBasis
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelPeriodBasis", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjLevelPeriodBasis)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelPeriodBasis", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelIndividualAssignments
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelIndividualAssignments", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelIndividualAssignments", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelProposedBookings
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelProposedBookings", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelProposedBookings", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingCanSplit
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelingCanSplit", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelingCanSplit", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MoveAfterReturn
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "MoveAfterReturn", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "MoveAfterReturn", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayScheduleMessages
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayScheduleMessages", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayScheduleMessages", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjWeekday StartWeekOn
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "StartWeekOn", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjWeekday)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "StartWeekOn", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjMonth StartYearIn
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "StartYearIn", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjMonth)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "StartYearIn", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CellDragAndDrop
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CellDragAndDrop", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "CellDragAndDrop", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string UserName
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "UserName", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "UserName", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static bool DisplayNotesIndicator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayNotesIndicator", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayNotesIndicator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AskToUpdateLinks
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AskToUpdateLinks", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "AskToUpdateLinks", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayPlanningWizard
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayPlanningWizard", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayPlanningWizard", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayWizardUsage
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayWizardUsage", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayWizardUsage", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayWizardErrors
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayWizardErrors", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayWizardErrors", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayWizardScheduling
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayWizardScheduling", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayWizardScheduling", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static bool ShowTipOfDay
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ShowTipOfDay", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ShowTipOfDay", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static bool ShowToolTips
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ShowToolTips", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ShowToolTips", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ShowWelcome
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ShowWelcome", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ShowWelcome", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadLastFile
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LoadLastFile", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LoadLastFile", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PromptForSummaryInfo
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PromptForSummaryInfo", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "PromptForSummaryInfo", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayOLEIndicator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayOLEIndicator", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayOLEIndicator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjDateFormat DefaultDateFormat
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DefaultDateFormat", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjDateFormat)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DefaultDateFormat", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DayLeadingZero
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DayLeadingZero", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DayLeadingZero", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MonthLeadingZero
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "MonthLeadingZero", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "MonthLeadingZero", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimeLeadingZero
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "TimeLeadingZero", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "TimeLeadingZero", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static bool CopyResourceUsageHeader
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CopyResourceUsageHeader", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "CopyResourceUsageHeader", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 RecentFilesMaximum
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "RecentFilesMaximum", paramsArray);
				return NetRuntimeSystem.Convert.ToInt32(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "RecentFilesMaximum", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayRecentFiles
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayRecentFiles", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayRecentFiles", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MacroVirusProtection
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "MacroVirusProtection", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "MacroVirusProtection", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjAssignmentUnits ShowAssignmentUnitsAs
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ShowAssignmentUnitsAs", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjAssignmentUnits)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ShowAssignmentUnitsAs", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AutomaticallyFillPhoneticFields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AutomaticallyFillPhoneticFields", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "AutomaticallyFillPhoneticFields", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DefaultAutoFilter
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DefaultAutoFilter", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DefaultAutoFilter", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ShowEstimatedDuration
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ShowEstimatedDuration", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ShowEstimatedDuration", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool NewTasksEstimated
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "NewTasksEstimated", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "NewTasksEstimated", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.OfficeApi.Assistant Assistant
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Assistant", paramsArray);
				NetOffice.OfficeApi.Assistant newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.Assistant.LateBindingApiWrapperType) as NetOffice.OfficeApi.Assistant;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Assistant", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayViewBar
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayViewBar", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayViewBar", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.VBIDEApi.VBE VBE
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "VBE", paramsArray);
				NetOffice.VBIDEApi.VBE newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.VBIDEApi.VBE.LateBindingApiWrapperType) as NetOffice.VBIDEApi.VBE;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "VBE", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjEnableCancelKey EnableCancelKey
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "EnableCancelKey", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjEnableCancelKey)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "EnableCancelKey", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UserControl
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "UserControl", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "UserControl", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Double UsableWidth
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "UsableWidth", paramsArray);
				return NetRuntimeSystem.Convert.ToDouble(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "UsableWidth", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Double UsableHeight
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "UsableHeight", paramsArray);
				return NetRuntimeSystem.Convert.ToDouble(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "UsableHeight", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ScreenUpdating
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ScreenUpdating", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ScreenUpdating", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplayProjectGuide
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "DisplayProjectGuide", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "DisplayProjectGuide", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseAllowLocalBaseCalendars
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "EnterpriseAllowLocalBaseCalendars", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "EnterpriseAllowLocalBaseCalendars", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjEditionType Edition
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Edition", paramsArray);
				int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
				return (NetOffice.MSProjectApi.Enums.PjEditionType)intReturnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Edition", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Profiles Profiles
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Profiles", paramsArray);
				NetOffice.MSProjectApi.Profiles newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Profiles.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Profiles;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Profiles", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Calendars GlobalBaseCalendars
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalBaseCalendars", paramsArray);
				NetOffice.MSProjectApi.Calendars newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Calendars.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Calendars;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalBaseCalendars", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Views GlobalViews
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalViews", paramsArray);
				NetOffice.MSProjectApi.Views newObject = Factory.CreateObjectFromComProxy(_instance,returnItem) as NetOffice.MSProjectApi.Views;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalViews", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.ViewsSingle GlobalViewsSingle
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalViewsSingle", paramsArray);
				NetOffice.MSProjectApi.ViewsSingle newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.ViewsSingle.LateBindingApiWrapperType) as NetOffice.MSProjectApi.ViewsSingle;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalViewsSingle", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.ViewsCombination GlobalViewsCombination
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalViewsCombination", paramsArray);
				NetOffice.MSProjectApi.ViewsCombination newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.ViewsCombination.LateBindingApiWrapperType) as NetOffice.MSProjectApi.ViewsCombination;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalViewsCombination", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Tables GlobalTaskTables
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalTaskTables", paramsArray);
				NetOffice.MSProjectApi.Tables newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Tables.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Tables;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalTaskTables", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Tables GlobalResourceTables
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalResourceTables", paramsArray);
				NetOffice.MSProjectApi.Tables newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Tables.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Tables;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalResourceTables", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Filters GlobalTaskFilters
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalTaskFilters", paramsArray);
				NetOffice.MSProjectApi.Filters newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Filters.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Filters;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalTaskFilters", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Filters GlobalResourceFilters
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalResourceFilters", paramsArray);
				NetOffice.MSProjectApi.Filters newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Filters.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Filters;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalResourceFilters", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.OutlineCodes GlobalOutlineCodes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalOutlineCodes", paramsArray);
				NetOffice.MSProjectApi.OutlineCodes newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.OutlineCodes.LateBindingApiWrapperType) as NetOffice.MSProjectApi.OutlineCodes;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "GlobalOutlineCodes", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string EnterpriseListSeparator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "EnterpriseListSeparator", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "EnterpriseListSeparator", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseProtectActuals
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "EnterpriseProtectActuals", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "EnterpriseProtectActuals", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Windows Windows
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Windows", paramsArray);
				NetOffice.MSProjectApi.Windows newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Windows.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Windows;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.OfficeApi.CommandBars CommandBars
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CommandBars", paramsArray);
				NetOffice.OfficeApi.CommandBars newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.CommandBars.LateBindingApiWrapperType) as NetOffice.OfficeApi.CommandBars;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.OfficeApi.AnswerWizard AnswerWizard
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AnswerWizard", paramsArray);
				NetOffice.OfficeApi.AnswerWizard newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.AnswerWizard.LateBindingApiWrapperType) as NetOffice.OfficeApi.AnswerWizard;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Projects Projects
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Projects", paramsArray);
				NetOffice.MSProjectApi.Projects newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Projects.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Projects;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string OperatingSystem
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "OperatingSystem", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static string get_FileFormatID(string name, object userID, object databasePassWord)
		{
			return Factory.ExecuteStringPropertyGet(_instance, "FileFormatID", name, userID, databasePassWord);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Alias for get_FileFormatID
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		[SupportByVersion("MSProject", 11,12,14), Redirect("get_FileFormatID")]
		public static string FileFormatID(string name, object userID, object databasePassWord)
		{
			return get_FileFormatID(name, userID, databasePassWord);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="name">string name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static string get_FileFormatID(string name)
		{
			return Factory.ExecuteStringPropertyGet(_instance, "FileFormatID", name);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Alias for get_FileFormatID
		/// </summary>
		/// <param name="name">string name</param>
		[SupportByVersion("MSProject", 11,12,14), Redirect("get_FileFormatID")]
		public static string FileFormatID(string name)
		{
			return get_FileFormatID(name);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static string get_FileFormatID(string name, object userID)
		{
			return Factory.ExecuteStringPropertyGet(_instance, "FileFormatID", name, userID);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Alias for get_FileFormatID
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		[SupportByVersion("MSProject", 11,12,14), Redirect("get_FileFormatID")]
		public static string FileFormatID(string name, object userID)
		{
			return get_FileFormatID(name, userID);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static string get_FileBuildID(string name, object userID, object databasePassWord)
		{
			return Factory.ExecuteStringPropertyGet(_instance, "FileBuildID", name, userID, databasePassWord);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Alias for get_FileBuildID
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		[SupportByVersion("MSProject", 11,12,14), Redirect("get_FileBuildID")]
		public static string FileBuildID(string name, object userID, object databasePassWord)
		{
			return get_FileBuildID(name, userID, databasePassWord);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="name">string name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static string get_FileBuildID(string name)
		{
			return Factory.ExecuteStringPropertyGet(_instance, "FileBuildID", name);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Alias for get_FileBuildID
		/// </summary>
		/// <param name="name">string name</param>
		[SupportByVersion("MSProject", 11,12,14), Redirect("get_FileBuildID")]
		public static string FileBuildID(string name)
		{
			return get_FileBuildID(name);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static string get_FileBuildID(string name, object userID)
		{
			return Factory.ExecuteStringPropertyGet(_instance, "FileBuildID", name, userID);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Alias for get_FileBuildID
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="userID">optional object userID</param>
		[SupportByVersion("MSProject", 11,12,14), Redirect("get_FileBuildID")]
		public static string FileBuildID(string name, object userID)
		{
			return get_FileBuildID(name, userID);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.OfficeApi.COMAddIns COMAddIns
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "COMAddIns", paramsArray);
				NetOffice.OfficeApi.COMAddIns newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.COMAddIns.LateBindingApiWrapperType) as NetOffice.OfficeApi.COMAddIns;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Windows2 Windows2
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Windows2", paramsArray);
				NetOffice.MSProjectApi.Windows2 newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Windows2.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Windows2;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.ReportTemplates VisualReportTemplateList
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "VisualReportTemplateList", paramsArray);
				NetOffice.MSProjectApi.ReportTemplates newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.ReportTemplates.LateBindingApiWrapperType) as NetOffice.MSProjectApi.ReportTemplates;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "VisualReportTemplateList", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Use3DLook
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Use3DLook", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Use3DLook", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UseOMIDs
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "UseOMIDs", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "UseOMIDs", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 UndoLevels
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "UndoLevels", paramsArray);
				return NetRuntimeSystem.Convert.ToInt32(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "UndoLevels", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnableChangeHighlighting
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "EnableChangeHighlighting", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "EnableChangeHighlighting", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string VisualReportsAdditionalTemplatePath
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "VisualReportsAdditionalTemplatePath", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "VisualReportsAdditionalTemplatePath", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TrustProjectServerAndWSSPages
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "TrustProjectServerAndWSSPages", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "TrustProjectServerAndWSSPages", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.OfficeApi.IAssistance Assistance
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Assistance", paramsArray);
				NetOffice.OfficeApi.IAssistance newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.IAssistance.LateBindingApiWrapperType) as NetOffice.OfficeApi.IAssistance;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static object TimescaleStart
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "TimescaleStart", paramsArray);
				if((null != returnItem) && (returnItem is MarshalByRefObject))
				{
					ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "TimescaleStart", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static object TimescaleFinish
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "TimescaleFinish", paramsArray);
				if((null != returnItem) && (returnItem is MarshalByRefObject))
				{
					ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "TimescaleFinish", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static object PanZoomStart
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PanZoomStart", paramsArray);
				if((null != returnItem) && (returnItem is MarshalByRefObject))
				{
					ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "PanZoomStart", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static object PanZoomFinish
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PanZoomFinish", paramsArray);
				if((null != returnItem) && (returnItem is MarshalByRefObject))
				{
					ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "PanZoomFinish", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static string Build
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Build", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "Build", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static string CompareProjectsCurrentVersionName
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CompareProjectsCurrentVersionName", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "CompareProjectsCurrentVersionName", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static string CompareProjectsPreviousVersionName
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CompareProjectsPreviousVersionName", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "CompareProjectsPreviousVersionName", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// Get/Set
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelFreeformTasks
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LevelFreeformTasks", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "LevelFreeformTasks", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// Get
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static NetOffice.MSProjectApi.Reports GlobalReports
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "GlobalReports", paramsArray);
				NetOffice.MSProjectApi.Reports newObject = Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.MSProjectApi.Reports.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Reports;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// Get
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="projectJobType">NetOffice.MSProjectApi.Enums.PjJobType projectJobType</param>
		[SupportByVersion("MSProject", 11)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.MSProjectApi.Enums.PjCacheJobState get_GetCacheStatusForProject(string projectName, NetOffice.MSProjectApi.Enums.PjJobType projectJobType)
		{
			return Factory.ExecuteEnumPropertyGet<NetOffice.MSProjectApi.Enums.PjCacheJobState>(_instance, "GetCacheStatusForProject", projectName, projectJobType);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// Alias for get_GetCacheStatusForProject
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="projectJobType">NetOffice.MSProjectApi.Enums.PjJobType projectJobType</param>
		[SupportByVersion("MSProject", 11), Redirect("get_GetCacheStatusForProject")]
		public static NetOffice.MSProjectApi.Enums.PjCacheJobState GetCacheStatusForProject(string projectName, NetOffice.MSProjectApi.Enums.PjJobType projectJobType)
		{
			return get_GetCacheStatusForProject(projectName, projectJobType);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// Get
		/// </summary>
		/// <param name="projectName">string projectName</param>
		[SupportByVersion("MSProject", 11)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static bool get_IsCheckedOut(string projectName)
		{
			return Factory.ExecuteBoolPropertyGet(_instance, "IsCheckedOut", projectName);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// Alias for get_IsCheckedOut
		/// </summary>
		/// <param name="projectName">string projectName</param>
		[SupportByVersion("MSProject", 11), Redirect("get_IsCheckedOut")]
		public static bool IsCheckedOut(string projectName)
		{
			return get_IsCheckedOut(projectName);
		}

		#endregion

		#region Methods

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="saveChanges">optional NetOffice.MSProjectApi.Enums.PjSaveType SaveChanges = 2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Quit(object saveChanges)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(saveChanges);
			Invoker.Method(_instance, "Quit", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Quit()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "Quit", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="finishDate">object finishDate</param>
		/// <param name="duration">object duration</param>
		/// <param name="calendar">optional object calendar</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object DateSubtract(object finishDate, object duration, object calendar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(finishDate, duration, calendar);
			object returnItem = Invoker.MethodReturn(_instance, "DateSubtract", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="finishDate">object finishDate</param>
		/// <param name="duration">object duration</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object DateSubtract(object finishDate, object duration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(finishDate, duration);
			object returnItem = Invoker.MethodReturn(_instance, "DateSubtract", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">object duration</param>
		/// <param name="units">optional object units</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string DurationFormat(object duration, object units)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration, units);
			object returnItem = Invoker.MethodReturn(_instance, "DurationFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">object duration</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static string DurationFormat(object duration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration);
			object returnItem = Invoker.MethodReturn(_instance, "DurationFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">string duration</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object DurationValue(string duration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration);
			object returnItem = Invoker.MethodReturn(_instance, "DurationValue", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="date">object date</param>
		/// <param name="format">optional object format</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object DateFormat(object date, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(date, format);
			object returnItem = Invoker.MethodReturn(_instance, "DateFormat", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="date">object date</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object DateFormat(object date)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(date);
			object returnItem = Invoker.MethodReturn(_instance, "DateFormat", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="password">optional object password</param>
		/// <param name="downloadNewMail">optional object downloadNewMail</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void MailLogon(object name, object password, object downloadNewMail)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, password, downloadNewMail);
			Invoker.Method(_instance, "MailLogon", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void MailLogon()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "MailLogon", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void MailLogon(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(_instance, "MailLogon", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="password">optional object password</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void MailLogon(object name, object password)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, password);
			Invoker.Method(_instance, "MailLogon", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void MailLogoff()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "MailLogoff", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object MailSession()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailSession", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object MailSystem()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailSystem", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		/// <param name="resourceID">Int32 resourceID</param>
		/// <param name="startDate">object startDate</param>
		/// <param name="endDate">object endDate</param>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Type = 0</param>
		/// <param name="timeScaleUnit">optional NetOffice.MSProjectApi.Enums.PjTimescaleUnit TimeScaleUnit = 3</param>
		/// <param name="count">optional object count</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object TimescaledData(Int32 taskID, Int32 resourceID, object startDate, object endDate, object type, object timeScaleUnit, object count)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, resourceID, startDate, endDate, type, timeScaleUnit, count);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaledData", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		/// <param name="resourceID">Int32 resourceID</param>
		/// <param name="startDate">object startDate</param>
		/// <param name="endDate">object endDate</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object TimescaledData(Int32 taskID, Int32 resourceID, object startDate, object endDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, resourceID, startDate, endDate);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaledData", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		/// <param name="resourceID">Int32 resourceID</param>
		/// <param name="startDate">object startDate</param>
		/// <param name="endDate">object endDate</param>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Type = 0</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object TimescaledData(Int32 taskID, Int32 resourceID, object startDate, object endDate, object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, resourceID, startDate, endDate, type);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaledData", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		/// <param name="resourceID">Int32 resourceID</param>
		/// <param name="startDate">object startDate</param>
		/// <param name="endDate">object endDate</param>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Type = 0</param>
		/// <param name="timeScaleUnit">optional NetOffice.MSProjectApi.Enums.PjTimescaleUnit TimeScaleUnit = 3</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object TimescaledData(Int32 taskID, Int32 resourceID, object startDate, object endDate, object type, object timeScaleUnit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, resourceID, startDate, endDate, type, timeScaleUnit);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaledData", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string CustomFieldGetName(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldGetName", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		/// <param name="arg25">optional object arg25</param>
		/// <param name="arg26">optional object arg26</param>
		/// <param name="arg27">optional object arg27</param>
		/// <param name="arg28">optional object arg28</param>
		/// <param name="arg29">optional object arg29</param>
		/// <param name="arg30">optional object arg30</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24, object arg25, object arg26, object arg27, object arg28, object arg29, object arg30)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		/// <param name="arg25">optional object arg25</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24, object arg25)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		/// <param name="arg25">optional object arg25</param>
		/// <param name="arg26">optional object arg26</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24, object arg25, object arg26)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		/// <param name="arg25">optional object arg25</param>
		/// <param name="arg26">optional object arg26</param>
		/// <param name="arg27">optional object arg27</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24, object arg25, object arg26, object arg27)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		/// <param name="arg25">optional object arg25</param>
		/// <param name="arg26">optional object arg26</param>
		/// <param name="arg27">optional object arg27</param>
		/// <param name="arg28">optional object arg28</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24, object arg25, object arg26, object arg27, object arg28)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="arg1">optional object arg1</param>
		/// <param name="arg2">optional object arg2</param>
		/// <param name="arg3">optional object arg3</param>
		/// <param name="arg4">optional object arg4</param>
		/// <param name="arg5">optional object arg5</param>
		/// <param name="arg6">optional object arg6</param>
		/// <param name="arg7">optional object arg7</param>
		/// <param name="arg8">optional object arg8</param>
		/// <param name="arg9">optional object arg9</param>
		/// <param name="arg10">optional object arg10</param>
		/// <param name="arg11">optional object arg11</param>
		/// <param name="arg12">optional object arg12</param>
		/// <param name="arg13">optional object arg13</param>
		/// <param name="arg14">optional object arg14</param>
		/// <param name="arg15">optional object arg15</param>
		/// <param name="arg16">optional object arg16</param>
		/// <param name="arg17">optional object arg17</param>
		/// <param name="arg18">optional object arg18</param>
		/// <param name="arg19">optional object arg19</param>
		/// <param name="arg20">optional object arg20</param>
		/// <param name="arg21">optional object arg21</param>
		/// <param name="arg22">optional object arg22</param>
		/// <param name="arg23">optional object arg23</param>
		/// <param name="arg24">optional object arg24</param>
		/// <param name="arg25">optional object arg25</param>
		/// <param name="arg26">optional object arg26</param>
		/// <param name="arg27">optional object arg27</param>
		/// <param name="arg28">optional object arg28</param>
		/// <param name="arg29">optional object arg29</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void Run(string name, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16, object arg17, object arg18, object arg19, object arg20, object arg21, object arg22, object arg23, object arg24, object arg25, object arg26, object arg27, object arg28, object arg29)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29);
			Invoker.Method(_instance, "Run", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 BoxGetXPosition(Int32 taskID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "BoxGetXPosition", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 BoxGetXPosition(Int32 taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "BoxGetXPosition", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 BoxGetYPosition(Int32 taskID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "BoxGetYPosition", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 BoxGetYPosition(Int32 taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "BoxGetYPosition", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string CustomFieldGetFormula(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldGetFormula", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjValueListItem item</param>
		/// <param name="index">Int32 index</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string CustomFieldValueListGetItem(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, NetOffice.MSProjectApi.Enums.PjValueListItem item, Int32 index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, item, index);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListGetItem", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="goalArea">Int32 goalArea</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void GoalAreaHighlight(Int32 goalArea)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(goalArea);
			Invoker.Method(_instance, "GoalAreaHighlight", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="displayState">bool displayState</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void SetSidepaneStateButton(bool displayState)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(displayState);
			Invoker.Method(_instance, "SetSidepaneStateButton", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void GoalAreaTaskHighlight(Int32 taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			Invoker.Method(_instance, "GoalAreaTaskHighlight", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldName">string fieldName</param>
		/// <param name="fieldType">optional NetOffice.MSProjectApi.Enums.PjFieldType FieldType = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjField FieldNameToFieldConstant(string fieldName, object fieldType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, fieldType);
			object returnItem = Invoker.MethodReturn(_instance, "FieldNameToFieldConstant", paramsArray);
			int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
			return (NetOffice.MSProjectApi.Enums.PjField)intReturnItem;
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldName">string fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjField FieldNameToFieldConstant(string fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "FieldNameToFieldConstant", paramsArray);
			int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
			return (NetOffice.MSProjectApi.Enums.PjField)intReturnItem;
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">NetOffice.MSProjectApi.Enums.PjField field</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string FieldConstantToFieldName(NetOffice.MSProjectApi.Enums.PjField field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field);
			object returnItem = Invoker.MethodReturn(_instance, "FieldConstantToFieldName", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="requestXML">string requestXML</param>
		/// <param name="project">optional object project</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string GetProjectServerSettings(string requestXML, object project)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(requestXML, project);
			object returnItem = Invoker.MethodReturn(_instance, "GetProjectServerSettings", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="requestXML">string requestXML</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static string GetProjectServerSettings(string requestXML)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(requestXML);
			object returnItem = Invoker.MethodReturn(_instance, "GetProjectServerSettings", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="window">optional object window</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void UnloadWebBrowserControl(object window)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(window);
			Invoker.Method(_instance, "UnloadWebBrowserControl", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void UnloadWebBrowserControl()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "UnloadWebBrowserControl", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">string serverURL</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Enums.PjServerVersionInfo GetProjectServerVersion(string serverURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL);
			object returnItem = Invoker.MethodReturn(_instance, "GetProjectServerVersion", paramsArray);
			int intReturnItem = NetRuntimeSystem.Convert.ToInt32(returnItem);
			return (NetOffice.MSProjectApi.Enums.PjServerVersionInfo)intReturnItem;
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="dataFile">string dataFile</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object UpdateFromProjectServer(string dataFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(dataFile);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateFromProjectServer", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 LocaleID()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LocaleID", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void EnterpriseMakeServerURLTrusted()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "EnterpriseMakeServerURLTrusted", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="uRL">string uRL</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool IsURLTrusted(string uRL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(uRL);
			object returnItem = Invoker.MethodReturn(_instance, "IsURLTrusted", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyResources">optional bool NotifyResources = true</param>
		/// <param name="notificationText">optional object notificationText</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishNewAndChangedAssignments(object showDialog, object itemsScope, object notifyResources, object notificationText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyResources, notificationText);
			Invoker.Method(_instance, "PublishNewAndChangedAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishNewAndChangedAssignments()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "PublishNewAndChangedAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishNewAndChangedAssignments(object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog);
			Invoker.Method(_instance, "PublishNewAndChangedAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishNewAndChangedAssignments(object showDialog, object itemsScope)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope);
			Invoker.Method(_instance, "PublishNewAndChangedAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyResources">optional bool NotifyResources = true</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishNewAndChangedAssignments(object showDialog, object itemsScope, object notifyResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyResources);
			Invoker.Method(_instance, "PublishNewAndChangedAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="publishFullPlan">optional bool PublishFullPlan = true</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishProjectPlan(object showDialog, object publishFullPlan)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, publishFullPlan);
			Invoker.Method(_instance, "PublishProjectPlan", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishProjectPlan()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "PublishProjectPlan", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishProjectPlan(object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog);
			Invoker.Method(_instance, "PublishProjectPlan", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void PublishAllInformation()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "PublishAllInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyTaskLead">optional bool NotifyTaskLead = false</param>
		/// <param name="notificationText">optional object notificationText</param>
		/// <param name="reportingPeriodFrom">optional object reportingPeriodFrom</param>
		/// <param name="reportingPeriodTo">optional object reportingPeriodTo</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation(object showDialog, object itemsScope, object notifyTaskLead, object notificationText, object reportingPeriodFrom, object reportingPeriodTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyTaskLead, notificationText, reportingPeriodFrom, reportingPeriodTo);
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation(object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog);
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation(object showDialog, object itemsScope)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope);
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyTaskLead">optional bool NotifyTaskLead = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation(object showDialog, object itemsScope, object notifyTaskLead)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyTaskLead);
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyTaskLead">optional bool NotifyTaskLead = false</param>
		/// <param name="notificationText">optional object notificationText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation(object showDialog, object itemsScope, object notifyTaskLead, object notificationText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyTaskLead, notificationText);
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyTaskLead">optional bool NotifyTaskLead = false</param>
		/// <param name="notificationText">optional object notificationText</param>
		/// <param name="reportingPeriodFrom">optional object reportingPeriodFrom</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RequestProgressInformation(object showDialog, object itemsScope, object notifyTaskLead, object notificationText, object reportingPeriodFrom)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyTaskLead, notificationText, reportingPeriodFrom);
			Invoker.Method(_instance, "RequestProgressInformation", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyResources">optional bool NotifyResources = true</param>
		/// <param name="overwriteActuals">optional bool OverwriteActuals = false</param>
		/// <param name="becomeManager">optional bool BecomeManager = false</param>
		/// <param name="notificationText">optional object notificationText</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments(object showDialog, object itemsScope, object notifyResources, object overwriteActuals, object becomeManager, object notificationText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyResources, overwriteActuals, becomeManager, notificationText);
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments(object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog);
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments(object showDialog, object itemsScope)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope);
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyResources">optional bool NotifyResources = true</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments(object showDialog, object itemsScope, object notifyResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyResources);
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyResources">optional bool NotifyResources = true</param>
		/// <param name="overwriteActuals">optional bool OverwriteActuals = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments(object showDialog, object itemsScope, object notifyResources, object overwriteActuals)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyResources, overwriteActuals);
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showDialog">optional bool ShowDialog = false</param>
		/// <param name="itemsScope">optional NetOffice.MSProjectApi.Enums.PjPublishScope ItemsScope = 1</param>
		/// <param name="notifyResources">optional bool NotifyResources = true</param>
		/// <param name="overwriteActuals">optional bool OverwriteActuals = false</param>
		/// <param name="becomeManager">optional bool BecomeManager = false</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void RepublishAssignments(object showDialog, object itemsScope, object notifyResources, object overwriteActuals, object becomeManager)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showDialog, itemsScope, notifyResources, overwriteActuals, becomeManager);
			Invoker.Method(_instance, "RepublishAssignments", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="waitForCompletion">bool waitForCompletion</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 RegisterProject(bool waitForCompletion)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(waitForCompletion);
			object returnItem = Invoker.MethodReturn(_instance, "RegisterProject", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alertText">string alertText</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SaveProjectIfDirty(string alertText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alertText);
			object returnItem = Invoker.MethodReturn(_instance, "SaveProjectIfDirty", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool IsOfficeTaskPaneVisible()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "IsOfficeTaskPaneVisible", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void OfficeTaskPaneHide()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "OfficeTaskPaneHide", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 GetCurrentTheme()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GetCurrentTheme", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="message">string message</param>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjMessageType Type = 0</param>
		/// <param name="yesText">optional object yesText</param>
		/// <param name="noText">optional object noText</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Message(string message, object type, object yesText, object noText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(message, type, yesText, noText);
			object returnItem = Invoker.MethodReturn(_instance, "Message", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="message">string message</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Message(string message)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(message);
			object returnItem = Invoker.MethodReturn(_instance, "Message", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="message">string message</param>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjMessageType Type = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Message(string message, object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(message, type);
			object returnItem = Invoker.MethodReturn(_instance, "Message", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="message">string message</param>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjMessageType Type = 0</param>
		/// <param name="yesText">optional object yesText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Message(string message, object type, object yesText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(message, type, yesText);
			object returnItem = Invoker.MethodReturn(_instance, "Message", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Alerts(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "Alerts", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Alerts()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Alerts", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="template">optional object template</param>
		/// <param name="fileNewDialog">optional object fileNewDialog</param>
		/// <param name="fileNewWorkpane">optional object fileNewWorkpane</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileNew(object summaryInfo, object template, object fileNewDialog, object fileNewWorkpane)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(summaryInfo, template, fileNewDialog, fileNewWorkpane);
			object returnItem = Invoker.MethodReturn(_instance, "FileNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileNew()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileNew(object summaryInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(summaryInfo);
			object returnItem = Invoker.MethodReturn(_instance, "FileNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="template">optional object template</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileNew(object summaryInfo, object template)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(summaryInfo, template);
			object returnItem = Invoker.MethodReturn(_instance, "FileNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="template">optional object template</param>
		/// <param name="fileNewDialog">optional object fileNewDialog</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileNew(object summaryInfo, object template, object fileNewDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(summaryInfo, template, fileNewDialog);
			object returnItem = Invoker.MethodReturn(_instance, "FileNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileProperties()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="ignoreReadOnlyRecommended">optional object ignoreReadOnlyRecommended</param>
		/// <param name="xMLName">optional object xMLName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpen(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword, object ignoreReadOnlyRecommended, object xMLName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword, ignoreReadOnlyRecommended, xMLName);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpen(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpen(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpen(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpen(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="ignoreReadOnlyRecommended">optional object ignoreReadOnlyRecommended</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpen(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword, object ignoreReadOnlyRecommended)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword, ignoreReadOnlyRecommended);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Zoom()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Zoom", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">optional object duration</param>
		/// <param name="entire">optional object entire</param>
		/// <param name="selection">optional object selection</param>
		/// <param name="reset">optional object reset</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomTimescale(object duration, object entire, object selection, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration, entire, selection, reset);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomTimescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomTimescale()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ZoomTimescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">optional object duration</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomTimescale(object duration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomTimescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">optional object duration</param>
		/// <param name="entire">optional object entire</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomTimescale(object duration, object entire)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration, entire);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomTimescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="duration">optional object duration</param>
		/// <param name="entire">optional object entire</param>
		/// <param name="selection">optional object selection</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomTimescale(object duration, object entire, object selection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(duration, entire, selection);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomTimescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percent">optional object percent</param>
		/// <param name="entire">optional object entire</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxZoom(object percent, object entire)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percent, entire);
			object returnItem = Invoker.MethodReturn(_instance, "BoxZoom", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxZoom()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxZoom", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percent">optional object percent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxZoom(object percent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percent);
			object returnItem = Invoker.MethodReturn(_instance, "BoxZoom", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		/// <param name="noAuto">optional object noAuto</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileClose(object save, object noAuto)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save, noAuto);
			object returnItem = Invoker.MethodReturn(_instance, "FileClose", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileClose()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileClose", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileClose(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileClose", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseAll(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="share">optional object share</param>
		/// <param name="name">optional object name</param>
		/// <param name="pool">optional object pool</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharing(object share, object name, object pool)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(share, name, pool);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharing()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="share">optional object share</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharing(object share)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(share);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="share">optional object share</param>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharing(object share, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(share, name);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSave()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="clearBaseline">optional object clearBaseline</param>
		/// <param name="clearActuals">optional object clearActuals</param>
		/// <param name="clearResourceRates">optional object clearResourceRates</param>
		/// <param name="clearFixedCosts">optional object clearFixedCosts</param>
		/// <param name="xMLName">optional object xMLName</param>
		/// <param name="clearConfirmed">optional object clearConfirmed</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword, object clearBaseline, object clearActuals, object clearResourceRates, object clearFixedCosts, object xMLName, object clearConfirmed)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword, clearBaseline, clearActuals, clearResourceRates, clearFixedCosts, xMLName, clearConfirmed);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="clearBaseline">optional object clearBaseline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword, object clearBaseline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword, clearBaseline);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="clearBaseline">optional object clearBaseline</param>
		/// <param name="clearActuals">optional object clearActuals</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword, object clearBaseline, object clearActuals)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword, clearBaseline, clearActuals);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="clearBaseline">optional object clearBaseline</param>
		/// <param name="clearActuals">optional object clearActuals</param>
		/// <param name="clearResourceRates">optional object clearResourceRates</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword, object clearBaseline, object clearActuals, object clearResourceRates)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword, clearBaseline, clearActuals, clearResourceRates);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="clearBaseline">optional object clearBaseline</param>
		/// <param name="clearActuals">optional object clearActuals</param>
		/// <param name="clearResourceRates">optional object clearResourceRates</param>
		/// <param name="clearFixedCosts">optional object clearFixedCosts</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword, object clearBaseline, object clearActuals, object clearResourceRates, object clearFixedCosts)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword, clearBaseline, clearActuals, clearResourceRates, clearFixedCosts);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjFileFormat Format = 0</param>
		/// <param name="backup">optional object backup</param>
		/// <param name="readOnly">optional object readOnly</param>
		/// <param name="taskInformation">optional object taskInformation</param>
		/// <param name="filtered">optional object filtered</param>
		/// <param name="table">optional object table</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		/// <param name="map">optional object map</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="clearBaseline">optional object clearBaseline</param>
		/// <param name="clearActuals">optional object clearActuals</param>
		/// <param name="clearResourceRates">optional object clearResourceRates</param>
		/// <param name="clearFixedCosts">optional object clearFixedCosts</param>
		/// <param name="xMLName">optional object xMLName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveAs(object name, object format, object backup, object readOnly, object taskInformation, object filtered, object table, object userID, object databasePassWord, object formatID, object map, object password, object writeResPassword, object clearBaseline, object clearActuals, object clearResourceRates, object clearFixedCosts, object xMLName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, backup, readOnly, taskInformation, filtered, table, userID, databasePassWord, formatID, map, password, writeResPassword, clearBaseline, clearActuals, clearResourceRates, clearFixedCosts, xMLName);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveAs", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveWorkspace(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveWorkspace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveWorkspace()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveWorkspace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="onePageWide">optional object onePageWide</param>
		/// <param name="preview">optional object preview</param>
		/// <param name="color">optional object color</param>
		/// <param name="showIEPrintDialog">optional object showIEPrintDialog</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate, object onePageWide, object preview, object color, object showIEPrintDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate, onePageWide, preview, color, showIEPrintDialog);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies, fromDate);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="onePageWide">optional object onePageWide</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate, object onePageWide)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate, onePageWide);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="onePageWide">optional object onePageWide</param>
		/// <param name="preview">optional object preview</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate, object onePageWide, object preview)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate, onePageWide, preview);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="onePageWide">optional object onePageWide</param>
		/// <param name="preview">optional object preview</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrint(object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate, object onePageWide, object preview, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate, onePageWide, preview, color);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="preview">optional object preview</param>
		/// <param name="color">optional object color</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate, object preview, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate, preview, color);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks, object draft)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks, draft);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks, object draft, object copies)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks, draft, copies);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks, draft, copies, fromDate);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="fromPage">optional object fromPage</param>
		/// <param name="toPage">optional object toPage</param>
		/// <param name="pageBreaks">optional object pageBreaks</param>
		/// <param name="draft">optional object draft</param>
		/// <param name="copies">optional object copies</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="preview">optional object preview</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrint(object name, object fromPage, object toPage, object pageBreaks, object draft, object copies, object fromDate, object toDate, object preview)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromPage, toPage, pageBreaks, draft, copies, fromDate, toDate, preview);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrintPreview()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePrintPreview", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrintPreview(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrintPreview", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReportPrintPreview()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReportPrintPreview", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="printer">optional object printer</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrintSetup(object printer)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(printer);
			object returnItem = Invoker.MethodReturn(_instance, "FilePrintSetup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePrintSetup()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePrintSetup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetup(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetup()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="portrait">object portrait</param>
		/// <param name="percentScale">object percentScale</param>
		/// <param name="pagesTall">object pagesTall</param>
		/// <param name="pagesWide">object pagesWide</param>
		/// <param name="paperSize">optional NetOffice.MSProjectApi.Enums.PjPaperSize PaperSize = 0</param>
		/// <param name="firstPageNumber">optional object firstPageNumber</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupPage(object name, object portrait, object percentScale, object pagesTall, object pagesWide, object paperSize, object firstPageNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, portrait, percentScale, pagesTall, pagesWide, paperSize, firstPageNumber);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="portrait">object portrait</param>
		/// <param name="percentScale">object percentScale</param>
		/// <param name="pagesTall">object pagesTall</param>
		/// <param name="pagesWide">object pagesWide</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupPage(object name, object portrait, object percentScale, object pagesTall, object pagesWide)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, portrait, percentScale, pagesTall, pagesWide);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="portrait">object portrait</param>
		/// <param name="percentScale">object percentScale</param>
		/// <param name="pagesTall">object pagesTall</param>
		/// <param name="pagesWide">object pagesWide</param>
		/// <param name="paperSize">optional NetOffice.MSProjectApi.Enums.PjPaperSize PaperSize = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupPage(object name, object portrait, object percentScale, object pagesTall, object pagesWide, object paperSize)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, portrait, percentScale, pagesTall, pagesWide, paperSize);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="top">optional object top</param>
		/// <param name="bottom">optional object bottom</param>
		/// <param name="left">optional object left</param>
		/// <param name="right">optional object right</param>
		/// <param name="borders">optional object borders</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins(object name, object top, object bottom, object left, object right, object borders)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, top, bottom, left, right, borders);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="top">optional object top</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins(object name, object top)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, top);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="top">optional object top</param>
		/// <param name="bottom">optional object bottom</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins(object name, object top, object bottom)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, top, bottom);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="top">optional object top</param>
		/// <param name="bottom">optional object bottom</param>
		/// <param name="left">optional object left</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins(object name, object top, object bottom, object left)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, top, bottom, left);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="top">optional object top</param>
		/// <param name="bottom">optional object bottom</param>
		/// <param name="left">optional object left</param>
		/// <param name="right">optional object right</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupMargins(object name, object top, object bottom, object left, object right)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, top, bottom, left, right);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupMargins", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupHeader(object name, object alignment, object text)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, alignment, text);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupHeader", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupHeader(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupHeader", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupHeader(object name, object alignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, alignment);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupHeader", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupFooter(object name, object alignment, object text)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, alignment, text);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupFooter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupFooter(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupFooter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupFooter(object name, object alignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, alignment);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupFooter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">object text</param>
		/// <param name="labelFontName">object labelFontName</param>
		/// <param name="labelFontSize">object labelFontSize</param>
		/// <param name="labelFontBold">object labelFontBold</param>
		/// <param name="labelFontItalic">object labelFontItalic</param>
		/// <param name="labelFontUnderline">object labelFontUnderline</param>
		/// <param name="labelFontColor">optional NetOffice.MSProjectApi.Enums.PjColor LabelFontColor = -1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupLegend(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold, object labelFontItalic, object labelFontUnderline, object labelFontColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold, labelFontItalic, labelFontUnderline, labelFontColor);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">object text</param>
		/// <param name="labelFontName">object labelFontName</param>
		/// <param name="labelFontSize">object labelFontSize</param>
		/// <param name="labelFontBold">object labelFontBold</param>
		/// <param name="labelFontItalic">object labelFontItalic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupLegend(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold, object labelFontItalic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold, labelFontItalic);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">object text</param>
		/// <param name="labelFontName">object labelFontName</param>
		/// <param name="labelFontSize">object labelFontSize</param>
		/// <param name="labelFontBold">object labelFontBold</param>
		/// <param name="labelFontItalic">object labelFontItalic</param>
		/// <param name="labelFontUnderline">object labelFontUnderline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupLegend(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold, object labelFontItalic, object labelFontUnderline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold, labelFontItalic, labelFontUnderline);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		/// <param name="repeatColumns">optional object repeatColumns</param>
		/// <param name="printNotes">optional object printNotes</param>
		/// <param name="printBlankPages">optional object printBlankPages</param>
		/// <param name="bestPageFitTimescale">optional object bestPageFitTimescale</param>
		/// <param name="printColumnTotals">optional object printColumnTotals</param>
		/// <param name="printRowTotals">optional object printRowTotals</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns, object repeatColumns, object printNotes, object printBlankPages, object bestPageFitTimescale, object printColumnTotals, object printRowTotals)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns, repeatColumns, printNotes, printBlankPages, bestPageFitTimescale, printColumnTotals, printRowTotals);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		/// <param name="repeatColumns">optional object repeatColumns</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns, object repeatColumns)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns, repeatColumns);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		/// <param name="repeatColumns">optional object repeatColumns</param>
		/// <param name="printNotes">optional object printNotes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns, object repeatColumns, object printNotes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns, repeatColumns, printNotes);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		/// <param name="repeatColumns">optional object repeatColumns</param>
		/// <param name="printNotes">optional object printNotes</param>
		/// <param name="printBlankPages">optional object printBlankPages</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns, object repeatColumns, object printNotes, object printBlankPages)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns, repeatColumns, printNotes, printBlankPages);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		/// <param name="repeatColumns">optional object repeatColumns</param>
		/// <param name="printNotes">optional object printNotes</param>
		/// <param name="printBlankPages">optional object printBlankPages</param>
		/// <param name="bestPageFitTimescale">optional object bestPageFitTimescale</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns, object repeatColumns, object printNotes, object printBlankPages, object bestPageFitTimescale)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns, repeatColumns, printNotes, printBlankPages, bestPageFitTimescale);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="allSheetColumns">optional object allSheetColumns</param>
		/// <param name="repeatColumns">optional object repeatColumns</param>
		/// <param name="printNotes">optional object printNotes</param>
		/// <param name="printBlankPages">optional object printBlankPages</param>
		/// <param name="bestPageFitTimescale">optional object bestPageFitTimescale</param>
		/// <param name="printColumnTotals">optional object printColumnTotals</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupView(object name, object allSheetColumns, object repeatColumns, object printNotes, object printBlankPages, object bestPageFitTimescale, object printColumnTotals)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, allSheetColumns, repeatColumns, printNotes, printBlankPages, bestPageFitTimescale, printColumnTotals);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		/// <param name="onlyWeeksInMonth">optional object onlyWeeksInMonth</param>
		/// <param name="monthPreviews">optional object monthPreviews</param>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="additionalTasks">optional object additionalTasks</param>
		/// <param name="groupAdditionalTasks">optional object groupAdditionalTasks</param>
		/// <param name="printNotes">optional object printNotes</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth, object onlyWeeksInMonth, object monthPreviews, object monthTitle, object additionalTasks, object groupAdditionalTasks, object printNotes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth, onlyWeeksInMonth, monthPreviews, monthTitle, additionalTasks, groupAdditionalTasks, printNotes);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		/// <param name="onlyWeeksInMonth">optional object onlyWeeksInMonth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth, object onlyWeeksInMonth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth, onlyWeeksInMonth);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		/// <param name="onlyWeeksInMonth">optional object onlyWeeksInMonth</param>
		/// <param name="monthPreviews">optional object monthPreviews</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth, object onlyWeeksInMonth, object monthPreviews)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth, onlyWeeksInMonth, monthPreviews);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		/// <param name="onlyWeeksInMonth">optional object onlyWeeksInMonth</param>
		/// <param name="monthPreviews">optional object monthPreviews</param>
		/// <param name="monthTitle">optional object monthTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth, object onlyWeeksInMonth, object monthPreviews, object monthTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth, onlyWeeksInMonth, monthPreviews, monthTitle);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		/// <param name="onlyWeeksInMonth">optional object onlyWeeksInMonth</param>
		/// <param name="monthPreviews">optional object monthPreviews</param>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="additionalTasks">optional object additionalTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth, object onlyWeeksInMonth, object monthPreviews, object monthTitle, object additionalTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth, onlyWeeksInMonth, monthPreviews, monthTitle, additionalTasks);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="monthsPerPage">optional object monthsPerPage</param>
		/// <param name="weeksPerPage">optional object weeksPerPage</param>
		/// <param name="screenWeekHeight">optional object screenWeekHeight</param>
		/// <param name="onlyDaysInMonth">optional object onlyDaysInMonth</param>
		/// <param name="onlyWeeksInMonth">optional object onlyWeeksInMonth</param>
		/// <param name="monthPreviews">optional object monthPreviews</param>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="additionalTasks">optional object additionalTasks</param>
		/// <param name="groupAdditionalTasks">optional object groupAdditionalTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendar(object name, object monthsPerPage, object weeksPerPage, object screenWeekHeight, object onlyDaysInMonth, object onlyWeeksInMonth, object monthPreviews, object monthTitle, object additionalTasks, object groupAdditionalTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, monthsPerPage, weeksPerPage, screenWeekHeight, onlyDaysInMonth, onlyWeeksInMonth, monthPreviews, monthTitle, additionalTasks, groupAdditionalTasks);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilePageSetupCalendarText(object name, object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="any">optional object any</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailOpen(object any)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(any);
			object returnItem = Invoker.MethodReturn(_instance, "MailOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailOpen()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="returnReceipt">optional object returnReceipt</param>
		/// <param name="bcc">optional object bcc</param>
		/// <param name="urgent">optional object urgent</param>
		/// <param name="saveCopy">optional object saveCopy</param>
		/// <param name="addRecipient">optional object addRecipient</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures, object includeDocument, object returnReceipt, object bcc, object urgent, object saveCopy, object addRecipient)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures, includeDocument, returnReceipt, bcc, urgent, saveCopy, addRecipient);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures, object includeDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures, includeDocument);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="returnReceipt">optional object returnReceipt</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures, object includeDocument, object returnReceipt)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures, includeDocument, returnReceipt);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="returnReceipt">optional object returnReceipt</param>
		/// <param name="bcc">optional object bcc</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures, object includeDocument, object returnReceipt, object bcc)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures, includeDocument, returnReceipt, bcc);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="returnReceipt">optional object returnReceipt</param>
		/// <param name="bcc">optional object bcc</param>
		/// <param name="urgent">optional object urgent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures, object includeDocument, object returnReceipt, object bcc, object urgent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures, includeDocument, returnReceipt, bcc, urgent);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="cc">optional object cc</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="enclosures">optional object enclosures</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="returnReceipt">optional object returnReceipt</param>
		/// <param name="bcc">optional object bcc</param>
		/// <param name="urgent">optional object urgent</param>
		/// <param name="saveCopy">optional object saveCopy</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSend(object to, object cc, object subject, object body, object enclosures, object includeDocument, object returnReceipt, object bcc, object urgent, object saveCopy)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, cc, subject, body, enclosures, includeDocument, returnReceipt, bcc, urgent, saveCopy);
			object returnItem = Invoker.MethodReturn(_instance, "MailSend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		/// <param name="taskContacts">optional object taskContacts</param>
		/// <param name="selection">optional object selection</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="includePicture">optional object includePicture</param>
		/// <param name="body">optional object body</param>
		/// <param name="subject">optional object subject</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources, object taskContacts, object selection, object includeDocument, object includePicture, object body, object subject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources, taskContacts, selection, includeDocument, includePicture, body, subject);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		/// <param name="taskContacts">optional object taskContacts</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources, object taskContacts)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources, taskContacts);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		/// <param name="taskContacts">optional object taskContacts</param>
		/// <param name="selection">optional object selection</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources, object taskContacts, object selection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources, taskContacts, selection);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		/// <param name="taskContacts">optional object taskContacts</param>
		/// <param name="selection">optional object selection</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources, object taskContacts, object selection, object includeDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources, taskContacts, selection, includeDocument);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		/// <param name="taskContacts">optional object taskContacts</param>
		/// <param name="selection">optional object selection</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="includePicture">optional object includePicture</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources, object taskContacts, object selection, object includeDocument, object includePicture)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources, taskContacts, selection, includeDocument, includePicture);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="manager">optional object manager</param>
		/// <param name="resources">optional object resources</param>
		/// <param name="taskContacts">optional object taskContacts</param>
		/// <param name="selection">optional object selection</param>
		/// <param name="includeDocument">optional object includeDocument</param>
		/// <param name="includePicture">optional object includePicture</param>
		/// <param name="body">optional object body</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendScheduleNote(object manager, object resources, object taskContacts, object selection, object includeDocument, object includePicture, object body)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manager, resources, taskContacts, selection, includeDocument, includePicture, body);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendScheduleNote", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailPostDocument()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailPostDocument", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ODBCManageDataSources()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ODBCManageDataSources", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ODBCCreateDataSource()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ODBCCreateDataSource", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="allAtOnce">optional object allAtOnce</param>
		/// <param name="returnWhenDone">optional object returnWhenDone</param>
		/// <param name="trackStatus">optional object trackStatus</param>
		/// <param name="clear">optional object clear</param>
		/// <param name="sendNow">optional object sendNow</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject, object body, object allAtOnce, object returnWhenDone, object trackStatus, object clear, object sendNow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject, body, allAtOnce, returnWhenDone, trackStatus, clear, sendNow);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject, object body)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject, body);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="allAtOnce">optional object allAtOnce</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject, object body, object allAtOnce)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject, body, allAtOnce);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="allAtOnce">optional object allAtOnce</param>
		/// <param name="returnWhenDone">optional object returnWhenDone</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject, object body, object allAtOnce, object returnWhenDone)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject, body, allAtOnce, returnWhenDone);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="allAtOnce">optional object allAtOnce</param>
		/// <param name="returnWhenDone">optional object returnWhenDone</param>
		/// <param name="trackStatus">optional object trackStatus</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject, object body, object allAtOnce, object returnWhenDone, object trackStatus)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject, body, allAtOnce, returnWhenDone, trackStatus);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="to">optional object to</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="allAtOnce">optional object allAtOnce</param>
		/// <param name="returnWhenDone">optional object returnWhenDone</param>
		/// <param name="trackStatus">optional object trackStatus</param>
		/// <param name="clear">optional object clear</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailRoutingSlip(object to, object subject, object body, object allAtOnce, object returnWhenDone, object trackStatus, object clear)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(to, subject, body, allAtOnce, returnWhenDone, trackStatus, clear);
			object returnItem = Invoker.MethodReturn(_instance, "MailRoutingSlip", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="number">optional object number</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileLoadLast(object number)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(number);
			object returnItem = Invoker.MethodReturn(_instance, "FileLoadLast", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileLoadLast()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileLoadLast", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileExit(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileExit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileExit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileExit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBars()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MenuBars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="copy">optional object copy</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="newName">optional object newName</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarEdit(object copy, object create, object name, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(copy, create, name, newName);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarEdit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="copy">optional object copy</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarEdit(object copy)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(copy);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="copy">optional object copy</param>
		/// <param name="create">optional object create</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarEdit(object copy, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(copy, create);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="copy">optional object copy</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarEdit(object copy, object create, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(copy, create, name);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="_default">optional object default</param>
		/// <param name="noFiles">optional object noFiles</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarApply(string name, object _default, object noFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, _default, noFiles);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarApply(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="_default">optional object default</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MenuBarApply(string name, object _default)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, _default);
			object returnItem = Invoker.MethodReturn(_instance, "MenuBarApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditUndo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditUndo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCut()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditCut", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCopy()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="_object">object object</param>
		/// <param name="forPrinter">object forPrinter</param>
		/// <param name="selectedRows">object selectedRows</param>
		/// <param name="fromDate">object fromDate</param>
		/// <param name="toDate">object toDate</param>
		/// <param name="fileName">object fileName</param>
		/// <param name="scaleOption">optional NetOffice.MSProjectApi.Enums.PjCopyPictureScaleOption ScaleOption = 1</param>
		/// <param name="maxImageHeight">optional object maxImageHeight</param>
		/// <param name="maxImageWidth">optional object maxImageWidth</param>
		/// <param name="measurementUnits">optional object measurementUnits</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCopyPicture(object _object, object forPrinter, object selectedRows, object fromDate, object toDate, object fileName, object scaleOption, object maxImageHeight, object maxImageWidth, object measurementUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_object, forPrinter, selectedRows, fromDate, toDate, fileName, scaleOption, maxImageHeight, maxImageWidth, measurementUnits);
			object returnItem = Invoker.MethodReturn(_instance, "EditCopyPicture", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="_object">object object</param>
		/// <param name="forPrinter">object forPrinter</param>
		/// <param name="selectedRows">object selectedRows</param>
		/// <param name="fromDate">object fromDate</param>
		/// <param name="toDate">object toDate</param>
		/// <param name="fileName">object fileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCopyPicture(object _object, object forPrinter, object selectedRows, object fromDate, object toDate, object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_object, forPrinter, selectedRows, fromDate, toDate, fileName);
			object returnItem = Invoker.MethodReturn(_instance, "EditCopyPicture", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="_object">object object</param>
		/// <param name="forPrinter">object forPrinter</param>
		/// <param name="selectedRows">object selectedRows</param>
		/// <param name="fromDate">object fromDate</param>
		/// <param name="toDate">object toDate</param>
		/// <param name="fileName">object fileName</param>
		/// <param name="scaleOption">optional NetOffice.MSProjectApi.Enums.PjCopyPictureScaleOption ScaleOption = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCopyPicture(object _object, object forPrinter, object selectedRows, object fromDate, object toDate, object fileName, object scaleOption)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_object, forPrinter, selectedRows, fromDate, toDate, fileName, scaleOption);
			object returnItem = Invoker.MethodReturn(_instance, "EditCopyPicture", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="_object">object object</param>
		/// <param name="forPrinter">object forPrinter</param>
		/// <param name="selectedRows">object selectedRows</param>
		/// <param name="fromDate">object fromDate</param>
		/// <param name="toDate">object toDate</param>
		/// <param name="fileName">object fileName</param>
		/// <param name="scaleOption">optional NetOffice.MSProjectApi.Enums.PjCopyPictureScaleOption ScaleOption = 1</param>
		/// <param name="maxImageHeight">optional object maxImageHeight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCopyPicture(object _object, object forPrinter, object selectedRows, object fromDate, object toDate, object fileName, object scaleOption, object maxImageHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_object, forPrinter, selectedRows, fromDate, toDate, fileName, scaleOption, maxImageHeight);
			object returnItem = Invoker.MethodReturn(_instance, "EditCopyPicture", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="_object">object object</param>
		/// <param name="forPrinter">object forPrinter</param>
		/// <param name="selectedRows">object selectedRows</param>
		/// <param name="fromDate">object fromDate</param>
		/// <param name="toDate">object toDate</param>
		/// <param name="fileName">object fileName</param>
		/// <param name="scaleOption">optional NetOffice.MSProjectApi.Enums.PjCopyPictureScaleOption ScaleOption = 1</param>
		/// <param name="maxImageHeight">optional object maxImageHeight</param>
		/// <param name="maxImageWidth">optional object maxImageWidth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditCopyPicture(object _object, object forPrinter, object selectedRows, object fromDate, object toDate, object fileName, object scaleOption, object maxImageHeight, object maxImageWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_object, forPrinter, selectedRows, fromDate, toDate, fileName, scaleOption, maxImageHeight, maxImageWidth);
			object returnItem = Invoker.MethodReturn(_instance, "EditCopyPicture", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditPaste()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditPaste", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="link">optional object link</param>
		/// <param name="type">optional object type</param>
		/// <param name="displayAsIcon">optional object displayAsIcon</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditPasteSpecial(object link, object type, object displayAsIcon)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(link, type, displayAsIcon);
			object returnItem = Invoker.MethodReturn(_instance, "EditPasteSpecial", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditPasteSpecial()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditPasteSpecial", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="link">optional object link</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditPasteSpecial(object link)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(link);
			object returnItem = Invoker.MethodReturn(_instance, "EditPasteSpecial", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="link">optional object link</param>
		/// <param name="type">optional object type</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditPasteSpecial(object link, object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(link, type);
			object returnItem = Invoker.MethodReturn(_instance, "EditPasteSpecial", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClearFormats()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditClearFormats", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="contents">optional object contents</param>
		/// <param name="formats">optional object formats</param>
		/// <param name="notes">optional object notes</param>
		/// <param name="hyperlinks">optional object hyperlinks</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClear(object contents, object formats, object notes, object hyperlinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(contents, formats, notes, hyperlinks);
			object returnItem = Invoker.MethodReturn(_instance, "EditClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClear()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="contents">optional object contents</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClear(object contents)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(contents);
			object returnItem = Invoker.MethodReturn(_instance, "EditClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="contents">optional object contents</param>
		/// <param name="formats">optional object formats</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClear(object contents, object formats)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(contents, formats);
			object returnItem = Invoker.MethodReturn(_instance, "EditClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="contents">optional object contents</param>
		/// <param name="formats">optional object formats</param>
		/// <param name="notes">optional object notes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClear(object contents, object formats, object notes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(contents, formats, notes);
			object returnItem = Invoker.MethodReturn(_instance, "EditClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool RowClear()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RowClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DDEPasteLink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DDEPasteLink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditDelete()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnDelete()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ColumnDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool RowDelete()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RowDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="verb">optional object verb</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ObjectVerb(object verb)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(verb);
			object returnItem = Invoker.MethodReturn(_instance, "ObjectVerb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ObjectVerb()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ObjectVerb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ObjectLinks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ObjectLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ObjectChangeIcon()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ObjectChangeIcon", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ObjectConvert()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ObjectConvert", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditInsert()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditInsert", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnInsert()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ColumnInsert", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool RowInsert()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RowInsert", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="from">Int32 from</param>
		/// <param name="to">Int32 to</param>
		/// <param name="delete">optional object delete</param>
		/// <param name="type">optional object type</param>
		/// <param name="lag">optional object lag</param>
		/// <param name="predecessorProjectName">optional object predecessorProjectName</param>
		/// <param name="successorProjectName">optional object successorProjectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasksEdit(Int32 from, Int32 to, object delete, object type, object lag, object predecessorProjectName, object successorProjectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(from, to, delete, type, lag, predecessorProjectName, successorProjectName);
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasksEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="from">Int32 from</param>
		/// <param name="to">Int32 to</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasksEdit(Int32 from, Int32 to)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(from, to);
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasksEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="from">Int32 from</param>
		/// <param name="to">Int32 to</param>
		/// <param name="delete">optional object delete</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasksEdit(Int32 from, Int32 to, object delete)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(from, to, delete);
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasksEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="from">Int32 from</param>
		/// <param name="to">Int32 to</param>
		/// <param name="delete">optional object delete</param>
		/// <param name="type">optional object type</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasksEdit(Int32 from, Int32 to, object delete, object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(from, to, delete, type);
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasksEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="from">Int32 from</param>
		/// <param name="to">Int32 to</param>
		/// <param name="delete">optional object delete</param>
		/// <param name="type">optional object type</param>
		/// <param name="lag">optional object lag</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasksEdit(Int32 from, Int32 to, object delete, object type, object lag)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(from, to, delete, type, lag);
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasksEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="from">Int32 from</param>
		/// <param name="to">Int32 to</param>
		/// <param name="delete">optional object delete</param>
		/// <param name="type">optional object type</param>
		/// <param name="lag">optional object lag</param>
		/// <param name="predecessorProjectName">optional object predecessorProjectName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinkTasksEdit(Int32 from, Int32 to, object delete, object type, object lag, object predecessorProjectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(from, to, delete, type, lag, predecessorProjectName);
			object returnItem = Invoker.MethodReturn(_instance, "LinkTasksEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UnlinkTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "UnlinkTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="resources">object resources</param>
		/// <param name="operation">optional NetOffice.MSProjectApi.Enums.PjResAssignOperation Operation = 0</param>
		/// <param name="with">optional object with</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignment(object resources, object operation, object with)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(resources, operation, with);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="resources">object resources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignment(object resources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(resources);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="resources">object resources</param>
		/// <param name="operation">optional NetOffice.MSProjectApi.Enums.PjResAssignOperation Operation = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignment(object resources, object operation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(resources, operation);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="iD">optional object iD</param>
		/// <param name="date">optional object date</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditGoTo(object iD, object date)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(iD, date);
			object returnItem = Invoker.MethodReturn(_instance, "EditGoTo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditGoTo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditGoTo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="iD">optional object iD</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditGoTo(object iD)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(iD);
			object returnItem = Invoker.MethodReturn(_instance, "EditGoTo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GotoNextOverAllocation()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GotoNextOverAllocation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InsertNotes()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertNotes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="testID">optional object testID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field, object test, object value, object next, object matchCase, object fieldID, object testID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase, fieldID, testID);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field, object test)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field, object test, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field, object test, object value, object next)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field, object test, object value, object next, object matchCase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Find(object field, object test, object value, object next, object matchCase, object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase, fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "Find", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="testID">optional object testID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase, object fieldID, object testID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase, fieldID, testID);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value, object replacement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value, object replacement, object replaceAll)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value, object replacement, object replaceAll, object next)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Replace(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase, object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase, fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "Replace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ObjectInsert()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ObjectInsert", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="edition">object edition</param>
		/// <param name="format">optional NetOffice.MSProjectApi.Enums.PjSubscribeFormat Format = 1</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscribeTo(object edition, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(edition, format);
			object returnItem = Invoker.MethodReturn(_instance, "SubscribeTo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="edition">object edition</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscribeTo(object edition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(edition);
			object returnItem = Invoker.MethodReturn(_instance, "SubscribeTo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		/// <param name="field">optional object field</param>
		/// <param name="automatically">optional object automatically</param>
		/// <param name="action">optional object action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions(object name, object isTask, object uniqueID, object field, object automatically, object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, isTask, uniqueID, field, automatically, action);
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="isTask">optional object isTask</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions(object name, object isTask)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, isTask);
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions(object name, object isTask, object uniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, isTask, uniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		/// <param name="field">optional object field</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions(object name, object isTask, object uniqueID, object field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, isTask, uniqueID, field);
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		/// <param name="field">optional object field</param>
		/// <param name="automatically">optional object automatically</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SubscriberOptions(object name, object isTask, object uniqueID, object field, object automatically)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, isTask, uniqueID, field, automatically);
			object returnItem = Invoker.MethodReturn(_instance, "SubscriberOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="edition">optional object edition</param>
		/// <param name="contains">optional object contains</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreatePublisher(object edition, object contains)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(edition, contains);
			object returnItem = Invoker.MethodReturn(_instance, "CreatePublisher", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreatePublisher()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CreatePublisher", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="edition">optional object edition</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreatePublisher(object edition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(edition);
			object returnItem = Invoker.MethodReturn(_instance, "CreatePublisher", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="view">optional object view</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		/// <param name="field">optional object field</param>
		/// <param name="onSave">optional object onSave</param>
		/// <param name="action">optional object action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name, object view, object isTask, object uniqueID, object field, object onSave, object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, view, isTask, uniqueID, field, onSave, action);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="view">optional object view</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name, object view)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, view);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="view">optional object view</param>
		/// <param name="isTask">optional object isTask</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name, object view, object isTask)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, view, isTask);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="view">optional object view</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name, object view, object isTask, object uniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, view, isTask, uniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="view">optional object view</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		/// <param name="field">optional object field</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name, object view, object isTask, object uniqueID, object field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, view, isTask, uniqueID, field);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="view">optional object view</param>
		/// <param name="isTask">optional object isTask</param>
		/// <param name="uniqueID">optional object uniqueID</param>
		/// <param name="field">optional object field</param>
		/// <param name="onSave">optional object onSave</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PublisherOptions(object name, object view, object isTask, object uniqueID, object field, object onSave)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, view, isTask, uniqueID, field, onSave);
			object returnItem = Invoker.MethodReturn(_instance, "PublisherOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="stop">optional object stop</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditionStopAll(object stop)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(stop);
			object returnItem = Invoker.MethodReturn(_instance, "EditionStopAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditionStopAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditionStopAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ClipboardShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ClipboardShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="singlePane">optional object singlePane</param>
		/// <param name="toggle">optional object toggle</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewApply(object name, object singlePane, object toggle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, singlePane, toggle);
			object returnItem = Invoker.MethodReturn(_instance, "ViewApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewApply()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewApply(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ViewApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="singlePane">optional object singlePane</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewApply(object name, object singlePane)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, singlePane);
			object returnItem = Invoker.MethodReturn(_instance, "ViewApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="screen">optional object screen</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="highlightFilter">optional object highlightFilter</param>
		/// <param name="table">optional object table</param>
		/// <param name="filter">optional object filter</param>
		/// <param name="group">optional object group</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName, object screen, object showInMenu, object highlightFilter, object table, object filter, object group)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, screen, showInMenu, highlightFilter, table, filter, group);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="screen">optional object screen</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName, object screen)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, screen);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="screen">optional object screen</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName, object screen, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, screen, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="screen">optional object screen</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="highlightFilter">optional object highlightFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName, object screen, object showInMenu, object highlightFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, screen, showInMenu, highlightFilter);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="screen">optional object screen</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="highlightFilter">optional object highlightFilter</param>
		/// <param name="table">optional object table</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName, object screen, object showInMenu, object highlightFilter, object table)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, screen, showInMenu, highlightFilter, table);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="screen">optional object screen</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="highlightFilter">optional object highlightFilter</param>
		/// <param name="table">optional object table</param>
		/// <param name="filter">optional object filter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditSingle(object name, object create, object newName, object screen, object showInMenu, object highlightFilter, object table, object filter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, screen, showInMenu, highlightFilter, table, filter);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditSingle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="topView">optional object topView</param>
		/// <param name="bottomView">optional object bottomView</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination(object name, object create, object newName, object topView, object bottomView, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, topView, bottomView, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination(object name, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination(object name, object create, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="topView">optional object topView</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination(object name, object create, object newName, object topView)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, topView);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="topView">optional object topView</param>
		/// <param name="bottomView">optional object bottomView</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewEditCombination(object name, object create, object newName, object topView, object bottomView)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, newName, topView, bottomView);
			object returnItem = Invoker.MethodReturn(_instance, "ViewEditCombination", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableApply(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "TableApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableApply()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TableApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		/// <param name="headerAutoRowHeightAdjustment">optional object headerAutoRowHeightAdjustment</param>
		/// <param name="headerTextWrap">optional object headerTextWrap</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle, object headerAutoRowHeightAdjustment, object headerTextWrap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle, headerAutoRowHeightAdjustment, headerTextWrap);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		/// <param name="headerAutoRowHeightAdjustment">optional object headerAutoRowHeightAdjustment</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TableEdit(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle, object headerAutoRowHeightAdjustment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle, headerAutoRowHeightAdjustment);
			object returnItem = Invoker.MethodReturn(_instance, "TableEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="highlight">optional object highlight</param>
		/// <param name="value1">optional object value1</param>
		/// <param name="value2">optional object value2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterApply(object name, object highlight, object value1, object value2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, highlight, value1, value2);
			object returnItem = Invoker.MethodReturn(_instance, "FilterApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterApply()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilterApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterApply(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilterApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="highlight">optional object highlight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterApply(object name, object highlight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, highlight);
			object returnItem = Invoker.MethodReturn(_instance, "FilterApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="highlight">optional object highlight</param>
		/// <param name="value1">optional object value1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterApply(object name, object highlight, object value1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, highlight, value1);
			object returnItem = Invoker.MethodReturn(_instance, "FilterApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="operation">optional object operation</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="showSummaryTasks">optional object showSummaryTasks</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName, object newFieldName, object test, object value, object operation, object showInMenu, object showSummaryTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName, newFieldName, test, value, operation, showInMenu, showSummaryTasks);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName, object newFieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName, newFieldName);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="test">optional object test</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName, object newFieldName, object test)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName, newFieldName, test);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName, object newFieldName, object test, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName, newFieldName, test, value);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="operation">optional object operation</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName, object newFieldName, object test, object value, object operation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName, newFieldName, test, value, operation);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskFilter">bool taskFilter</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="parenthesis">optional object parenthesis</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="operation">optional object operation</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FilterEdit(string name, bool taskFilter, object create, object overwriteExisting, object parenthesis, object newName, object fieldName, object newFieldName, object test, object value, object operation, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskFilter, create, overwriteExisting, parenthesis, newName, fieldName, newFieldName, test, value, operation, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "FilterEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		/// <param name="scheduleFrom">optional object scheduleFrom</param>
		/// <param name="currentDate">optional object currentDate</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="statusDate">optional object statusDate</param>
		/// <param name="priority">optional object priority</param>
		/// <param name="partiallyDisabled">optional object partiallyDisabled</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish, object scheduleFrom, object currentDate, object calendar, object statusDate, object priority, object partiallyDisabled)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish, scheduleFrom, currentDate, calendar, statusDate, priority, partiallyDisabled);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		/// <param name="scheduleFrom">optional object scheduleFrom</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish, object scheduleFrom)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish, scheduleFrom);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		/// <param name="scheduleFrom">optional object scheduleFrom</param>
		/// <param name="currentDate">optional object currentDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish, object scheduleFrom, object currentDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish, scheduleFrom, currentDate);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		/// <param name="scheduleFrom">optional object scheduleFrom</param>
		/// <param name="currentDate">optional object currentDate</param>
		/// <param name="calendar">optional object calendar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish, object scheduleFrom, object currentDate, object calendar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish, scheduleFrom, currentDate, calendar);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		/// <param name="scheduleFrom">optional object scheduleFrom</param>
		/// <param name="currentDate">optional object currentDate</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="statusDate">optional object statusDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish, object scheduleFrom, object currentDate, object calendar, object statusDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish, scheduleFrom, currentDate, calendar, statusDate);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		/// <param name="title">optional object title</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="author">optional object author</param>
		/// <param name="company">optional object company</param>
		/// <param name="manager">optional object manager</param>
		/// <param name="keywords">optional object keywords</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="start">optional object start</param>
		/// <param name="finish">optional object finish</param>
		/// <param name="scheduleFrom">optional object scheduleFrom</param>
		/// <param name="currentDate">optional object currentDate</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="statusDate">optional object statusDate</param>
		/// <param name="priority">optional object priority</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectSummaryInfo(object project, object title, object subject, object author, object company, object manager, object keywords, object comments, object start, object finish, object scheduleFrom, object currentDate, object calendar, object statusDate, object priority)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project, title, subject, author, company, manager, keywords, comments, start, finish, scheduleFrom, currentDate, calendar, statusDate, priority);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectSummaryInfo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="project">optional object project</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectStatistics(object project)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(project);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectStatistics", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProjectStatistics()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ProjectStatistics", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		/// <param name="hoursPerDay">optional object hoursPerDay</param>
		/// <param name="hoursPerWeek">optional object hoursPerWeek</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="startWeekOn">optional object startWeekOn</param>
		/// <param name="useFYStartYear">optional object useFYStartYear</param>
		/// <param name="daysPerMonth">optional object daysPerMonth</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime, object hoursPerDay, object hoursPerWeek, object setDefaults, object startWeekOn, object useFYStartYear, object daysPerMonth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime, hoursPerDay, hoursPerWeek, setDefaults, startWeekOn, useFYStartYear, daysPerMonth);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		/// <param name="hoursPerDay">optional object hoursPerDay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime, object hoursPerDay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime, hoursPerDay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		/// <param name="hoursPerDay">optional object hoursPerDay</param>
		/// <param name="hoursPerWeek">optional object hoursPerWeek</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime, object hoursPerDay, object hoursPerWeek)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime, hoursPerDay, hoursPerWeek);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		/// <param name="hoursPerDay">optional object hoursPerDay</param>
		/// <param name="hoursPerWeek">optional object hoursPerWeek</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime, object hoursPerDay, object hoursPerWeek, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime, hoursPerDay, hoursPerWeek, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		/// <param name="hoursPerDay">optional object hoursPerDay</param>
		/// <param name="hoursPerWeek">optional object hoursPerWeek</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="startWeekOn">optional object startWeekOn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime, object hoursPerDay, object hoursPerWeek, object setDefaults, object startWeekOn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime, hoursPerDay, hoursPerWeek, setDefaults, startWeekOn);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="startWeekOnMonday">optional object startWeekOnMonday</param>
		/// <param name="startYearIn">optional object startYearIn</param>
		/// <param name="startTime">optional object startTime</param>
		/// <param name="finishTime">optional object finishTime</param>
		/// <param name="hoursPerDay">optional object hoursPerDay</param>
		/// <param name="hoursPerWeek">optional object hoursPerWeek</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="startWeekOn">optional object startWeekOn</param>
		/// <param name="useFYStartYear">optional object useFYStartYear</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalendar(object startWeekOnMonday, object startYearIn, object startTime, object finishTime, object hoursPerDay, object hoursPerWeek, object setDefaults, object startWeekOn, object useFYStartYear)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startWeekOnMonday, startYearIn, startTime, finishTime, hoursPerDay, hoursPerWeek, setDefaults, startWeekOn, useFYStartYear);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaultsHyperlink">optional object setDefaultsHyperlink</param>
		/// <param name="inCellEditing">optional object inCellEditing</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaultsHyperlink, object inCellEditing)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaultsHyperlink, inCellEditing);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaultsHyperlink">optional object setDefaultsHyperlink</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsEdit(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaultsHyperlink)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaultsHyperlink);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		/// <param name="fontConversion">optional object fontConversion</param>
		/// <param name="showStartupWorkpane">optional object showStartupWorkpane</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum, object fontConversion, object showStartupWorkpane)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum, fontConversion, showStartupWorkpane);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		/// <param name="fontConversion">optional object fontConversion</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneral(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum, object fontConversion)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum, fontConversion);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneral", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="assignmentUnits">optional object assignmentUnits</param>
		/// <param name="effortDriven">optional object effortDriven</param>
		/// <param name="honorConstraints">optional object honorConstraints</param>
		/// <param name="showEstimated">optional object showEstimated</param>
		/// <param name="newTasksEstimated">optional object newTasksEstimated</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack, object setDefaults, object assignmentUnits, object effortDriven, object honorConstraints, object showEstimated, object newTasksEstimated)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack, setDefaults, assignmentUnits, effortDriven, honorConstraints, showEstimated, newTasksEstimated);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="assignmentUnits">optional object assignmentUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack, object setDefaults, object assignmentUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack, setDefaults, assignmentUnits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="assignmentUnits">optional object assignmentUnits</param>
		/// <param name="effortDriven">optional object effortDriven</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack, object setDefaults, object assignmentUnits, object effortDriven)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack, setDefaults, assignmentUnits, effortDriven);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="assignmentUnits">optional object assignmentUnits</param>
		/// <param name="effortDriven">optional object effortDriven</param>
		/// <param name="honorConstraints">optional object honorConstraints</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack, object setDefaults, object assignmentUnits, object effortDriven, object honorConstraints)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack, setDefaults, assignmentUnits, effortDriven, honorConstraints);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="scheduleMessages">optional object scheduleMessages</param>
		/// <param name="startOnCurrentDate">optional object startOnCurrentDate</param>
		/// <param name="autoLink">optional object autoLink</param>
		/// <param name="autoSplit">optional object autoSplit</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="taskType">optional object taskType</param>
		/// <param name="durationUnits">optional object durationUnits</param>
		/// <param name="workUnits">optional object workUnits</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="assignmentUnits">optional object assignmentUnits</param>
		/// <param name="effortDriven">optional object effortDriven</param>
		/// <param name="honorConstraints">optional object honorConstraints</param>
		/// <param name="showEstimated">optional object showEstimated</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSchedule(object scheduleMessages, object startOnCurrentDate, object autoLink, object autoSplit, object criticalSlack, object taskType, object durationUnits, object workUnits, object autoTrack, object setDefaults, object assignmentUnits, object effortDriven, object honorConstraints, object showEstimated)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(scheduleMessages, startOnCurrentDate, autoLink, autoSplit, criticalSlack, taskType, durationUnits, workUnits, autoTrack, setDefaults, assignmentUnits, effortDriven, honorConstraints, showEstimated);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		/// <param name="displayWindowsInTaskbar">optional object displayWindowsInTaskbar</param>
		/// <param name="displayScreentips">optional object displayScreentips</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData, object displayWindowsInTaskbar, object displayScreentips)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData, displayWindowsInTaskbar, displayScreentips);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		/// <param name="displayWindowsInTaskbar">optional object displayWindowsInTaskbar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsView(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData, object displayWindowsInTaskbar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData, displayWindowsInTaskbar);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		/// <param name="publishInformationOnSave">optional object publishInformationOnSave</param>
		/// <param name="setDefaultsMessaging">optional object setDefaultsMessaging</param>
		/// <param name="setDefaultsWebServer">optional object setDefaultsWebServer</param>
		/// <param name="managerEmail">optional object managerEmail</param>
		/// <param name="confirmationDialog">optional object confirmationDialog</param>
		/// <param name="changesMarkAssnDirty">optional object changesMarkAssnDirty</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb, object publishInformationOnSave, object setDefaultsMessaging, object setDefaultsWebServer, object managerEmail, object confirmationDialog, object changesMarkAssnDirty)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb, publishInformationOnSave, setDefaultsMessaging, setDefaultsWebServer, managerEmail, confirmationDialog, changesMarkAssnDirty);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		/// <param name="publishInformationOnSave">optional object publishInformationOnSave</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb, object publishInformationOnSave)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb, publishInformationOnSave);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		/// <param name="publishInformationOnSave">optional object publishInformationOnSave</param>
		/// <param name="setDefaultsMessaging">optional object setDefaultsMessaging</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb, object publishInformationOnSave, object setDefaultsMessaging)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb, publishInformationOnSave, setDefaultsMessaging);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		/// <param name="publishInformationOnSave">optional object publishInformationOnSave</param>
		/// <param name="setDefaultsMessaging">optional object setDefaultsMessaging</param>
		/// <param name="setDefaultsWebServer">optional object setDefaultsWebServer</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb, object publishInformationOnSave, object setDefaultsMessaging, object setDefaultsWebServer)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb, publishInformationOnSave, setDefaultsMessaging, setDefaultsWebServer);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		/// <param name="publishInformationOnSave">optional object publishInformationOnSave</param>
		/// <param name="setDefaultsMessaging">optional object setDefaultsMessaging</param>
		/// <param name="setDefaultsWebServer">optional object setDefaultsWebServer</param>
		/// <param name="managerEmail">optional object managerEmail</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb, object publishInformationOnSave, object setDefaultsMessaging, object setDefaultsWebServer, object managerEmail)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb, publishInformationOnSave, setDefaultsMessaging, setDefaultsWebServer, managerEmail);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="workgroupMessages">optional object workgroupMessages</param>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="serverPath">optional object serverPath</param>
		/// <param name="receiveNotifications">optional object receiveNotifications</param>
		/// <param name="sendHyperlinkNote">optional object sendHyperlinkNote</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="serverIdentification">optional object serverIdentification</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		/// <param name="updateProjectToWeb">optional object updateProjectToWeb</param>
		/// <param name="publishInformationOnSave">optional object publishInformationOnSave</param>
		/// <param name="setDefaultsMessaging">optional object setDefaultsMessaging</param>
		/// <param name="setDefaultsWebServer">optional object setDefaultsWebServer</param>
		/// <param name="managerEmail">optional object managerEmail</param>
		/// <param name="confirmationDialog">optional object confirmationDialog</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsWorkgroup(object workgroupMessages, object serverURL, object serverPath, object receiveNotifications, object sendHyperlinkNote, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaults, object serverIdentification, object allowTaskDelegation, object updateProjectToWeb, object publishInformationOnSave, object setDefaultsMessaging, object setDefaultsWebServer, object managerEmail, object confirmationDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(workgroupMessages, serverURL, serverPath, receiveNotifications, sendHyperlinkNote, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaults, serverIdentification, allowTaskDelegation, updateProjectToWeb, publishInformationOnSave, setDefaultsMessaging, setDefaultsWebServer, managerEmail, confirmationDialog);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsWorkgroup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		/// <param name="andMoveRemaining">optional object andMoveRemaining</param>
		/// <param name="moveRemaining">optional object moveRemaining</param>
		/// <param name="andMoveCompleted">optional object andMoveCompleted</param>
		/// <param name="eVMethod">optional object eVMethod</param>
		/// <param name="eVBaseline">optional object eVBaseline</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask, object moveCompleted, object andMoveRemaining, object moveRemaining, object andMoveCompleted, object eVMethod, object eVBaseline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask, moveCompleted, andMoveRemaining, moveRemaining, andMoveCompleted, eVMethod, eVBaseline);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask, object moveCompleted)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask, moveCompleted);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		/// <param name="andMoveRemaining">optional object andMoveRemaining</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask, object moveCompleted, object andMoveRemaining)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask, moveCompleted, andMoveRemaining);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		/// <param name="andMoveRemaining">optional object andMoveRemaining</param>
		/// <param name="moveRemaining">optional object moveRemaining</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask, object moveCompleted, object andMoveRemaining, object moveRemaining)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask, moveCompleted, andMoveRemaining, moveRemaining);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		/// <param name="andMoveRemaining">optional object andMoveRemaining</param>
		/// <param name="moveRemaining">optional object moveRemaining</param>
		/// <param name="andMoveCompleted">optional object andMoveCompleted</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask, object moveCompleted, object andMoveRemaining, object moveRemaining, object andMoveCompleted)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask, moveCompleted, andMoveRemaining, moveRemaining, andMoveCompleted);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="autoTrack">optional object autoTrack</param>
		/// <param name="spreadPercentToStatusDate">optional object spreadPercentToStatusDate</param>
		/// <param name="spreadCostsToStatusDate">optional object spreadCostsToStatusDate</param>
		/// <param name="autoCalcCosts">optional object autoCalcCosts</param>
		/// <param name="fixedCostAccrual">optional object fixedCostAccrual</param>
		/// <param name="calcMultipleCriticalPaths">optional object calcMultipleCriticalPaths</param>
		/// <param name="criticalSlack">optional object criticalSlack</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="calcInsProjLikeSummTask">optional object calcInsProjLikeSummTask</param>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		/// <param name="andMoveRemaining">optional object andMoveRemaining</param>
		/// <param name="moveRemaining">optional object moveRemaining</param>
		/// <param name="andMoveCompleted">optional object andMoveCompleted</param>
		/// <param name="eVMethod">optional object eVMethod</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsCalculation(object automatic, object autoTrack, object spreadPercentToStatusDate, object spreadCostsToStatusDate, object autoCalcCosts, object fixedCostAccrual, object calcMultipleCriticalPaths, object criticalSlack, object setDefaults, object calcInsProjLikeSummTask, object moveCompleted, object andMoveRemaining, object moveRemaining, object andMoveCompleted, object eVMethod)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, autoTrack, spreadPercentToStatusDate, spreadCostsToStatusDate, autoCalcCosts, fixedCostAccrual, calcMultipleCriticalPaths, criticalSlack, setDefaults, calcInsProjLikeSummTask, moveCompleted, andMoveRemaining, moveRemaining, andMoveCompleted, eVMethod);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsCalculation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalculateAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalculateAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsPreferences()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsPreferences", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="calendarName">optional object calendarName</param>
		/// <param name="locked">optional object locked</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTime(object calendarName, object locked)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(calendarName, locked);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTime", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTime()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTime", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="calendarName">optional object calendarName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTime(object calendarName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(calendarName);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTime", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="index">optional object index</param>
		/// <param name="locked">optional object locked</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendars(object index, object locked)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(index, locked);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendars()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="index">optional object index</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendars(object index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(index);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="fromName">optional object fromName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarCreate(string name, object fromName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, fromName);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarCreate(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fromName">string fromName</param>
		/// <param name="toName">string toName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarRename(string fromName, string toName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fromName, toName);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarRename", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarDelete(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from4">optional object from4</param>
		/// <param name="to4">optional object to4</param>
		/// <param name="from5">optional object from5</param>
		/// <param name="to5">optional object to5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3, object to3, object _default, object from4, object to4, object from5, object to5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3, to3, _default, from4, to4, from5, to5);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3, object to3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3, to3);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="_default">optional object default</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3, object to3, object _default)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3, to3, _default);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from4">optional object from4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3, object to3, object _default, object from4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3, to3, _default, from4);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from4">optional object from4</param>
		/// <param name="to4">optional object to4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3, object to3, object _default, object from4, object to4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3, to3, _default, from4, to4);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from4">optional object from4</param>
		/// <param name="to4">optional object to4</param>
		/// <param name="from5">optional object from5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarEditDays(string name, object startDate, object endDate, object weekDay, object working, object from1, object to1, object from2, object to2, object from3, object to3, object _default, object from4, object to4, object from5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, startDate, endDate, weekDay, working, from1, to1, from2, to2, from3, to3, _default, from4, to4, from5);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="from4">optional object from4</param>
		/// <param name="to4">optional object to4</param>
		/// <param name="from5">optional object from5</param>
		/// <param name="to5">optional object to5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2, object from3, object to3, object from4, object to4, object from5, object to5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2, from3, to3, from4, to4, from5, to5);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2, object from3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2, from3);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2, object from3, object to3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2, from3, to3);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="from4">optional object from4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2, object from3, object to3, object from4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2, from3, to3, from4);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="from4">optional object from4</param>
		/// <param name="to4">optional object to4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2, object from3, object to3, object from4, object to4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2, from3, to3, from4, to4);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		/// <param name="weekDay">optional object weekDay</param>
		/// <param name="working">optional object working</param>
		/// <param name="_default">optional object default</param>
		/// <param name="from1">optional object from1</param>
		/// <param name="to1">optional object to1</param>
		/// <param name="from2">optional object from2</param>
		/// <param name="to2">optional object to2</param>
		/// <param name="from3">optional object from3</param>
		/// <param name="to3">optional object to3</param>
		/// <param name="from4">optional object from4</param>
		/// <param name="to4">optional object to4</param>
		/// <param name="from5">optional object from5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarEditDays(string projectName, string resourceName, object startDate, object endDate, object weekDay, object working, object _default, object from1, object to1, object from2, object to2, object from3, object to3, object from4, object to4, object from5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, startDate, endDate, weekDay, working, _default, from1, to1, from2, to2, from3, to3, from4, to4, from5);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarEditDays", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaseCalendarReset(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "BaseCalendarReset", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		/// <param name="baseCalendar">optional object baseCalendar</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarReset(string projectName, string resourceName, object baseCalendar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName, baseCalendar);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarReset", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">string projectName</param>
		/// <param name="resourceName">string resourceName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendarReset(string projectName, string resourceName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, resourceName);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendarReset", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="index">optional object index</param>
		/// <param name="locked">optional object locked</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendars(object index, object locked)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(index, locked);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendars()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="index">optional object index</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceCalendars(object index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(index);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceCalendars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		/// <param name="levelingCanSplit">optional object levelingCanSplit</param>
		/// <param name="levelProposedBookings">optional object levelProposedBookings</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments, object levelingCanSplit, object levelProposedBookings)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments, levelingCanSplit, levelProposedBookings);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		/// <param name="levelingCanSplit">optional object levelingCanSplit</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingOptions(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments, object levelingCanSplit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments, levelingCanSplit);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelNow(object all)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all);
			object returnItem = Invoker.MethodReturn(_instance, "LevelNow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelNow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LevelNow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="copy">optional object copy</param>
		/// <param name="into">optional object into</param>
		/// <param name="rollupToSummaryTasks">optional object rollupToSummaryTasks</param>
		/// <param name="rollupFromSubtasks">optional object rollupFromSubtasks</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave(object all, object copy, object into, object rollupToSummaryTasks, object rollupFromSubtasks, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, copy, into, rollupToSummaryTasks, rollupFromSubtasks, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave(object all)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="copy">optional object copy</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave(object all, object copy)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, copy);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="copy">optional object copy</param>
		/// <param name="into">optional object into</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave(object all, object copy, object into)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, copy, into);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="copy">optional object copy</param>
		/// <param name="into">optional object into</param>
		/// <param name="rollupToSummaryTasks">optional object rollupToSummaryTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave(object all, object copy, object into, object rollupToSummaryTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, copy, into, rollupToSummaryTasks);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="copy">optional object copy</param>
		/// <param name="into">optional object into</param>
		/// <param name="rollupToSummaryTasks">optional object rollupToSummaryTasks</param>
		/// <param name="rollupFromSubtasks">optional object rollupFromSubtasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineSave(object all, object copy, object into, object rollupToSummaryTasks, object rollupFromSubtasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, copy, into, rollupToSummaryTasks, rollupFromSubtasks);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="updateDate">optional object updateDate</param>
		/// <param name="action">optional object action</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProject(object all, object updateDate, object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, updateDate, action);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProject()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProject(object all)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="updateDate">optional object updateDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProject(object all, object updateDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, updateDate);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percentComplete">optional object percentComplete</param>
		/// <param name="actualDuration">optional object actualDuration</param>
		/// <param name="remainingDuration">optional object remainingDuration</param>
		/// <param name="actualStart">optional object actualStart</param>
		/// <param name="actualFinish">optional object actualFinish</param>
		/// <param name="notes">optional object notes</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks(object percentComplete, object actualDuration, object remainingDuration, object actualStart, object actualFinish, object notes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percentComplete, actualDuration, remainingDuration, actualStart, actualFinish, notes);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percentComplete">optional object percentComplete</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks(object percentComplete)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percentComplete);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percentComplete">optional object percentComplete</param>
		/// <param name="actualDuration">optional object actualDuration</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks(object percentComplete, object actualDuration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percentComplete, actualDuration);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percentComplete">optional object percentComplete</param>
		/// <param name="actualDuration">optional object actualDuration</param>
		/// <param name="remainingDuration">optional object remainingDuration</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks(object percentComplete, object actualDuration, object remainingDuration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percentComplete, actualDuration, remainingDuration);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percentComplete">optional object percentComplete</param>
		/// <param name="actualDuration">optional object actualDuration</param>
		/// <param name="remainingDuration">optional object remainingDuration</param>
		/// <param name="actualStart">optional object actualStart</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks(object percentComplete, object actualDuration, object remainingDuration, object actualStart)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percentComplete, actualDuration, remainingDuration, actualStart);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="percentComplete">optional object percentComplete</param>
		/// <param name="actualDuration">optional object actualDuration</param>
		/// <param name="remainingDuration">optional object remainingDuration</param>
		/// <param name="actualStart">optional object actualStart</param>
		/// <param name="actualFinish">optional object actualFinish</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateTasks(object percentComplete, object actualDuration, object remainingDuration, object actualStart, object actualFinish)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percentComplete, actualDuration, remainingDuration, actualStart, actualFinish);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projects">optional object projects</param>
		/// <param name="view">optional object view</param>
		/// <param name="allProjects">optional object allProjects</param>
		/// <param name="showDialog">optional object showDialog</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNewWindow(object projects, object view, object allProjects, object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projects, view, allProjects, showDialog);
			object returnItem = Invoker.MethodReturn(_instance, "WindowNewWindow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNewWindow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowNewWindow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projects">optional object projects</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNewWindow(object projects)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projects);
			object returnItem = Invoker.MethodReturn(_instance, "WindowNewWindow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projects">optional object projects</param>
		/// <param name="view">optional object view</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNewWindow(object projects, object view)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projects, view);
			object returnItem = Invoker.MethodReturn(_instance, "WindowNewWindow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projects">optional object projects</param>
		/// <param name="view">optional object view</param>
		/// <param name="allProjects">optional object allProjects</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNewWindow(object projects, object view, object allProjects)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projects, view, allProjects);
			object returnItem = Invoker.MethodReturn(_instance, "WindowNewWindow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowArrangeAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowArrangeAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowHide(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "WindowHide", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowHide()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowHide", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowUnhide(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "WindowUnhide", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowUnhide()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowUnhide", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="windowName">optional object windowName</param>
		/// <param name="dialogID">optional object dialogID</param>
		/// <param name="topPane">optional object topPane</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowActivate(object windowName, object dialogID, object topPane)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(windowName, dialogID, topPane);
			object returnItem = Invoker.MethodReturn(_instance, "WindowActivate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowActivate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowActivate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="windowName">optional object windowName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowActivate(object windowName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(windowName);
			object returnItem = Invoker.MethodReturn(_instance, "WindowActivate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="windowName">optional object windowName</param>
		/// <param name="dialogID">optional object dialogID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowActivate(object windowName, object dialogID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(windowName, dialogID);
			object returnItem = Invoker.MethodReturn(_instance, "WindowActivate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PageBreakSet()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PageBreakSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PageBreakRemove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PageBreakRemove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PageBreaksRemoveAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PageBreaksRemoveAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowResourcesPredecessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowResourcesPredecessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowResourcesSuccessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowResourcesSuccessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowPredecessorsSuccessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowPredecessorsSuccessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowNotes()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowNotes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowObjects()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowObjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowOverallocation()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowOverallocation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowPercentAllocation()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowPercentAllocation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowWork()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowWork", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowCost()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowCost", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowSchedule()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowSchedule", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowPeakUnits()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowPeakUnits", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowAvailability()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowAvailability", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowRemainingAvailability()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowRemainingAvailability", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowCumulativeWork()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowCumulativeWork", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowCumulativeCost()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowCumulativeCost", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PaneNext()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PaneNext", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PaneCreate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PaneCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FormViewShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FormViewShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PaneClose()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PaneClose", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowSplit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowSplit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="noWrap">optional object noWrap</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNext(object noWrap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(noWrap);
			object returnItem = Invoker.MethodReturn(_instance, "WindowNext", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowNext()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowNext", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="noWrap">optional object noWrap</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowPrev(object noWrap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(noWrap);
			object returnItem = Invoker.MethodReturn(_instance, "WindowPrev", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowPrev()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowPrev", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocClose()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DocClose", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppMaximize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AppMaximize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppMinimize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AppMinimize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		/// <param name="points">optional object points</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppMove(object xPosition, object yPosition, object points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xPosition, yPosition, points);
			object returnItem = Invoker.MethodReturn(_instance, "AppMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppMove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AppMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="xPosition">optional object xPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppMove(object xPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xPosition);
			object returnItem = Invoker.MethodReturn(_instance, "AppMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppMove(object xPosition, object yPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xPosition, yPosition);
			object returnItem = Invoker.MethodReturn(_instance, "AppMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppRestore()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AppRestore", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="points">optional object points</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppSize(object width, object height, object points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(width, height, points);
			object returnItem = Invoker.MethodReturn(_instance, "AppSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppSize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AppSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppSize(object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(width);
			object returnItem = Invoker.MethodReturn(_instance, "AppSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppSize(object width, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(width, height);
			object returnItem = Invoker.MethodReturn(_instance, "AppSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocMaximize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DocMaximize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		/// <param name="points">optional object points</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocMove(object xPosition, object yPosition, object points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xPosition, yPosition, points);
			object returnItem = Invoker.MethodReturn(_instance, "DocMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocMove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DocMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="xPosition">optional object xPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocMove(object xPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xPosition);
			object returnItem = Invoker.MethodReturn(_instance, "DocMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocMove(object xPosition, object yPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xPosition, yPosition);
			object returnItem = Invoker.MethodReturn(_instance, "DocMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocRestore()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DocRestore", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="points">optional object points</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocSize(object width, object height, object points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(width, height, points);
			object returnItem = Invoker.MethodReturn(_instance, "DocSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocSize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DocSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocSize(object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(width);
			object returnItem = Invoker.MethodReturn(_instance, "DocSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocSize(object width, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(width, height);
			object returnItem = Invoker.MethodReturn(_instance, "DocSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="levels">optional object levels</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineOutdent(object levels)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(levels);
			object returnItem = Invoker.MethodReturn(_instance, "OutlineOutdent", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineOutdent()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineOutdent", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="outlineNumber">optional NetOffice.MSProjectApi.Enums.PJTaskOutlineShowLevel OutlineNumber = 65535</param>
		/// <param name="expandInsertedProjects">optional object expandInsertedProjects</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineShowTasks(object outlineNumber, object expandInsertedProjects)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(outlineNumber, expandInsertedProjects);
			object returnItem = Invoker.MethodReturn(_instance, "OutlineShowTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineShowTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineShowTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="outlineNumber">optional NetOffice.MSProjectApi.Enums.PJTaskOutlineShowLevel OutlineNumber = 65535</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineShowTasks(object outlineNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(outlineNumber);
			object returnItem = Invoker.MethodReturn(_instance, "OutlineShowTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="levels">optional object levels</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineIndent(object levels)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(levels);
			object returnItem = Invoker.MethodReturn(_instance, "OutlineIndent", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineIndent()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineIndent", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineHideSubTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineHideSubTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineShowSubTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineShowSubTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineShowAllTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineShowAllTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectBeginning(object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectBeginning", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectBeginning()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectBeginning", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectEnd(object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectEnd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectEnd()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectEnd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRowStart(object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRowStart", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRowStart()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectRowStart", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRowEnd(object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRowEnd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRowEnd()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectRowEnd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellLeft(object numCells, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellLeft", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellLeft()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellLeft", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellLeft(object numCells)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellLeft", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellRight(object numCells, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellRight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellRight()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellRight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellRight(object numCells)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellRight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellUp(object numCells, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellUp", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellUp()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellUp", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellUp(object numCells)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellUp", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		/// <param name="extend">optional object extend</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellDown(object numCells, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellDown", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellDown()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellDown", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numCells">optional object numCells</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCellDown(object numCells)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numCells);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCellDown", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectionExtend(object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectionExtend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectionExtend()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectionExtend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectionExtend(object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectionExtend", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnBestFit(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "ColumnBestFit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnBestFit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ColumnBestFit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnEdit(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "ColumnEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnEdit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ColumnEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">Int16 column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRange(Int32 row, Int16 column, object rowRelative, object width, object height, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">Int16 column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRange(Int32 row, Int16 column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">Int16 column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRange(Int32 row, Int16 column, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">Int16 column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRange(Int32 row, Int16 column, object rowRelative, object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">Int16 column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRange(Int32 row, Int16 column, object rowRelative, object width, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">Int16 column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRange(Int32 row, Int16 column, object rowRelative, object width, object height, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="startTime">string startTime</param>
		/// <param name="width">Int16 width</param>
		/// <param name="height">Int32 height</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTimescaleRange(Int32 row, string startTime, Int16 width, Int32 height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, startTime, width, height);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTimescaleRange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskField(Int32 row, string column, object rowRelative, object width, object height, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskField(Int32 row, string column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskField(Int32 row, string column, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskField(Int32 row, string column, object rowRelative, object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskField(Int32 row, string column, object rowRelative, object width, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskField(Int32 row, string column, object rowRelative, object width, object height, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceField(Int32 row, string column, object rowRelative, object width, object height, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceField(Int32 row, string column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceField(Int32 row, string column, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceField(Int32 row, string column, object rowRelative, object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceField(Int32 row, string column, object rowRelative, object width, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">Int32 row</param>
		/// <param name="column">string column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="width">optional object width</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceField(Int32 row, string column, object rowRelative, object width, object height, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative, width, height, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRow(object row, object rowRelative, object height, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, rowRelative, height, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRow(object row)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRow(object row, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="height">optional object height</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRow(object row, object rowRelative, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, rowRelative, height);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		/// <param name="height">optional object height</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectRow(object row, object rowRelative, object height, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, rowRelative, height, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectColumn(object column, object additional, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectColumn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectColumn(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectColumn(object column, object additional)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional);
			object returnItem = Invoker.MethodReturn(_instance, "SelectColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectColumn(object column, object additional, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskColumn(object column, object additional, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskColumn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskColumn(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskColumn(object column, object additional)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskColumn(object column, object additional, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		/// <param name="extend">optional object extend</param>
		/// <param name="add">optional object add</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceColumn(object column, object additional, object extend, object add)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional, extend, add);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceColumn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceColumn(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceColumn(object column, object additional)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		/// <param name="additional">optional object additional</param>
		/// <param name="extend">optional object extend</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceColumn(object column, object additional, object extend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column, additional, extend);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="column">optional object column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskCell(object row, object column, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskCell()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskCell(object row)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="column">optional object column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectTaskCell(object row, object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="column">optional object column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceCell(object row, object column, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceCell()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceCell(object row)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="column">optional object column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectResourceCell(object row, object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectResourceCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="column">optional object column</param>
		/// <param name="rowRelative">optional object rowRelative</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCell(object row, object column, object rowRelative)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column, rowRelative);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCell()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCell(object row)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="row">optional object row</param>
		/// <param name="column">optional object column</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectCell(object row, object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(row, column);
			object returnItem = Invoker.MethodReturn(_instance, "SelectCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SelectSheet()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectSheet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="app">string app</param>
		/// <param name="topic">string topic</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DDEInitiate(string app, string topic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(app, topic);
			object returnItem = Invoker.MethodReturn(_instance, "DDEInitiate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="command">string command</param>
		/// <param name="timeOut">optional object timeOut</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DDEExecute(string command, object timeOut)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(command, timeOut);
			object returnItem = Invoker.MethodReturn(_instance, "DDEExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="command">string command</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DDEExecute(string command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(command);
			object returnItem = Invoker.MethodReturn(_instance, "DDEExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DDETerminate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DDETerminate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="tab">optional object tab</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InformationDialog(object tab)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(tab);
			object returnItem = Invoker.MethodReturn(_instance, "InformationDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InformationDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InformationDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Form(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "Form", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Form()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Form", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomForms()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CustomForms", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Tables()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Tables", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Filters()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Filters", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Macro(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "Macro", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Macro()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Macro", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="down">optional object down</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FillDown(object down)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(down);
			object returnItem = Invoker.MethodReturn(_instance, "FillDown", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FillDown()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FillDown", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Views()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Views", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalculateProject()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalculateProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingClear(object all)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LevelingClear()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LevelingClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SpellingCheck()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SpellingCheck", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		/// <param name="resourceText5">optional object resourceText5</param>
		/// <param name="assignNotes">optional object assignNotes</param>
		/// <param name="ignoreUppercase">optional object ignoreUppercase</param>
		/// <param name="ignoreNumberWords">optional object ignoreNumberWords</param>
		/// <param name="alwaysSuggest">optional object alwaysSuggest</param>
		/// <param name="useCustomDictionary">optional object useCustomDictionary</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4, object resourceText5, object assignNotes, object ignoreUppercase, object ignoreNumberWords, object alwaysSuggest, object useCustomDictionary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4, resourceText5, assignNotes, ignoreUppercase, ignoreNumberWords, alwaysSuggest, useCustomDictionary);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		/// <param name="resourceText5">optional object resourceText5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4, object resourceText5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4, resourceText5);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		/// <param name="resourceText5">optional object resourceText5</param>
		/// <param name="assignNotes">optional object assignNotes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4, object resourceText5, object assignNotes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4, resourceText5, assignNotes);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		/// <param name="resourceText5">optional object resourceText5</param>
		/// <param name="assignNotes">optional object assignNotes</param>
		/// <param name="ignoreUppercase">optional object ignoreUppercase</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4, object resourceText5, object assignNotes, object ignoreUppercase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4, resourceText5, assignNotes, ignoreUppercase);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		/// <param name="resourceText5">optional object resourceText5</param>
		/// <param name="assignNotes">optional object assignNotes</param>
		/// <param name="ignoreUppercase">optional object ignoreUppercase</param>
		/// <param name="ignoreNumberWords">optional object ignoreNumberWords</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4, object resourceText5, object assignNotes, object ignoreUppercase, object ignoreNumberWords)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4, resourceText5, assignNotes, ignoreUppercase, ignoreNumberWords);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskName">optional object taskName</param>
		/// <param name="taskNotes">optional object taskNotes</param>
		/// <param name="taskText1">optional object taskText1</param>
		/// <param name="taskText2">optional object taskText2</param>
		/// <param name="taskText3">optional object taskText3</param>
		/// <param name="taskText4">optional object taskText4</param>
		/// <param name="taskText5">optional object taskText5</param>
		/// <param name="taskText6">optional object taskText6</param>
		/// <param name="taskText7">optional object taskText7</param>
		/// <param name="taskText8">optional object taskText8</param>
		/// <param name="taskText9">optional object taskText9</param>
		/// <param name="taskText10">optional object taskText10</param>
		/// <param name="resourceCode">optional object resourceCode</param>
		/// <param name="resourceName">optional object resourceName</param>
		/// <param name="resourceNotes">optional object resourceNotes</param>
		/// <param name="resourceGroup">optional object resourceGroup</param>
		/// <param name="resourceText1">optional object resourceText1</param>
		/// <param name="resourceText2">optional object resourceText2</param>
		/// <param name="resourceText3">optional object resourceText3</param>
		/// <param name="resourceText4">optional object resourceText4</param>
		/// <param name="resourceText5">optional object resourceText5</param>
		/// <param name="assignNotes">optional object assignNotes</param>
		/// <param name="ignoreUppercase">optional object ignoreUppercase</param>
		/// <param name="ignoreNumberWords">optional object ignoreNumberWords</param>
		/// <param name="alwaysSuggest">optional object alwaysSuggest</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSpelling(object taskName, object taskNotes, object taskText1, object taskText2, object taskText3, object taskText4, object taskText5, object taskText6, object taskText7, object taskText8, object taskText9, object taskText10, object resourceCode, object resourceName, object resourceNotes, object resourceGroup, object resourceText1, object resourceText2, object resourceText3, object resourceText4, object resourceText5, object assignNotes, object ignoreUppercase, object ignoreNumberWords, object alwaysSuggest)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskName, taskNotes, taskText1, taskText2, taskText3, taskText4, taskText5, taskText6, taskText7, taskText8, taskText9, taskText10, resourceCode, resourceName, resourceNotes, resourceGroup, resourceText1, resourceText2, resourceText3, resourceText4, resourceText5, assignNotes, ignoreUppercase, ignoreNumberWords, alwaysSuggest);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSpelling", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WindowMoreWindows()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WindowMoreWindows", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpContents()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpContents", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpSearch()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpSearch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpOnlineIndex()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpOnlineIndex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpAbout()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpAbout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="contextNumber">optional object contextNumber</param>
		/// <param name="search">optional object search</param>
		/// <param name="searchKey">optional object searchKey</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpLaunch(object fileName, object contextNumber, object search, object searchKey)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, contextNumber, search, searchKey);
			object returnItem = Invoker.MethodReturn(_instance, "HelpLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpLaunch()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpLaunch(object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName);
			object returnItem = Invoker.MethodReturn(_instance, "HelpLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="contextNumber">optional object contextNumber</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpLaunch(object fileName, object contextNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, contextNumber);
			object returnItem = Invoker.MethodReturn(_instance, "HelpLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="contextNumber">optional object contextNumber</param>
		/// <param name="search">optional object search</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpLaunch(object fileName, object contextNumber, object search)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, contextNumber, search);
			object returnItem = Invoker.MethodReturn(_instance, "HelpLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="contextNumber">optional object contextNumber</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpCueCards(object fileName, object contextNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, contextNumber);
			object returnItem = Invoker.MethodReturn(_instance, "HelpCueCards", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpCueCards()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpCueCards", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpCueCards(object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName);
			object returnItem = Invoker.MethodReturn(_instance, "HelpCueCards", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpTopics()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpTopics", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpAnswerWizard()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpAnswerWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpMSProjectFundamentals()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpMSProjectFundamentals", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AutoCorrect()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AutoCorrect", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpQuickPreview()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpQuickPreview", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpTechnicalSupport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpTechnicalSupport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpCreateYourProject()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpCreateYourProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpContextHelp()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpContextHelp", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStyles(object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesFormat(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Item = 0</param>
		/// <param name="position">optional object position</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesAdd(object item, object position)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, position);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesAdd()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Item = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesAdd(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Item = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesRemove(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesRemove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesRemove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesRemove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesRemoveAll()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesRemoveAll", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name, object size, object bold, object italic, object underline, object color, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Font(object name, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "Font", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Timescale()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Timescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		/// <param name="topLabel">optional object topLabel</param>
		/// <param name="topAlign">optional object topAlign</param>
		/// <param name="topCount">optional object topCount</param>
		/// <param name="topTicks">optional object topTicks</param>
		/// <param name="topUseFY">optional object topUseFY</param>
		/// <param name="tierCount">optional object tierCount</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits, object topLabel, object topAlign, object topCount, object topTicks, object topUseFY, object tierCount)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits, topLabel, topAlign, topCount, topTicks, topUseFY, tierCount);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		/// <param name="topLabel">optional object topLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits, object topLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits, topLabel);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		/// <param name="topLabel">optional object topLabel</param>
		/// <param name="topAlign">optional object topAlign</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits, object topLabel, object topAlign)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits, topLabel, topAlign);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		/// <param name="topLabel">optional object topLabel</param>
		/// <param name="topAlign">optional object topAlign</param>
		/// <param name="topCount">optional object topCount</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits, object topLabel, object topAlign, object topCount)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits, topLabel, topAlign, topCount);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		/// <param name="topLabel">optional object topLabel</param>
		/// <param name="topAlign">optional object topAlign</param>
		/// <param name="topCount">optional object topCount</param>
		/// <param name="topTicks">optional object topTicks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits, object topLabel, object topAlign, object topCount, object topTicks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits, topLabel, topAlign, topCount, topTicks);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="majorUnits">optional object majorUnits</param>
		/// <param name="minorUnits">optional object minorUnits</param>
		/// <param name="majorLabel">optional object majorLabel</param>
		/// <param name="minorLabel">optional object minorLabel</param>
		/// <param name="majorAlign">optional object majorAlign</param>
		/// <param name="minorAlign">optional object minorAlign</param>
		/// <param name="majorCount">optional object majorCount</param>
		/// <param name="minorCount">optional object minorCount</param>
		/// <param name="majorTicks">optional object majorTicks</param>
		/// <param name="minorTicks">optional object minorTicks</param>
		/// <param name="enlarge">optional object enlarge</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="majorUseFY">optional object majorUseFY</param>
		/// <param name="minorUseFY">optional object minorUseFY</param>
		/// <param name="topUnits">optional object topUnits</param>
		/// <param name="topLabel">optional object topLabel</param>
		/// <param name="topAlign">optional object topAlign</param>
		/// <param name="topCount">optional object topCount</param>
		/// <param name="topTicks">optional object topTicks</param>
		/// <param name="topUseFY">optional object topUseFY</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleEdit(object majorUnits, object minorUnits, object majorLabel, object minorLabel, object majorAlign, object minorAlign, object majorCount, object minorCount, object majorTicks, object minorTicks, object enlarge, object separator, object majorUseFY, object minorUseFY, object topUnits, object topLabel, object topAlign, object topCount, object topTicks, object topUseFY)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(majorUnits, minorUnits, majorLabel, minorLabel, majorAlign, minorAlign, majorCount, minorCount, majorTicks, minorTicks, enlarge, separator, majorUseFY, minorUseFY, topUnits, topLabel, topAlign, topCount, topTicks, topUseFY);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		/// <param name="key2">optional object key2</param>
		/// <param name="ascending2">optional object ascending2</param>
		/// <param name="key3">optional object key3</param>
		/// <param name="ascending3">optional object ascending3</param>
		/// <param name="renumber">optional object renumber</param>
		/// <param name="outline">optional object outline</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1, object key2, object ascending2, object key3, object ascending3, object renumber, object outline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1, key2, ascending2, key3, ascending3, renumber, outline);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		/// <param name="key2">optional object key2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1, object key2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1, key2);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		/// <param name="key2">optional object key2</param>
		/// <param name="ascending2">optional object ascending2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1, object key2, object ascending2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1, key2, ascending2);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		/// <param name="key2">optional object key2</param>
		/// <param name="ascending2">optional object ascending2</param>
		/// <param name="key3">optional object key3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1, object key2, object ascending2, object key3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1, key2, ascending2, key3);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		/// <param name="key2">optional object key2</param>
		/// <param name="ascending2">optional object ascending2</param>
		/// <param name="key3">optional object key3</param>
		/// <param name="ascending3">optional object ascending3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1, object key2, object ascending2, object key3, object ascending3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1, key2, ascending2, key3, ascending3);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="key1">optional object key1</param>
		/// <param name="ascending1">optional object ascending1</param>
		/// <param name="key2">optional object key2</param>
		/// <param name="ascending2">optional object ascending2</param>
		/// <param name="key3">optional object key3</param>
		/// <param name="ascending3">optional object ascending3</param>
		/// <param name="renumber">optional object renumber</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Sort(object key1, object ascending1, object key2, object ascending2, object key3, object ascending3, object renumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(key1, ascending1, key2, ascending2, key3, ascending3, renumber);
			object returnItem = Invoker.MethodReturn(_instance, "Sort", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BarBoxStyles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BarBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="insideText">optional object insideText</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText, object insideText, object reset, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText, insideText, reset, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="insideText">optional object insideText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText, object insideText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText, insideText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="insideText">optional object insideText</param>
		/// <param name="reset">optional object reset</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarFormat(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText, object insideText, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText, insideText, reset);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="color">optional object color</param>
		/// <param name="pattern">optional object pattern</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleNonWorking(object draw, object calendar, object color, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw, calendar, color, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorking", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleNonWorking()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorking", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleNonWorking(object draw)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorking", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		/// <param name="calendar">optional object calendar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleNonWorking(object draw, object calendar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw, calendar);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorking", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TimescaleNonWorking(object draw, object calendar, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw, calendar, color);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorking", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxShowHideFields(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "BoxShowHideFields", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxShowHideFields()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxShowHideFields", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Layout()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Layout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="straight">optional object straight</param>
		/// <param name="displayArrows">optional object displayArrows</param>
		/// <param name="adjustForPageBreaks">optional object adjustForPageBreaks</param>
		/// <param name="displayPageBreaks">optional object displayPageBreaks</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTLayout(object straight, object displayArrows, object adjustForPageBreaks, object displayPageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(straight, displayArrows, adjustForPageBreaks, displayPageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "PERTLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTLayout()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PERTLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="straight">optional object straight</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTLayout(object straight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(straight);
			object returnItem = Invoker.MethodReturn(_instance, "PERTLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="straight">optional object straight</param>
		/// <param name="displayArrows">optional object displayArrows</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTLayout(object straight, object displayArrows)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(straight, displayArrows);
			object returnItem = Invoker.MethodReturn(_instance, "PERTLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="straight">optional object straight</param>
		/// <param name="displayArrows">optional object displayArrows</param>
		/// <param name="adjustForPageBreaks">optional object adjustForPageBreaks</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTLayout(object straight, object displayArrows, object adjustForPageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(straight, displayArrows, adjustForPageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "PERTLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LayoutNow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LayoutNow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		/// <param name="noncriticalMarkedStyle">optional object noncriticalMarkedStyle</param>
		/// <param name="noncriticalMarkedColor">optional object noncriticalMarkedColor</param>
		/// <param name="criticalExternalTaskStyle">optional object criticalExternalTaskStyle</param>
		/// <param name="criticalExternalTaskColor">optional object criticalExternalTaskColor</param>
		/// <param name="noncriticalExternalTaskStyle">optional object noncriticalExternalTaskStyle</param>
		/// <param name="noncriticalExternalTaskColor">optional object noncriticalExternalTaskColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor, object noncriticalMarkedStyle, object noncriticalMarkedColor, object criticalExternalTaskStyle, object criticalExternalTaskColor, object noncriticalExternalTaskStyle, object noncriticalExternalTaskColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor, noncriticalMarkedStyle, noncriticalMarkedColor, criticalExternalTaskStyle, criticalExternalTaskColor, noncriticalExternalTaskStyle, noncriticalExternalTaskColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		/// <param name="noncriticalMarkedStyle">optional object noncriticalMarkedStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor, object noncriticalMarkedStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor, noncriticalMarkedStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		/// <param name="noncriticalMarkedStyle">optional object noncriticalMarkedStyle</param>
		/// <param name="noncriticalMarkedColor">optional object noncriticalMarkedColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor, object noncriticalMarkedStyle, object noncriticalMarkedColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor, noncriticalMarkedStyle, noncriticalMarkedColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		/// <param name="noncriticalMarkedStyle">optional object noncriticalMarkedStyle</param>
		/// <param name="noncriticalMarkedColor">optional object noncriticalMarkedColor</param>
		/// <param name="criticalExternalTaskStyle">optional object criticalExternalTaskStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor, object noncriticalMarkedStyle, object noncriticalMarkedColor, object criticalExternalTaskStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor, noncriticalMarkedStyle, noncriticalMarkedColor, criticalExternalTaskStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		/// <param name="noncriticalMarkedStyle">optional object noncriticalMarkedStyle</param>
		/// <param name="noncriticalMarkedColor">optional object noncriticalMarkedColor</param>
		/// <param name="criticalExternalTaskStyle">optional object criticalExternalTaskStyle</param>
		/// <param name="criticalExternalTaskColor">optional object criticalExternalTaskColor</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor, object noncriticalMarkedStyle, object noncriticalMarkedColor, object criticalExternalTaskStyle, object criticalExternalTaskColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor, noncriticalMarkedStyle, noncriticalMarkedColor, criticalExternalTaskStyle, criticalExternalTaskColor);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="criticalStyle">optional object criticalStyle</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalStyle">optional object noncriticalStyle</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		/// <param name="criticalMilestoneStyle">optional object criticalMilestoneStyle</param>
		/// <param name="criticalMilestoneColor">optional object criticalMilestoneColor</param>
		/// <param name="noncriticalMilestoneStyle">optional object noncriticalMilestoneStyle</param>
		/// <param name="noncriticalMilestoneColor">optional object noncriticalMilestoneColor</param>
		/// <param name="criticalSummaryStyle">optional object criticalSummaryStyle</param>
		/// <param name="criticalSummaryColor">optional object criticalSummaryColor</param>
		/// <param name="noncriticalSummaryStyle">optional object noncriticalSummaryStyle</param>
		/// <param name="noncriticalSummaryColor">optional object noncriticalSummaryColor</param>
		/// <param name="criticalSubprojectStyle">optional object criticalSubprojectStyle</param>
		/// <param name="criticalSubprojectColor">optional object criticalSubprojectColor</param>
		/// <param name="noncriticalSubprojectStyle">optional object noncriticalSubprojectStyle</param>
		/// <param name="noncriticalSubprojectColor">optional object noncriticalSubprojectColor</param>
		/// <param name="criticalMarkedStyle">optional object criticalMarkedStyle</param>
		/// <param name="criticalMarkedColor">optional object criticalMarkedColor</param>
		/// <param name="noncriticalMarkedStyle">optional object noncriticalMarkedStyle</param>
		/// <param name="noncriticalMarkedColor">optional object noncriticalMarkedColor</param>
		/// <param name="criticalExternalTaskStyle">optional object criticalExternalTaskStyle</param>
		/// <param name="criticalExternalTaskColor">optional object criticalExternalTaskColor</param>
		/// <param name="noncriticalExternalTaskStyle">optional object noncriticalExternalTaskStyle</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBorders(object criticalStyle, object criticalColor, object noncriticalStyle, object noncriticalColor, object criticalMilestoneStyle, object criticalMilestoneColor, object noncriticalMilestoneStyle, object noncriticalMilestoneColor, object criticalSummaryStyle, object criticalSummaryColor, object noncriticalSummaryStyle, object noncriticalSummaryColor, object criticalSubprojectStyle, object criticalSubprojectColor, object noncriticalSubprojectStyle, object noncriticalSubprojectColor, object criticalMarkedStyle, object criticalMarkedColor, object noncriticalMarkedStyle, object noncriticalMarkedColor, object criticalExternalTaskStyle, object criticalExternalTaskColor, object noncriticalExternalTaskStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(criticalStyle, criticalColor, noncriticalStyle, noncriticalColor, criticalMilestoneStyle, criticalMilestoneColor, noncriticalMilestoneStyle, noncriticalMilestoneColor, criticalSummaryStyle, criticalSummaryColor, noncriticalSummaryStyle, noncriticalSummaryColor, criticalSubprojectStyle, criticalSubprojectColor, noncriticalSubprojectStyle, noncriticalSubprojectColor, criticalMarkedStyle, criticalMarkedColor, noncriticalMarkedStyle, noncriticalMarkedColor, criticalExternalTaskStyle, criticalExternalTaskColor, noncriticalExternalTaskStyle);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBorders", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Gridlines()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Gridlines", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		/// <param name="interval">optional object interval</param>
		/// <param name="intervalType">optional object intervalType</param>
		/// <param name="intervalColor">optional object intervalColor</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GridlinesEdit(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor, object interval, object intervalType, object intervalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor, interval, intervalType, intervalColor);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GridlinesEdit(NetOffice.MSProjectApi.Enums.PjGridline item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GridlinesEdit(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GridlinesEdit(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		/// <param name="interval">optional object interval</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GridlinesEdit(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor, object interval)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor, interval);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		/// <param name="interval">optional object interval</param>
		/// <param name="intervalType">optional object intervalType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GridlinesEdit(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor, object interval, object intervalType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor, interval, intervalType);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowSelectedTasks(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowSelectedTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowSelectedTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowSelectedTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PageBreaksShow(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "PageBreaksShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PageBreaksShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PageBreaksShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FindNext()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FindNext", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FindPrevious()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FindPrevious", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomOut()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ZoomOut", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomIn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ZoomIn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="create">optional object create</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetField(string field, string value, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetField(string field, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value);
			object returnItem = Invoker.MethodReturn(_instance, "SetField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTaskField(string field, string value, object allSelectedTasks, object create, object taskID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks, create, taskID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTaskField(string field, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTaskField(string field, string value, object allSelectedTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTaskField(string field, string value, object allSelectedTasks, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTaskField(string field, string value, object allSelectedTasks, object create, object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks, create, taskID);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		/// <param name="create">optional object create</param>
		/// <param name="resourceID">optional object resourceID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetResourceField(string field, string value, object allSelectedResources, object create, object resourceID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedResources, create, resourceID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetResourceField(string field, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetResourceField(string field, string value, object allSelectedResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedResources);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetResourceField(string field, string value, object allSelectedResources, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedResources, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		/// <param name="create">optional object create</param>
		/// <param name="resourceID">optional object resourceID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetResourceField(string field, string value, object allSelectedResources, object create, object resourceID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedResources, create, resourceID);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="value">string value</param>
		/// <param name="create">optional object create</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetActiveCell(string value, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(value, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetActiveCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetActiveCell(string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(value);
			object returnItem = Invoker.MethodReturn(_instance, "SetActiveCell", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="test">optional object test</param>
		/// <param name="op">optional object op</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="value2">optional object value2</param>
		/// <param name="test2">optional object test2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static object CheckField(string field, string value, object test, object op, object field2, object value2, object test2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, test, op, field2, value2, test2);
			object returnItem = Invoker.MethodReturn(_instance, "CheckField", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object CheckField(string field, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value);
			object returnItem = Invoker.MethodReturn(_instance, "CheckField", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="test">optional object test</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object CheckField(string field, string value, object test)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, test);
			object returnItem = Invoker.MethodReturn(_instance, "CheckField", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="test">optional object test</param>
		/// <param name="op">optional object op</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object CheckField(string field, string value, object test, object op)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, test, op);
			object returnItem = Invoker.MethodReturn(_instance, "CheckField", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="test">optional object test</param>
		/// <param name="op">optional object op</param>
		/// <param name="field2">optional object field2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object CheckField(string field, string value, object test, object op, object field2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, test, op, field2);
			object returnItem = Invoker.MethodReturn(_instance, "CheckField", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="test">optional object test</param>
		/// <param name="op">optional object op</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="value2">optional object value2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static object CheckField(string field, string value, object test, object op, object field2, object value2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, test, op, field2, value2);
			object returnItem = Invoker.MethodReturn(_instance, "CheckField", paramsArray);
			if((null != returnItem) && (returnItem is MarshalByRefObject))
			{
				ICOMObject newObject = Factory.CreateObjectFromComProxy(_instance, returnItem);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="checkField">string checkField</param>
		/// <param name="checkValue">string checkValue</param>
		/// <param name="checkTest">optional object checkTest</param>
		/// <param name="checkOperation">optional object checkOperation</param>
		/// <param name="checkField2">optional object checkField2</param>
		/// <param name="checkValue2">optional object checkValue2</param>
		/// <param name="checkTest2">optional object checkTest2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetMatchingField(string field, string value, string checkField, string checkValue, object checkTest, object checkOperation, object checkField2, object checkValue2, object checkTest2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, checkField, checkValue, checkTest, checkOperation, checkField2, checkValue2, checkTest2);
			object returnItem = Invoker.MethodReturn(_instance, "SetMatchingField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="checkField">string checkField</param>
		/// <param name="checkValue">string checkValue</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetMatchingField(string field, string value, string checkField, string checkValue)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, checkField, checkValue);
			object returnItem = Invoker.MethodReturn(_instance, "SetMatchingField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="checkField">string checkField</param>
		/// <param name="checkValue">string checkValue</param>
		/// <param name="checkTest">optional object checkTest</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetMatchingField(string field, string value, string checkField, string checkValue, object checkTest)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, checkField, checkValue, checkTest);
			object returnItem = Invoker.MethodReturn(_instance, "SetMatchingField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="checkField">string checkField</param>
		/// <param name="checkValue">string checkValue</param>
		/// <param name="checkTest">optional object checkTest</param>
		/// <param name="checkOperation">optional object checkOperation</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetMatchingField(string field, string value, string checkField, string checkValue, object checkTest, object checkOperation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, checkField, checkValue, checkTest, checkOperation);
			object returnItem = Invoker.MethodReturn(_instance, "SetMatchingField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="checkField">string checkField</param>
		/// <param name="checkValue">string checkValue</param>
		/// <param name="checkTest">optional object checkTest</param>
		/// <param name="checkOperation">optional object checkOperation</param>
		/// <param name="checkField2">optional object checkField2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetMatchingField(string field, string value, string checkField, string checkValue, object checkTest, object checkOperation, object checkField2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, checkField, checkValue, checkTest, checkOperation, checkField2);
			object returnItem = Invoker.MethodReturn(_instance, "SetMatchingField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="checkField">string checkField</param>
		/// <param name="checkValue">string checkValue</param>
		/// <param name="checkTest">optional object checkTest</param>
		/// <param name="checkOperation">optional object checkOperation</param>
		/// <param name="checkField2">optional object checkField2</param>
		/// <param name="checkValue2">optional object checkValue2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetMatchingField(string field, string value, string checkField, string checkValue, object checkTest, object checkOperation, object checkField2, object checkValue2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, checkField, checkValue, checkTest, checkOperation, checkField2, checkValue2);
			object returnItem = Invoker.MethodReturn(_instance, "SetMatchingField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="window">optional object window</param>
		/// <param name="command">optional object command</param>
		/// <param name="minimize">optional object minimize</param>
		/// <param name="activate">optional object activate</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppExecute(object window, object command, object minimize, object activate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(window, command, minimize, activate);
			object returnItem = Invoker.MethodReturn(_instance, "AppExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppExecute()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AppExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="window">optional object window</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppExecute(object window)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(window);
			object returnItem = Invoker.MethodReturn(_instance, "AppExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="window">optional object window</param>
		/// <param name="command">optional object command</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppExecute(object window, object command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(window, command);
			object returnItem = Invoker.MethodReturn(_instance, "AppExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="window">optional object window</param>
		/// <param name="command">optional object command</param>
		/// <param name="minimize">optional object minimize</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppExecute(object window, object command, object minimize)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(window, command, minimize);
			object returnItem = Invoker.MethodReturn(_instance, "AppExecute", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="application">string application</param>
		/// <param name="document">optional object document</param>
		/// <param name="activate">optional object activate</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppLaunch(string application, object document, object activate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(application, document, activate);
			object returnItem = Invoker.MethodReturn(_instance, "AppLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="application">string application</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppLaunch(string application)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(application);
			object returnItem = Invoker.MethodReturn(_instance, "AppLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="application">string application</param>
		/// <param name="document">optional object document</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AppLaunch(string application, object document)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(application, document);
			object returnItem = Invoker.MethodReturn(_instance, "AppLaunch", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DDELinksUpdate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DDELinksUpdate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GotoTaskDates()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GotoTaskDates", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="display">optional NetOffice.MSProjectApi.Enums.PjGanttBarLink Display = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarLinks(object display)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(display);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarLinks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="display">optional object display</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttShowDrawings(object display)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(display);
			object returnItem = Invoker.MethodReturn(_instance, "GanttShowDrawings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttShowDrawings()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttShowDrawings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="on">optional object on</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BarRounding(object on)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(on);
			object returnItem = Invoker.MethodReturn(_instance, "BarRounding", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BarRounding()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BarRounding", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alwaysRollup">optional object alwaysRollup</param>
		/// <param name="hideWhenSummaryExpanded">optional object hideWhenSummaryExpanded</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttRollup(object alwaysRollup, object hideWhenSummaryExpanded)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alwaysRollup, hideWhenSummaryExpanded);
			object returnItem = Invoker.MethodReturn(_instance, "GanttRollup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttRollup()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttRollup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alwaysRollup">optional object alwaysRollup</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttRollup(object alwaysRollup)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alwaysRollup);
			object returnItem = Invoker.MethodReturn(_instance, "GanttRollup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="dateFormat">NetOffice.MSProjectApi.Enums.PjDateFormat dateFormat</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarTextDateFormat(NetOffice.MSProjectApi.Enums.PjDateFormat dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarTextDateFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">NetOffice.MSProjectApi.Enums.PjBarSize size</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarSize(NetOffice.MSProjectApi.Enums.PjBarSize size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarSize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleDelete(string item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="insideText">optional object insideText</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText, object leftText, object rightText, object insideText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText, leftText, rightText, insideText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="leftText">optional object leftText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText, object leftText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText, leftText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttBarStyleEdit(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText, object leftText, object rightText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText, leftText, rightText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		/// <param name="crossMarks">optional object crossMarks</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		/// <param name="field5">optional object field5</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines, object crossMarks, object field1, object field2, object field3, object field4, object field5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines, crossMarks, field1, field2, field3, field4, field5);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		/// <param name="crossMarks">optional object crossMarks</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines, object crossMarks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines, crossMarks);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		/// <param name="crossMarks">optional object crossMarks</param>
		/// <param name="field1">optional object field1</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines, object crossMarks, object field1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines, crossMarks, field1);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		/// <param name="crossMarks">optional object crossMarks</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines, object crossMarks, object field1, object field2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines, crossMarks, field1, field2);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		/// <param name="crossMarks">optional object crossMarks</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines, object crossMarks, object field1, object field2, object field3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines, crossMarks, field1, field2, field3);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="size">optional object size</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="gridlines">optional object gridlines</param>
		/// <param name="crossMarks">optional object crossMarks</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTBoxStyles(object size, object dateFormat, object gridlines, object crossMarks, object field1, object field2, object field3, object field4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(size, dateFormat, gridlines, crossMarks, field1, field2, field3, field4);
			object returnItem = Invoker.MethodReturn(_instance, "PERTBoxStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="create">optional object create</param>
		/// <param name="move">optional object move</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTSetTask(object create, object move, object taskID, object xPosition, object yPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(create, move, taskID, xPosition, yPosition);
			object returnItem = Invoker.MethodReturn(_instance, "PERTSetTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTSetTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PERTSetTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="create">optional object create</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTSetTask(object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(create);
			object returnItem = Invoker.MethodReturn(_instance, "PERTSetTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="create">optional object create</param>
		/// <param name="move">optional object move</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTSetTask(object create, object move)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(create, move);
			object returnItem = Invoker.MethodReturn(_instance, "PERTSetTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="create">optional object create</param>
		/// <param name="move">optional object move</param>
		/// <param name="taskID">optional object taskID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTSetTask(object create, object move, object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(create, move, taskID);
			object returnItem = Invoker.MethodReturn(_instance, "PERTSetTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="create">optional object create</param>
		/// <param name="move">optional object move</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="xPosition">optional object xPosition</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool PERTSetTask(object create, object move, object taskID, object xPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(create, move, taskID, xPosition);
			object returnItem = Invoker.MethodReturn(_instance, "PERTSetTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		/// <param name="proposedRightShowAs">optional object proposedRightShowAs</param>
		/// <param name="proposedRightColor">optional object proposedRightColor</param>
		/// <param name="proposedRightPattern">optional object proposedRightPattern</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern, object proposedRightShowAs, object proposedRightColor, object proposedRightPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern, proposedRightShowAs, proposedRightColor, proposedRightPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		/// <param name="proposedRightShowAs">optional object proposedRightShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern, object proposedRightShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern, proposedRightShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		/// <param name="proposedRightShowAs">optional object proposedRightShowAs</param>
		/// <param name="proposedRightColor">optional object proposedRightColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceGraphBarStyles(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern, object proposedRightShowAs, object proposedRightColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern, proposedRightShowAs, proposedRightColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="filenames">object filenames</param>
		/// <param name="newWindow">object newWindow</param>
		/// <param name="attachToSources">object attachToSources</param>
		/// <param name="poolResources">object poolResources</param>
		/// <param name="hideSubtasks">object hideSubtasks</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="password">optional object password</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ConsolidateProjects(object filenames, object newWindow, object attachToSources, object poolResources, object hideSubtasks, object openPool, object userID, object password)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filenames, newWindow, attachToSources, poolResources, hideSubtasks, openPool, userID, password);
			object returnItem = Invoker.MethodReturn(_instance, "ConsolidateProjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="filenames">object filenames</param>
		/// <param name="newWindow">object newWindow</param>
		/// <param name="attachToSources">object attachToSources</param>
		/// <param name="poolResources">object poolResources</param>
		/// <param name="hideSubtasks">object hideSubtasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ConsolidateProjects(object filenames, object newWindow, object attachToSources, object poolResources, object hideSubtasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filenames, newWindow, attachToSources, poolResources, hideSubtasks);
			object returnItem = Invoker.MethodReturn(_instance, "ConsolidateProjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="filenames">object filenames</param>
		/// <param name="newWindow">object newWindow</param>
		/// <param name="attachToSources">object attachToSources</param>
		/// <param name="poolResources">object poolResources</param>
		/// <param name="hideSubtasks">object hideSubtasks</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ConsolidateProjects(object filenames, object newWindow, object attachToSources, object poolResources, object hideSubtasks, object openPool)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filenames, newWindow, attachToSources, poolResources, hideSubtasks, openPool);
			object returnItem = Invoker.MethodReturn(_instance, "ConsolidateProjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="filenames">object filenames</param>
		/// <param name="newWindow">object newWindow</param>
		/// <param name="attachToSources">object attachToSources</param>
		/// <param name="poolResources">object poolResources</param>
		/// <param name="hideSubtasks">object hideSubtasks</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="userID">optional object userID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ConsolidateProjects(object filenames, object newWindow, object attachToSources, object poolResources, object hideSubtasks, object openPool, object userID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filenames, newWindow, attachToSources, poolResources, hideSubtasks, openPool, userID);
			object returnItem = Invoker.MethodReturn(_instance, "ConsolidateProjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjOrganizer Type = 0</param>
		/// <param name="task">optional object task</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Organizer(object type, object task)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, task);
			object returnItem = Invoker.MethodReturn(_instance, "Organizer", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Organizer()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Organizer", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjOrganizer Type = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Organizer(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "Organizer", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="toFileName">optional object toFileName</param>
		/// <param name="name">optional object name</param>
		/// <param name="task">optional object task</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerMoveItem(object type, object fileName, object toFileName, object name, object task)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, toFileName, name, task);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerMoveItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerMoveItem()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerMoveItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerMoveItem(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerMoveItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerMoveItem(object type, object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerMoveItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="toFileName">optional object toFileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerMoveItem(object type, object fileName, object toFileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, toFileName);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerMoveItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="toFileName">optional object toFileName</param>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerMoveItem(object type, object fileName, object toFileName, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, toFileName, name);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerMoveItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="name">optional object name</param>
		/// <param name="task">optional object task</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerDeleteItem(object type, object fileName, object name, object task)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, name, task);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerDeleteItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerDeleteItem()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerDeleteItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerDeleteItem(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerDeleteItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerDeleteItem(object type, object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerDeleteItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerDeleteItem(object type, object fileName, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, name);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerDeleteItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="name">optional object name</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="task">optional object task</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerRenameItem(object type, object fileName, object name, object newName, object task)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, name, newName, task);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerRenameItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerRenameItem()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerRenameItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerRenameItem(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerRenameItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerRenameItem(object type, object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerRenameItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerRenameItem(object type, object fileName, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, name);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerRenameItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="name">optional object name</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OrganizerRenameItem(object type, object fileName, object name, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, fileName, name, newName);
			object returnItem = Invoker.MethodReturn(_instance, "OrganizerRenameItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool RecurringTaskInsert()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RecurringTaskInsert", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarTimescale()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarTimescale", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		/// <param name="bottomColor">optional object bottomColor</param>
		/// <param name="topPattern">optional object topPattern</param>
		/// <param name="bottomPattern">optional object bottomPattern</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor, object bottomColor, object topPattern, object bottomPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor, bottomColor, topPattern, bottomPattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight, object bottomLeft)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight, object bottomLeft, object bottomRight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		/// <param name="bottomColor">optional object bottomColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor, object bottomColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor, bottomColor);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		/// <param name="bottomColor">optional object bottomColor</param>
		/// <param name="topPattern">optional object topPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateBoxes(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor, object bottomColor, object topPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor, bottomColor, topPattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxes", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		/// <param name="showPreview">optional object showPreview</param>
		/// <param name="daysPerWeek">optional object daysPerWeek</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadings(object monthTitle, object weekTitle, object dayTitle, object showPreview, object daysPerWeek)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle, showPreview, daysPerWeek);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadings()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadings(object monthTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadings(object monthTitle, object weekTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadings(object monthTitle, object weekTitle, object dayTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		/// <param name="showPreview">optional object showPreview</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadings(object monthTitle, object weekTitle, object dayTitle, object showPreview)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle, showPreview);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjCalendarShading item</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShadingEdit(NetOffice.MSProjectApi.Enums.PjCalendarShading item, object pattern, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, pattern, color);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShadingEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjCalendarShading item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShadingEdit(NetOffice.MSProjectApi.Enums.PjCalendarShading item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShadingEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjCalendarShading item</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShadingEdit(NetOffice.MSProjectApi.Enums.PjCalendarShading item, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShadingEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="baseCalendarName">optional object baseCalendarName</param>
		/// <param name="resourceUniqueID">optional object resourceUniqueID</param>
		/// <param name="projectIndex">optional object projectIndex</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShading(object baseCalendarName, object resourceUniqueID, object projectIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(baseCalendarName, resourceUniqueID, projectIndex);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShading", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShading()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShading", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="baseCalendarName">optional object baseCalendarName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShading(object baseCalendarName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(baseCalendarName);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShading", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="baseCalendarName">optional object baseCalendarName</param>
		/// <param name="resourceUniqueID">optional object resourceUniqueID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarDateShading(object baseCalendarName, object resourceUniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(baseCalendarName, resourceUniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShading", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numWeeks">optional object numWeeks</param>
		/// <param name="startDate">optional object startDate</param>
		/// <param name="endDate">optional object endDate</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomCalendar(object numWeeks, object startDate, object endDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numWeeks, startDate, endDate);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomCalendar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ZoomCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numWeeks">optional object numWeeks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomCalendar(object numWeeks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numWeeks);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="numWeeks">optional object numWeeks</param>
		/// <param name="startDate">optional object startDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ZoomCalendar(object numWeeks, object startDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numWeeks, startDate);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="sortOrder">optional object sortOrder</param>
		/// <param name="autoLayout">optional object autoLayout</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarLayout(object sortOrder, object autoLayout)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(sortOrder, autoLayout);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarLayout()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="sortOrder">optional object sortOrder</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarLayout(object sortOrder)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(sortOrder);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="barRounding">optional object barRounding</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStyles(object barRounding)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(barRounding);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStyles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStyles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		/// <param name="field5">optional object field5</param>
		/// <param name="splitPattern">optional object splitPattern</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3, object field4, object field5, object splitPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3, field4, field5, splitPattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3, object field4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3, field4);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		/// <param name="field5">optional object field5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBarStylesEdit(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3, object field4, object field5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3, field4, field5);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarBestFitWeekHeight()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBestFitWeekHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">NetOffice.MSProjectApi.Enums.PjShape type</param>
		/// <param name="behind">optional object behind</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingCreate(NetOffice.MSProjectApi.Enums.PjShape type, object behind)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, behind);
			object returnItem = Invoker.MethodReturn(_instance, "DrawingCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">NetOffice.MSProjectApi.Enums.PjShape type</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingCreate(NetOffice.MSProjectApi.Enums.PjShape type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "DrawingCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="forward">optional object forward</param>
		/// <param name="full">optional object full</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingMove(object forward, object full)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(forward, full);
			object returnItem = Invoker.MethodReturn(_instance, "DrawingMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingMove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DrawingMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="forward">optional object forward</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingMove(object forward)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(forward);
			object returnItem = Invoker.MethodReturn(_instance, "DrawingMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingReshape()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DrawingReshape", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="sizePositionTab">optional object sizePositionTab</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingProperties(object sizePositionTab)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(sizePositionTab);
			object returnItem = Invoker.MethodReturn(_instance, "DrawingProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingProperties()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DrawingProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingCycleColor()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DrawingCycleColor", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FormatCopy()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FormatCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FormatPaste()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FormatPaste", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FormatPainter()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FormatPainter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="toolbarName">optional object toolbarName</param>
		/// <param name="newToolbarName">optional object newToolbarName</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Toolbars(object action, object toolbarName, object newToolbarName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, toolbarName, newToolbarName);
			object returnItem = Invoker.MethodReturn(_instance, "Toolbars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Toolbars()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Toolbars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Toolbars(object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action);
			object returnItem = Invoker.MethodReturn(_instance, "Toolbars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="toolbarName">optional object toolbarName</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Toolbars(object action, object toolbarName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, toolbarName);
			object returnItem = Invoker.MethodReturn(_instance, "Toolbars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		/// <param name="command">optional object command</param>
		/// <param name="faceIndex">optional object faceIndex</param>
		/// <param name="description">optional object description</param>
		/// <param name="toolTip">optional object toolTip</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarInsertTool(string toolbarName, Int16 buttonIndex, object command, object faceIndex, object description, object toolTip)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command, faceIndex, description, toolTip);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarInsertTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarInsertTool(string toolbarName, Int16 buttonIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarInsertTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		/// <param name="command">optional object command</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarInsertTool(string toolbarName, Int16 buttonIndex, object command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarInsertTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		/// <param name="command">optional object command</param>
		/// <param name="faceIndex">optional object faceIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarInsertTool(string toolbarName, Int16 buttonIndex, object command, object faceIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command, faceIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarInsertTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		/// <param name="command">optional object command</param>
		/// <param name="faceIndex">optional object faceIndex</param>
		/// <param name="description">optional object description</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarInsertTool(string toolbarName, Int16 buttonIndex, object command, object faceIndex, object description)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command, faceIndex, description);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarInsertTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarDeleteTool(string toolbarName, Int16 buttonIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarDeleteTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarsCustomize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarsCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">optional object toolbarName</param>
		/// <param name="buttonIndex">optional object buttonIndex</param>
		/// <param name="command">optional object command</param>
		/// <param name="faceIndex">optional object faceIndex</param>
		/// <param name="description">optional object description</param>
		/// <param name="toolTip">optional object toolTip</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool(object toolbarName, object buttonIndex, object command, object faceIndex, object description, object toolTip)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command, faceIndex, description, toolTip);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">optional object toolbarName</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool(object toolbarName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">optional object toolbarName</param>
		/// <param name="buttonIndex">optional object buttonIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool(object toolbarName, object buttonIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">optional object toolbarName</param>
		/// <param name="buttonIndex">optional object buttonIndex</param>
		/// <param name="command">optional object command</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool(object toolbarName, object buttonIndex, object command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">optional object toolbarName</param>
		/// <param name="buttonIndex">optional object buttonIndex</param>
		/// <param name="command">optional object command</param>
		/// <param name="faceIndex">optional object faceIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool(object toolbarName, object buttonIndex, object command, object faceIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command, faceIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">optional object toolbarName</param>
		/// <param name="buttonIndex">optional object buttonIndex</param>
		/// <param name="command">optional object command</param>
		/// <param name="faceIndex">optional object faceIndex</param>
		/// <param name="description">optional object description</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCustomizeTool(object toolbarName, object buttonIndex, object command, object faceIndex, object description)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex, command, faceIndex, description);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCustomizeTool", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarCopyToolFace(string toolbarName, Int16 buttonIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarCopyToolFace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="toolbarName">string toolbarName</param>
		/// <param name="buttonIndex">Int16 buttonIndex</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToolbarPasteToolFace(string toolbarName, Int16 buttonIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, buttonIndex);
			object returnItem = Invoker.MethodReturn(_instance, "ToolbarPasteToolFace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontBold(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "FontBold", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontBold()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FontBold", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontItalic(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "FontItalic", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontItalic()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FontItalic", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontUnderLine(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "FontUnderLine", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontUnderLine()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FontUnderLine", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="align">NetOffice.MSProjectApi.Enums.PjAlignment align</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ColumnAlignment(NetOffice.MSProjectApi.Enums.PjAlignment align)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(align);
			object returnItem = Invoker.MethodReturn(_instance, "ColumnAlignment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Reports()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Reports", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TipOfTheDay()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TipOfTheDay", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FindFile()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FindFile", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="dataFile">string dataFile</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailUpdateProject(string dataFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(dataFile);
			object returnItem = Invoker.MethodReturn(_instance, "MailUpdateProject", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="fields">optional object fields</param>
		/// <param name="updateAsOf">optional object updateAsOf</param>
		/// <param name="showDialog">optional object showDialog</param>
		/// <param name="installationMessage">optional object installationMessage</param>
		/// <param name="updateFrom">optional object updateFrom</param>
		/// <param name="publishScope">optional object publishScope</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body, object fields, object updateAsOf, object showDialog, object installationMessage, object updateFrom, object publishScope)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body, fields, updateAsOf, showDialog, installationMessage, updateFrom, publishScope);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="fields">optional object fields</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body, object fields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body, fields);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="fields">optional object fields</param>
		/// <param name="updateAsOf">optional object updateAsOf</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body, object fields, object updateAsOf)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body, fields, updateAsOf);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="fields">optional object fields</param>
		/// <param name="updateAsOf">optional object updateAsOf</param>
		/// <param name="showDialog">optional object showDialog</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body, object fields, object updateAsOf, object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body, fields, updateAsOf, showDialog);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="fields">optional object fields</param>
		/// <param name="updateAsOf">optional object updateAsOf</param>
		/// <param name="showDialog">optional object showDialog</param>
		/// <param name="installationMessage">optional object installationMessage</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body, object fields, object updateAsOf, object showDialog, object installationMessage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body, fields, updateAsOf, showDialog, installationMessage);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="messageType">optional object messageType</param>
		/// <param name="subject">optional object subject</param>
		/// <param name="body">optional object body</param>
		/// <param name="fields">optional object fields</param>
		/// <param name="updateAsOf">optional object updateAsOf</param>
		/// <param name="showDialog">optional object showDialog</param>
		/// <param name="installationMessage">optional object installationMessage</param>
		/// <param name="updateFrom">optional object updateFrom</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailSendProjectMail(object messageType, object subject, object body, object fields, object updateAsOf, object showDialog, object installationMessage, object updateFrom)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(messageType, subject, body, fields, updateAsOf, showDialog, installationMessage, updateFrom);
			object returnItem = Invoker.MethodReturn(_instance, "MailSendProjectMail", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebInbox()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebInbox", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttChartWizard()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttChartWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DrawingToolbarShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DrawingToolbarShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="start">optional object start</param>
		/// <param name="leadTime">optional object leadTime</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReminderSet(object start, object leadTime)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start, leadTime);
			object returnItem = Invoker.MethodReturn(_instance, "ReminderSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReminderSet()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReminderSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="start">optional object start</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ReminderSet(object start)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start);
			object returnItem = Invoker.MethodReturn(_instance, "ReminderSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="start">optional object start</param>
		/// <param name="leadTime">optional object leadTime</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SchedulePlusReminderSet(object start, object leadTime)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start, leadTime);
			object returnItem = Invoker.MethodReturn(_instance, "SchedulePlusReminderSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SchedulePlusReminderSet()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SchedulePlusReminderSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="start">optional object start</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SchedulePlusReminderSet(object start)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start);
			object returnItem = Invoker.MethodReturn(_instance, "SchedulePlusReminderSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="date">optional object date</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarTaskList(object date)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(date);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarTaskList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarTaskList()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarTaskList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineSymbolsToggle(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "OutlineSymbolsToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OutlineSymbolsToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OutlineSymbolsToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">NetOffice.MSProjectApi.Enums.PjPoolAction action</param>
		/// <param name="fileName">optional object fileName</param>
		/// <param name="readOnly">optional object readOnly</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharingPoolAction(NetOffice.MSProjectApi.Enums.PjPoolAction action, object fileName, object readOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, fileName, readOnly);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharingPoolAction", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">NetOffice.MSProjectApi.Enums.PjPoolAction action</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharingPoolAction(NetOffice.MSProjectApi.Enums.PjPoolAction action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharingPoolAction", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">NetOffice.MSProjectApi.Enums.PjPoolAction action</param>
		/// <param name="fileName">optional object fileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharingPoolAction(NetOffice.MSProjectApi.Enums.PjPoolAction action, object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, fileName);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharingPoolAction", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceActiveDirectory()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceActiveDirectory", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAddressBook()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAddressBook", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceDetails(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceDetails", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceDetails()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceDetails", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="position">optional object position</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="title">optional object title</param>
		/// <param name="includeInTeamStatus">optional object includeInTeamStatus</param>
		/// <param name="editable">optional object editable</param>
		/// <param name="useAssignmentField">optional object useAssignmentField</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action, object position, object fieldID, object title, object includeInTeamStatus, object editable, object useAssignmentField)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, position, fieldID, title, includeInTeamStatus, editable, useAssignmentField);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="position">optional object position</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action, object position)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, position);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="position">optional object position</param>
		/// <param name="fieldID">optional object fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action, object position, object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, position, fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="position">optional object position</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="title">optional object title</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action, object position, object fieldID, object title)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, position, fieldID, title);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="position">optional object position</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="title">optional object title</param>
		/// <param name="includeInTeamStatus">optional object includeInTeamStatus</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action, object position, object fieldID, object title, object includeInTeamStatus)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, position, fieldID, title, includeInTeamStatus);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		/// <param name="position">optional object position</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="title">optional object title</param>
		/// <param name="includeInTeamStatus">optional object includeInTeamStatus</param>
		/// <param name="editable">optional object editable</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MailProjectMailCustomize(object action, object position, object fieldID, object title, object includeInTeamStatus, object editable)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, position, fieldID, title, includeInTeamStatus, editable);
			object returnItem = Invoker.MethodReturn(_instance, "MailProjectMailCustomize", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileQuit(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileQuit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileQuit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileQuit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool About()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "About", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alignCellData">optional object alignCellData</param>
		/// <param name="repeatRowLabel">optional object repeatRowLabel</param>
		/// <param name="shortLabels">optional object shortLabels</param>
		/// <param name="displayDetailsColumn">optional object displayDetailsColumn</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesProperties(object alignCellData, object repeatRowLabel, object shortLabels, object displayDetailsColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alignCellData, repeatRowLabel, shortLabels, displayDetailsColumn);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesProperties()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alignCellData">optional object alignCellData</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesProperties(object alignCellData)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alignCellData);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alignCellData">optional object alignCellData</param>
		/// <param name="repeatRowLabel">optional object repeatRowLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesProperties(object alignCellData, object repeatRowLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alignCellData, repeatRowLabel);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alignCellData">optional object alignCellData</param>
		/// <param name="repeatRowLabel">optional object repeatRowLabel</param>
		/// <param name="shortLabels">optional object shortLabels</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesProperties(object alignCellData, object repeatRowLabel, object shortLabels)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alignCellData, repeatRowLabel, shortLabels);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional NetOffice.MSProjectApi.Enums.PjTimescaledData Item = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesToggleItem(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesToggleItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DetailStylesToggleItem()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesToggleItem", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AutoFilter()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewBar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewBar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MacroShowVba()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MacroShowVba", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MacroShowCode()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MacroShowCode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebGoBack()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebGoBack", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebGoForward()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebGoForward", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebStopLoading()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebStopLoading", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebRefresh()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebRefresh", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenStartPage()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenStartPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenSearchPage()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenSearchPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="hide">optional object hide</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebHideToolbars(object hide)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(hide);
			object returnItem = Invoker.MethodReturn(_instance, "WebHideToolbars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebHideToolbars()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebHideToolbars", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		/// <param name="addHistory">optional object addHistory</param>
		/// <param name="newWindow">optional object newWindow</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FollowHyperlink(object address, object subAddress, object addHistory, object newWindow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address, subAddress, addHistory, newWindow);
			object returnItem = Invoker.MethodReturn(_instance, "FollowHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FollowHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FollowHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FollowHyperlink(object address)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address);
			object returnItem = Invoker.MethodReturn(_instance, "FollowHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FollowHyperlink(object address, object subAddress)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address, subAddress);
			object returnItem = Invoker.MethodReturn(_instance, "FollowHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		/// <param name="addHistory">optional object addHistory</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FollowHyperlink(object address, object subAddress, object addHistory)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address, subAddress, addHistory);
			object returnItem = Invoker.MethodReturn(_instance, "FollowHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditPasteAsHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditPasteAsHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		/// <param name="screenTip">optional object screenTip</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InsertHyperlink(object name, object address, object subAddress, object screenTip)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, address, subAddress, screenTip);
			object returnItem = Invoker.MethodReturn(_instance, "InsertHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InsertHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InsertHyperlink(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "InsertHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="address">optional object address</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InsertHyperlink(object name, object address)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, address);
			object returnItem = Invoker.MethodReturn(_instance, "InsertHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool InsertHyperlink(object name, object address, object subAddress)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, address, subAddress);
			object returnItem = Invoker.MethodReturn(_instance, "InsertHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		/// <param name="screenTip">optional object screenTip</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditHyperlink(object name, object address, object subAddress, object screenTip)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, address, subAddress, screenTip);
			object returnItem = Invoker.MethodReturn(_instance, "EditHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditHyperlink(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "EditHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="address">optional object address</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditHyperlink(object name, object address)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, address);
			object returnItem = Invoker.MethodReturn(_instance, "EditHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditHyperlink(object name, object address, object subAddress)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, address, subAddress);
			object returnItem = Invoker.MethodReturn(_instance, "EditHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		/// <param name="addHistory">optional object addHistory</param>
		/// <param name="newWindow">optional object newWindow</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenHyperlink(object address, object subAddress, object addHistory, object newWindow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address, subAddress, addHistory, newWindow);
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenHyperlink(object address)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address);
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenHyperlink(object address, object subAddress)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address, subAddress);
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		/// <param name="subAddress">optional object subAddress</param>
		/// <param name="addHistory">optional object addHistory</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenHyperlink(object address, object subAddress, object addHistory)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address, subAddress, addHistory);
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebCopyHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebCopyHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="currentLink">optional object currentLink</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebAddToFavorites(object currentLink)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(currentLink);
			object returnItem = Invoker.MethodReturn(_instance, "WebAddToFavorites", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebAddToFavorites()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebAddToFavorites", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditClearHyperlink()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditClearHyperlink", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebSetStartPage(object address)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address);
			object returnItem = Invoker.MethodReturn(_instance, "WebSetStartPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebSetStartPage()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebSetStartPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="address">optional object address</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebSetSearchPage(object address)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(address);
			object returnItem = Invoker.MethodReturn(_instance, "WebSetSearchPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebSetSearchPage()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebSetSearchPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebOpenFavorites()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebOpenFavorites", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebToolbar(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "WebToolbar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebToolbar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebToolbar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="_lock">optional object lock</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SplitTask(object _lock)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_lock);
			object returnItem = Invoker.MethodReturn(_instance, "SplitTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SplitTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SplitTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="phonetic">optional object phonetic</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldRename(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object newName, object phonetic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, newName, phonetic);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldRename", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldRename(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldRename", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldRename(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, newName);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldRename", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomizeField()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CustomizeField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="display">optional object display</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttShowBarSplits(object display)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(display);
			object returnItem = Invoker.MethodReturn(_instance, "GanttShowBarSplits", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GanttShowBarSplits()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttShowBarSplits", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="display">optional object display</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarShowBarSplits(object display)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(display);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarShowBarSplits", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarShowBarSplits()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarShowBarSplits", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		/// <param name="textDelimiter">optional object textDelimiter</param>
		/// <param name="textFileOrigin">optional object textFileOrigin</param>
		/// <param name="useHtmlTemplate">optional object useHtmlTemplate</param>
		/// <param name="templateFile">optional object templateFile</param>
		/// <param name="includeImage">optional object includeImage</param>
		/// <param name="imageFile">optional object imageFile</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData, object textDelimiter, object textFileOrigin, object useHtmlTemplate, object templateFile, object includeImage, object imageFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData, textDelimiter, textFileOrigin, useHtmlTemplate, templateFile, includeImage, imageFile);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		/// <param name="textDelimiter">optional object textDelimiter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData, object textDelimiter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData, textDelimiter);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		/// <param name="textDelimiter">optional object textDelimiter</param>
		/// <param name="textFileOrigin">optional object textFileOrigin</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData, object textDelimiter, object textFileOrigin)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData, textDelimiter, textFileOrigin);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		/// <param name="textDelimiter">optional object textDelimiter</param>
		/// <param name="textFileOrigin">optional object textFileOrigin</param>
		/// <param name="useHtmlTemplate">optional object useHtmlTemplate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData, object textDelimiter, object textFileOrigin, object useHtmlTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData, textDelimiter, textFileOrigin, useHtmlTemplate);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		/// <param name="textDelimiter">optional object textDelimiter</param>
		/// <param name="textFileOrigin">optional object textFileOrigin</param>
		/// <param name="useHtmlTemplate">optional object useHtmlTemplate</param>
		/// <param name="templateFile">optional object templateFile</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData, object textDelimiter, object textFileOrigin, object useHtmlTemplate, object templateFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData, textDelimiter, textFileOrigin, useHtmlTemplate, templateFile);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="dataCategory">optional object dataCategory</param>
		/// <param name="categoryEnabled">optional object categoryEnabled</param>
		/// <param name="tableName">optional object tableName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="externalFieldName">optional object externalFieldName</param>
		/// <param name="exportFilter">optional object exportFilter</param>
		/// <param name="importMethod">optional object importMethod</param>
		/// <param name="mergeKey">optional object mergeKey</param>
		/// <param name="headerRow">optional object headerRow</param>
		/// <param name="assignmentData">optional object assignmentData</param>
		/// <param name="textDelimiter">optional object textDelimiter</param>
		/// <param name="textFileOrigin">optional object textFileOrigin</param>
		/// <param name="useHtmlTemplate">optional object useHtmlTemplate</param>
		/// <param name="templateFile">optional object templateFile</param>
		/// <param name="includeImage">optional object includeImage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MapEdit(object name, object create, object overwriteExisting, object newName, object dataCategory, object categoryEnabled, object tableName, object fieldName, object externalFieldName, object exportFilter, object importMethod, object mergeKey, object headerRow, object assignmentData, object textDelimiter, object textFileOrigin, object useHtmlTemplate, object templateFile, object includeImage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, create, overwriteExisting, newName, dataCategory, categoryEnabled, tableName, fieldName, externalFieldName, exportFilter, importMethod, mergeKey, headerRow, assignmentData, textDelimiter, textFileOrigin, useHtmlTemplate, templateFile, includeImage);
			object returnItem = Invoker.MethodReturn(_instance, "MapEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="right">optional object right</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FillAcross(object right)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(right);
			object returnItem = Invoker.MethodReturn(_instance, "FillAcross", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FillAcross()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FillAcross", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="acceptAll">optional object acceptAll</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinksBetweenProjects(object acceptAll)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(acceptAll);
			object returnItem = Invoker.MethodReturn(_instance, "LinksBetweenProjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LinksBetweenProjects()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LinksBetweenProjects", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToggleAssignments()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleAssignments", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ProgressLines()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ProgressLines", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="allSharers">optional object allSharers</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharingPoolUpdate(object allSharers)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(allSharers);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharingPoolUpdate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharingPoolUpdate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharingPoolUpdate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceSharingPoolRefresh()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceSharingPoolRefresh", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="type">optional object type</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebHelp(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "WebHelp", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WebHelp()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WebHelp", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AddProgressLine()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AddProgressLine", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">optional NetOffice.MSProjectApi.Enums.PjField FieldID = -1</param>
		/// <param name="iMEMode">optional NetOffice.MSProjectApi.Enums.PjIMEMode IMEMode = -1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomizeIMEMode(object fieldID, object iMEMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, iMEMode);
			object returnItem = Invoker.MethodReturn(_instance, "CustomizeIMEMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomizeIMEMode()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CustomizeIMEMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">optional NetOffice.MSProjectApi.Enums.PjField FieldID = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomizeIMEMode(object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomizeIMEMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		/// <param name="formatID">optional object formatID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DeleteFromDatabase(object name, object userID, object databasePassWord, object formatID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, userID, databasePassWord, formatID);
			object returnItem = Invoker.MethodReturn(_instance, "DeleteFromDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DeleteFromDatabase()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DeleteFromDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DeleteFromDatabase(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "DeleteFromDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="userID">optional object userID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DeleteFromDatabase(object name, object userID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, userID);
			object returnItem = Invoker.MethodReturn(_instance, "DeleteFromDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="userID">optional object userID</param>
		/// <param name="databasePassWord">optional object databasePassWord</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DeleteFromDatabase(object name, object userID, object databasePassWord)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, userID, databasePassWord);
			object returnItem = Invoker.MethodReturn(_instance, "DeleteFromDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeRenumber(object all)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeRenumber", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeRenumber()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeRenumber", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="codePrefix">object codePrefix</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjWBSSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="codeGenerate">optional object codeGenerate</param>
		/// <param name="verifyUniqueness">optional object verifyUniqueness</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeMaskEdit(object codePrefix, object level, object sequence, object length, object separator, object codeGenerate, object verifyUniqueness)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(codePrefix, level, sequence, length, separator, codeGenerate, verifyUniqueness);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeMaskEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="codePrefix">object codePrefix</param>
		/// <param name="level">object level</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeMaskEdit(object codePrefix, object level)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(codePrefix, level);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeMaskEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="codePrefix">object codePrefix</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjWBSSequence Sequence = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeMaskEdit(object codePrefix, object level, object sequence)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(codePrefix, level, sequence);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeMaskEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="codePrefix">object codePrefix</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjWBSSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeMaskEdit(object codePrefix, object level, object sequence, object length)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(codePrefix, level, sequence, length);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeMaskEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="codePrefix">object codePrefix</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjWBSSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeMaskEdit(object codePrefix, object level, object sequence, object length, object separator)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(codePrefix, level, sequence, length, separator);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeMaskEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="codePrefix">object codePrefix</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjWBSSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="codeGenerate">optional object codeGenerate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WBSCodeMaskEdit(object codePrefix, object level, object sequence, object length, object separator, object codeGenerate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(codePrefix, level, sequence, length, separator, codeGenerate);
			object returnItem = Invoker.MethodReturn(_instance, "WBSCodeMaskEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		/// <param name="requiredCode">optional object requiredCode</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric, object requiredCode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric, requiredCode);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEdit(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		/// <param name="expandDatabaseTimephasedData">optional object expandDatabaseTimephasedData</param>
		/// <param name="automaticSave">optional object automaticSave</param>
		/// <param name="automaticSaveInterval">optional object automaticSaveInterval</param>
		/// <param name="automaticSaveOptions">optional object automaticSaveOptions</param>
		/// <param name="automaticSavePrompt">optional object automaticSavePrompt</param>
		/// <param name="setDefaultsDatabase">optional object setDefaultsDatabase</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath, object expandDatabaseTimephasedData, object automaticSave, object automaticSaveInterval, object automaticSaveOptions, object automaticSavePrompt, object setDefaultsDatabase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath, expandDatabaseTimephasedData, automaticSave, automaticSaveInterval, automaticSaveOptions, automaticSavePrompt, setDefaultsDatabase);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		/// <param name="expandDatabaseTimephasedData">optional object expandDatabaseTimephasedData</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath, object expandDatabaseTimephasedData)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath, expandDatabaseTimephasedData);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		/// <param name="expandDatabaseTimephasedData">optional object expandDatabaseTimephasedData</param>
		/// <param name="automaticSave">optional object automaticSave</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath, object expandDatabaseTimephasedData, object automaticSave)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath, expandDatabaseTimephasedData, automaticSave);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		/// <param name="expandDatabaseTimephasedData">optional object expandDatabaseTimephasedData</param>
		/// <param name="automaticSave">optional object automaticSave</param>
		/// <param name="automaticSaveInterval">optional object automaticSaveInterval</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath, object expandDatabaseTimephasedData, object automaticSave, object automaticSaveInterval)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath, expandDatabaseTimephasedData, automaticSave, automaticSaveInterval);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		/// <param name="expandDatabaseTimephasedData">optional object expandDatabaseTimephasedData</param>
		/// <param name="automaticSave">optional object automaticSave</param>
		/// <param name="automaticSaveInterval">optional object automaticSaveInterval</param>
		/// <param name="automaticSaveOptions">optional object automaticSaveOptions</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath, object expandDatabaseTimephasedData, object automaticSave, object automaticSaveInterval, object automaticSaveOptions)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath, expandDatabaseTimephasedData, automaticSave, automaticSaveInterval, automaticSaveOptions);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultSaveFormat">optional object defaultSaveFormat</param>
		/// <param name="defaultProjectsPath">optional object defaultProjectsPath</param>
		/// <param name="defaultUserTemplatesPath">optional object defaultUserTemplatesPath</param>
		/// <param name="defaultWorkgroupTemplatesPath">optional object defaultWorkgroupTemplatesPath</param>
		/// <param name="expandDatabaseTimephasedData">optional object expandDatabaseTimephasedData</param>
		/// <param name="automaticSave">optional object automaticSave</param>
		/// <param name="automaticSaveInterval">optional object automaticSaveInterval</param>
		/// <param name="automaticSaveOptions">optional object automaticSaveOptions</param>
		/// <param name="automaticSavePrompt">optional object automaticSavePrompt</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSave(object defaultSaveFormat, object defaultProjectsPath, object defaultUserTemplatesPath, object defaultWorkgroupTemplatesPath, object expandDatabaseTimephasedData, object automaticSave, object automaticSaveInterval, object automaticSaveOptions, object automaticSavePrompt)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultSaveFormat, defaultProjectsPath, defaultUserTemplatesPath, defaultWorkgroupTemplatesPath, expandDatabaseTimephasedData, automaticSave, automaticSaveInterval, automaticSaveOptions, automaticSavePrompt);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSave", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OfficeOnTheWeb()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OfficeOnTheWeb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FixMe()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FixMe", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowWorkAvailability()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowWorkAvailability", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ViewShowUnitAvailability()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewShowUnitAvailability", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		/// <param name="from">optional object from</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineClear(object all, object from)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all, from);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineClear()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BaselineClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="all">optional object all</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BaselineClear(object all)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(all);
			object returnItem = Invoker.MethodReturn(_instance, "BaselineClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Groups()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Groups", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GroupApply(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "GroupApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GroupApply()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GroupApply", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GroupBy()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GroupBy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		/// <param name="code">optional object code</param>
		/// <param name="description">optional object description</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object code, object description)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, code, description);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		/// <param name="code">optional object code</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object code)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, code);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor BackgroundColor = -1</param>
		/// <param name="backgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern BackgroundPattern = -1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxStylesEdit(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor, object backgroundPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor, backgroundPattern);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxStylesEdit(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxStylesEdit(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxStylesEdit(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor BackgroundColor = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxStylesEdit(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor BackgroundColor = -1</param>
		/// <param name="backgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern BackgroundPattern = -1</param>
		/// <param name="reset">optional object reset</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxFormat(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor, object backgroundPattern, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor, backgroundPattern, reset);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxFormat(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxFormat(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxFormat(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor BackgroundColor = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxFormat(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">optional NetOffice.MSProjectApi.Enums.PjColor BorderColor = -1</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor BackgroundColor = -1</param>
		/// <param name="backgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern BackgroundPattern = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxFormat(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor, object backgroundPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor, backgroundPattern);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BarBoxFormat()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BarBoxFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">object serverURL</param>
		/// <param name="name">object name</param>
		/// <param name="authenticationType">optional NetOffice.MSProjectApi.Enums.PjAuthentication AuthenticationType = 0</param>
		/// <param name="accountType">optional NetOffice.MSProjectApi.Enums.PjAccountType AccountType = 0</param>
		/// <param name="showDialog">optional object showDialog</param>
		/// <param name="email">optional object email</param>
		/// <param name="windowsAccount">optional object windowsAccount</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateWebAccount(object serverURL, object name, object authenticationType, object accountType, object showDialog, object email, object windowsAccount)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, name, authenticationType, accountType, showDialog, email, windowsAccount);
			object returnItem = Invoker.MethodReturn(_instance, "CreateWebAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">object serverURL</param>
		/// <param name="name">object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateWebAccount(object serverURL, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, name);
			object returnItem = Invoker.MethodReturn(_instance, "CreateWebAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">object serverURL</param>
		/// <param name="name">object name</param>
		/// <param name="authenticationType">optional NetOffice.MSProjectApi.Enums.PjAuthentication AuthenticationType = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateWebAccount(object serverURL, object name, object authenticationType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, name, authenticationType);
			object returnItem = Invoker.MethodReturn(_instance, "CreateWebAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">object serverURL</param>
		/// <param name="name">object name</param>
		/// <param name="authenticationType">optional NetOffice.MSProjectApi.Enums.PjAuthentication AuthenticationType = 0</param>
		/// <param name="accountType">optional NetOffice.MSProjectApi.Enums.PjAccountType AccountType = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateWebAccount(object serverURL, object name, object authenticationType, object accountType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, name, authenticationType, accountType);
			object returnItem = Invoker.MethodReturn(_instance, "CreateWebAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">object serverURL</param>
		/// <param name="name">object name</param>
		/// <param name="authenticationType">optional NetOffice.MSProjectApi.Enums.PjAuthentication AuthenticationType = 0</param>
		/// <param name="accountType">optional NetOffice.MSProjectApi.Enums.PjAccountType AccountType = 0</param>
		/// <param name="showDialog">optional object showDialog</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateWebAccount(object serverURL, object name, object authenticationType, object accountType, object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, name, authenticationType, accountType, showDialog);
			object returnItem = Invoker.MethodReturn(_instance, "CreateWebAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">object serverURL</param>
		/// <param name="name">object name</param>
		/// <param name="authenticationType">optional NetOffice.MSProjectApi.Enums.PjAuthentication AuthenticationType = 0</param>
		/// <param name="accountType">optional NetOffice.MSProjectApi.Enums.PjAccountType AccountType = 0</param>
		/// <param name="showDialog">optional object showDialog</param>
		/// <param name="email">optional object email</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateWebAccount(object serverURL, object name, object authenticationType, object accountType, object showDialog, object email)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, name, authenticationType, accountType, showDialog, email);
			object returnItem = Invoker.MethodReturn(_instance, "CreateWebAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="action">NetOffice.MSProjectApi.Enums.PjDataTemplate action</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="overwrite">optional object overwrite</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxDataTemplate(string name, NetOffice.MSProjectApi.Enums.PjDataTemplate action, object newName, object overwrite)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, action, newName, overwrite);
			object returnItem = Invoker.MethodReturn(_instance, "BoxDataTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="action">NetOffice.MSProjectApi.Enums.PjDataTemplate action</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxDataTemplate(string name, NetOffice.MSProjectApi.Enums.PjDataTemplate action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, action);
			object returnItem = Invoker.MethodReturn(_instance, "BoxDataTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="action">NetOffice.MSProjectApi.Enums.PjDataTemplate action</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxDataTemplate(string name, NetOffice.MSProjectApi.Enums.PjDataTemplate action, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, action, newName);
			object returnItem = Invoker.MethodReturn(_instance, "BoxDataTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cellRows">optional object cellRows</param>
		/// <param name="cellColumns">optional object cellColumns</param>
		/// <param name="cellWidth">optional object cellWidth</param>
		/// <param name="mergeCells">optional object mergeCells</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellLayout(string name, object cellRows, object cellColumns, object cellWidth, object mergeCells)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cellRows, cellColumns, cellWidth, mergeCells);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellLayout(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cellRows">optional object cellRows</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellLayout(string name, object cellRows)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cellRows);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cellRows">optional object cellRows</param>
		/// <param name="cellColumns">optional object cellColumns</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellLayout(string name, object cellRows, object cellColumns)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cellRows, cellColumns);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cellRows">optional object cellRows</param>
		/// <param name="cellColumns">optional object cellColumns</param>
		/// <param name="cellWidth">optional object cellWidth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellLayout(string name, object cellRows, object cellColumns, object cellWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cellRows, cellColumns, cellWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">optional NetOffice.MSProjectApi.Enums.PjColor FontColor = -1</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		/// <param name="showLabel">object showLabel</param>
		/// <param name="label">object label</param>
		/// <param name="dateFormat">optional NetOffice.MSProjectApi.Enums.PjDateFormat DateFormat = -1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellEdit(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit, object showLabel, object label, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit, showLabel, label, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">optional NetOffice.MSProjectApi.Enums.PjColor FontColor = -1</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellEdit(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">optional NetOffice.MSProjectApi.Enums.PjColor FontColor = -1</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellEdit(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">optional NetOffice.MSProjectApi.Enums.PjColor FontColor = -1</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellEdit(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">optional NetOffice.MSProjectApi.Enums.PjColor FontColor = -1</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		/// <param name="showLabel">object showLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellEdit(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit, object showLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit, showLabel);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">optional NetOffice.MSProjectApi.Enums.PjColor FontColor = -1</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		/// <param name="showLabel">object showLabel</param>
		/// <param name="label">object label</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxCellEdit(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit, object showLabel, object label)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit, showLabel, label);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="showDialog">optional object showDialog</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceWindowsAccount(object name, object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, showDialog);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceWindowsAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceWindowsAccount()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceWindowsAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceWindowsAccount(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceWindowsAccount", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="unit">optional object unit</param>
		/// <param name="rows">optional object rows</param>
		/// <param name="useUniqueID">optional object useUniqueID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetRowHeight(object unit, object rows, object useUniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(unit, rows, useUniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "SetRowHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetRowHeight()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetRowHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="unit">optional object unit</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetRowHeight(object unit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(unit);
			object returnItem = Invoker.MethodReturn(_instance, "SetRowHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="unit">optional object unit</param>
		/// <param name="rows">optional object rows</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetRowHeight(object unit, object rows)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(unit, rows);
			object returnItem = Invoker.MethodReturn(_instance, "SetRowHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ComAddInsDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ComAddInsDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MacroSecurity()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MacroSecurity", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LayoutSelectionNow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LayoutSelectionNow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlign Alignment = -1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxAlign(object alignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alignment);
			object returnItem = Invoker.MethodReturn(_instance, "BoxAlign", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxAlign()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxAlign", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ConvertHangulToHanja()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ConvertHangulToHanja", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="embedProjectFile">optional object embedProjectFile</param>
		/// <param name="onlyRegisterProject">optional object onlyRegisterProject</param>
		/// <param name="waitForCompletion">optional object waitForCompletion</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProjectToWeb(object serverURL, object embedProjectFile, object onlyRegisterProject, object waitForCompletion)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, embedProjectFile, onlyRegisterProject, waitForCompletion);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProjectToWeb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProjectToWeb()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProjectToWeb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">optional object serverURL</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProjectToWeb(object serverURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProjectToWeb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="embedProjectFile">optional object embedProjectFile</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProjectToWeb(object serverURL, object embedProjectFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, embedProjectFile);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProjectToWeb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">optional object serverURL</param>
		/// <param name="embedProjectFile">optional object embedProjectFile</param>
		/// <param name="onlyRegisterProject">optional object onlyRegisterProject</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool UpdateProjectToWeb(object serverURL, object embedProjectFile, object onlyRegisterProject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL, embedProjectFile, onlyRegisterProject);
			object returnItem = Invoker.MethodReturn(_instance, "UpdateProjectToWeb", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		/// <param name="graphicalIndicators">optional object graphicalIndicators</param>
		/// <param name="required">optional object required</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldProperties(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc, object graphicalIndicators, object required)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc, graphicalIndicators, required);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldProperties(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldProperties(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldProperties(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		/// <param name="graphicalIndicators">optional object graphicalIndicators</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldProperties(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc, object graphicalIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc, graphicalIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldProperties", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="formula">optional object formula</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldSetFormula(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object formula)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, formula);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldSetFormula", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldSetFormula(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldSetFormula", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="test">NetOffice.MSProjectApi.Enums.PjComparison test</param>
		/// <param name="value">string value</param>
		/// <param name="indicatorID">NetOffice.MSProjectApi.Enums.PjIndicator indicatorID</param>
		/// <param name="criteriaList">optional NetOffice.MSProjectApi.Enums.PjCriteriaList CriteriaList = 0</param>
		/// <param name="index">optional object index</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicatorAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, NetOffice.MSProjectApi.Enums.PjComparison test, string value, NetOffice.MSProjectApi.Enums.PjIndicator indicatorID, object criteriaList, object index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, test, value, indicatorID, criteriaList, index);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicatorAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="test">NetOffice.MSProjectApi.Enums.PjComparison test</param>
		/// <param name="value">string value</param>
		/// <param name="indicatorID">NetOffice.MSProjectApi.Enums.PjIndicator indicatorID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicatorAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, NetOffice.MSProjectApi.Enums.PjComparison test, string value, NetOffice.MSProjectApi.Enums.PjIndicator indicatorID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, test, value, indicatorID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicatorAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="test">NetOffice.MSProjectApi.Enums.PjComparison test</param>
		/// <param name="value">string value</param>
		/// <param name="indicatorID">NetOffice.MSProjectApi.Enums.PjIndicator indicatorID</param>
		/// <param name="criteriaList">optional NetOffice.MSProjectApi.Enums.PjCriteriaList CriteriaList = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicatorAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, NetOffice.MSProjectApi.Enums.PjComparison test, string value, NetOffice.MSProjectApi.Enums.PjIndicator indicatorID, object criteriaList)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, test, value, indicatorID, criteriaList);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicatorAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="summaryInheritsNonsummary">optional object summaryInheritsNonsummary</param>
		/// <param name="projectInheritsSummary">optional object projectInheritsSummary</param>
		/// <param name="showToolTips">optional object showToolTips</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicators(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object summaryInheritsNonsummary, object projectInheritsSummary, object showToolTips)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, summaryInheritsNonsummary, projectInheritsSummary, showToolTips);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicators", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicators(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicators", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="summaryInheritsNonsummary">optional object summaryInheritsNonsummary</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicators(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object summaryInheritsNonsummary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, summaryInheritsNonsummary);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicators", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="summaryInheritsNonsummary">optional object summaryInheritsNonsummary</param>
		/// <param name="projectInheritsSummary">optional object projectInheritsSummary</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicators(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object summaryInheritsNonsummary, object projectInheritsSummary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, summaryInheritsNonsummary, projectInheritsSummary);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicators", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="index">Int16 index</param>
		/// <param name="criteriaList">optional NetOffice.MSProjectApi.Enums.PjCriteriaList CriteriaList = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicatorDelete(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, Int16 index, object criteriaList)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, index, criteriaList);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicatorDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="index">Int16 index</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldIndicatorDelete(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, Int16 index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, index);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldIndicatorDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="listDefault">object listDefault</param>
		/// <param name="defaultValue">object defaultValue</param>
		/// <param name="restrictToList">object restrictToList</param>
		/// <param name="appendNew">object appendNew</param>
		/// <param name="promptOnNew">object promptOnNew</param>
		/// <param name="displayOrder">optional NetOffice.MSProjectApi.Enums.PjListOrder DisplayOrder = -1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueList(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object listDefault, object defaultValue, object restrictToList, object appendNew, object promptOnNew, object displayOrder)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, listDefault, defaultValue, restrictToList, appendNew, promptOnNew, displayOrder);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="listDefault">object listDefault</param>
		/// <param name="defaultValue">object defaultValue</param>
		/// <param name="restrictToList">object restrictToList</param>
		/// <param name="appendNew">object appendNew</param>
		/// <param name="promptOnNew">object promptOnNew</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueList(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object listDefault, object defaultValue, object restrictToList, object appendNew, object promptOnNew)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, listDefault, defaultValue, restrictToList, appendNew, promptOnNew);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="value">optional object value</param>
		/// <param name="description">optional object description</param>
		/// <param name="phonetic">optional object phonetic</param>
		/// <param name="index">optional object index</param>
		/// <param name="fieldDefault">optional object fieldDefault</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object value, object description, object phonetic, object index, object fieldDefault)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, description, phonetic, index, fieldDefault);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="value">optional object value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="value">optional object value</param>
		/// <param name="description">optional object description</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object value, object description)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, description);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="value">optional object value</param>
		/// <param name="description">optional object description</param>
		/// <param name="phonetic">optional object phonetic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object value, object description, object phonetic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, description, phonetic);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="value">optional object value</param>
		/// <param name="description">optional object description</param>
		/// <param name="phonetic">optional object phonetic</param>
		/// <param name="index">optional object index</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListAdd(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object value, object description, object phonetic, object index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, description, phonetic, index);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListAdd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="index">Int16 index</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldValueListDelete(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, Int16 index)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, index);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldValueListDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor ViewBackgroundColor = -1</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		/// <param name="showProgressMarks">optional object showProgressMarks</param>
		/// <param name="showPageBreaks">optional object showPageBreaks</param>
		/// <param name="showIDOnly">optional object showIDOnly</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern, object showProgressMarks, object showPageBreaks, object showIDOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern, showProgressMarks, showPageBreaks, showIDOnly);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor ViewBackgroundColor = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor ViewBackgroundColor = -1</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor ViewBackgroundColor = -1</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		/// <param name="showProgressMarks">optional object showProgressMarks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern, object showProgressMarks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern, showProgressMarks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">optional NetOffice.MSProjectApi.Enums.PjColor ViewBackgroundColor = -1</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		/// <param name="showProgressMarks">optional object showProgressMarks</param>
		/// <param name="showPageBreaks">optional object showPageBreaks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLayout(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern, object showProgressMarks, object showPageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern, showProgressMarks, showPageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayout", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		/// <param name="colorMode">optional NetOffice.MSProjectApi.Enums.PjLinkColorMode ColorMode = -1</param>
		/// <param name="criticalColor">optional NetOffice.MSProjectApi.Enums.PjColor CriticalColor = 1</param>
		/// <param name="noncriticalColor">optional NetOffice.MSProjectApi.Enums.PjColor NoncriticalColor = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinks(object style, object showArrows, object showLabels, object colorMode, object criticalColor, object noncriticalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels, colorMode, criticalColor, noncriticalColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinks(object style, object showArrows)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinks(object style, object showArrows, object showLabels)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		/// <param name="colorMode">optional NetOffice.MSProjectApi.Enums.PjLinkColorMode ColorMode = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinks(object style, object showArrows, object showLabels, object colorMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels, colorMode);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		/// <param name="colorMode">optional NetOffice.MSProjectApi.Enums.PjLinkColorMode ColorMode = -1</param>
		/// <param name="criticalColor">optional NetOffice.MSProjectApi.Enums.PjColor CriticalColor = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinks(object style, object showArrows, object showLabels, object colorMode, object criticalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels, colorMode, criticalColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SummaryTasksShow(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "SummaryTasksShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SummaryTasksShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SummaryTasksShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxProgressMarksShow(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "BoxProgressMarksShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxProgressMarksShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxProgressMarksShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinkLabelsShow(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinkLabelsShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinkLabelsShow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinkLabelsShow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="straightLinks">optional object straightLinks</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinkStyleToggle(object straightLinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(straightLinks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinkStyleToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxLinkStyleToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinkStyleToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LayoutRelatedNow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LayoutRelatedNow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional NetOffice.MSProjectApi.Enums.PjBoxSet Action = 4</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxSet(object action, object taskID, object xPosition, object yPosition, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, taskID, xPosition, yPosition, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "BoxSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxSet()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "BoxSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional NetOffice.MSProjectApi.Enums.PjBoxSet Action = 4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxSet(object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action);
			object returnItem = Invoker.MethodReturn(_instance, "BoxSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional NetOffice.MSProjectApi.Enums.PjBoxSet Action = 4</param>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxSet(object action, object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, taskID);
			object returnItem = Invoker.MethodReturn(_instance, "BoxSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional NetOffice.MSProjectApi.Enums.PjBoxSet Action = 4</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="xPosition">optional object xPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxSet(object action, object taskID, object xPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, taskID, xPosition);
			object returnItem = Invoker.MethodReturn(_instance, "BoxSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="action">optional NetOffice.MSProjectApi.Enums.PjBoxSet Action = 4</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="xPosition">optional object xPosition</param>
		/// <param name="yPosition">optional object yPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool BoxSet(object action, object taskID, object xPosition, object yPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action, taskID, xPosition, yPosition);
			object returnItem = Invoker.MethodReturn(_instance, "BoxSet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showColumns">optional object showColumns</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetSplitBar(object showColumns)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showColumns);
			object returnItem = Invoker.MethodReturn(_instance, "SetSplitBar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetSplitBar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetSplitBar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="titleHeight">optional object titleHeight</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTitleRowHeight(object titleHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(titleHeight);
			object returnItem = Invoker.MethodReturn(_instance, "SetTitleRowHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SetTitleRowHeight()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetTitleRowHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="goalArea">Int16 goalArea</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool GoalAreaChange(Int16 goalArea)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(goalArea);
			object returnItem = Invoker.MethodReturn(_instance, "GoalAreaChange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SidepaneToggle(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "SidepaneToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SidepaneToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SidepaneToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SearchFiles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SearchFiles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ImportOutlookTasks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ImportOutlookTasks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		/// <param name="projectGuideContent">optional object projectGuideContent</param>
		/// <param name="setAsDefaults">optional object setAsDefaults</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent, object projectGuideContent, object setAsDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent, projectGuideContent, setAsDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		/// <param name="projectGuideContent">optional object projectGuideContent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterface(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent, object projectGuideContent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent, projectGuideContent);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterface", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="iD">Int16 iD</param>
		/// <param name="isGoalArea">optional object isGoalArea</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SidepaneTaskChange(Int16 iD, object isGoalArea)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(iD, isGoalArea);
			object returnItem = Invoker.MethodReturn(_instance, "SidepaneTaskChange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="iD">Int16 iD</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SidepaneTaskChange(Int16 iD)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(iD);
			object returnItem = Invoker.MethodReturn(_instance, "SidepaneTaskChange", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="serverURL">optional object serverURL</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ImportResourceList(object serverURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(serverURL);
			object returnItem = Invoker.MethodReturn(_instance, "ImportResourceList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ImportResourceList()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ImportResourceList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		/// <param name="freezeHorizonDate">optional object freezeHorizonDate</param>
		/// <param name="updateProjects">optional object updateProjects</param>
		/// <param name="saveReport">optional object saveReport</param>
		/// <param name="path">optional object path</param>
		/// <param name="assignProposedResources">optional object assignProposedResources</param>
		/// <param name="levelProposedBookings">optional object levelProposedBookings</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList, object freezeHorizonDate, object updateProjects, object saveReport, object path, object assignProposedResources, object levelProposedBookings)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList, freezeHorizonDate, updateProjects, saveReport, path, assignProposedResources, levelProposedBookings);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		/// <param name="freezeHorizonDate">optional object freezeHorizonDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList, object freezeHorizonDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList, freezeHorizonDate);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		/// <param name="freezeHorizonDate">optional object freezeHorizonDate</param>
		/// <param name="updateProjects">optional object updateProjects</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList, object freezeHorizonDate, object updateProjects)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList, freezeHorizonDate, updateProjects);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		/// <param name="freezeHorizonDate">optional object freezeHorizonDate</param>
		/// <param name="updateProjects">optional object updateProjects</param>
		/// <param name="saveReport">optional object saveReport</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList, object freezeHorizonDate, object updateProjects, object saveReport)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList, freezeHorizonDate, updateProjects, saveReport);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		/// <param name="freezeHorizonDate">optional object freezeHorizonDate</param>
		/// <param name="updateProjects">optional object updateProjects</param>
		/// <param name="saveReport">optional object saveReport</param>
		/// <param name="path">optional object path</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList, object freezeHorizonDate, object updateProjects, object saveReport, object path)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList, freezeHorizonDate, updateProjects, saveReport, path);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectList">object projectList</param>
		/// <param name="poolOption">optional NetOffice.MSProjectApi.Enums.PjResSubstitutionPoolOption PoolOption = 0</param>
		/// <param name="rBSorResourceList">optional object rBSorResourceList</param>
		/// <param name="freezeHorizonDate">optional object freezeHorizonDate</param>
		/// <param name="updateProjects">optional object updateProjects</param>
		/// <param name="saveReport">optional object saveReport</param>
		/// <param name="path">optional object path</param>
		/// <param name="assignProposedResources">optional object assignProposedResources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResSubstitutionWizard(object projectList, object poolOption, object rBSorResourceList, object freezeHorizonDate, object updateProjects, object saveReport, object path, object assignProposedResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectList, poolOption, rBSorResourceList, freezeHorizonDate, updateProjects, saveReport, path, assignProposedResources);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResSubstitutionWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="eUID">object eUID</param>
		/// <param name="openType">optional NetOffice.MSProjectApi.Enums.PjCheckOutType OpenType = 1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesOpen(object eUID, object openType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(eUID, openType);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="eUID">object eUID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesOpen(object eUID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(eUID);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesOpen", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="localRUIDs">optional object localRUIDs</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesImport(object localRUIDs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(localRUIDs);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesImport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesImport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesImport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="eUID">optional object eUID</param>
		/// <param name="rUID">optional object rUID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourceGet(object eUID, object rUID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(eUID, rUID);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourceGet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourceGet()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourceGet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="eUID">optional object eUID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourceGet(object eUID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(eUID);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourceGet", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseProjectImportWizard(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseProjectImportWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseProjectImportWizard()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseProjectImportWizard", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseTeamBuilder()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseTeamBuilder", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="linkFrom">Int32 linkFrom</param>
		/// <param name="linkTo">optional object linkTo</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseCustomOutlineCodeShare(Int32 linkFrom, object linkTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(linkFrom, linkTo);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseCustomOutlineCodeShare", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="linkFrom">Int32 linkFrom</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseCustomOutlineCodeShare(Int32 linkFrom)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(linkFrom);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseCustomOutlineCodeShare", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseCustomizeFields()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseCustomizeFields", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseGlobalCheckOut()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseGlobalCheckOut", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseProjectProfiles()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseProjectProfiles", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceListOptions">object showResourceListOptions</param>
		/// <param name="resourceListFields">optional NetOffice.MSProjectApi.Enums.PjAssignResourcesListFields ResourceListFields = 2</param>
		/// <param name="useNamedFilter">optional object useNamedFilter</param>
		/// <param name="filterName">optional object filterName</param>
		/// <param name="useAvailableToWorkFilter">optional object useAvailableToWorkFilter</param>
		/// <param name="availableToWork">optional object availableToWork</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignmentDialog(object showResourceListOptions, object resourceListFields, object useNamedFilter, object filterName, object useAvailableToWorkFilter, object availableToWork)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceListOptions, resourceListFields, useNamedFilter, filterName, useAvailableToWorkFilter, availableToWork);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignmentDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceListOptions">object showResourceListOptions</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignmentDialog(object showResourceListOptions)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceListOptions);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignmentDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceListOptions">object showResourceListOptions</param>
		/// <param name="resourceListFields">optional NetOffice.MSProjectApi.Enums.PjAssignResourcesListFields ResourceListFields = 2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignmentDialog(object showResourceListOptions, object resourceListFields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceListOptions, resourceListFields);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignmentDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceListOptions">object showResourceListOptions</param>
		/// <param name="resourceListFields">optional NetOffice.MSProjectApi.Enums.PjAssignResourcesListFields ResourceListFields = 2</param>
		/// <param name="useNamedFilter">optional object useNamedFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignmentDialog(object showResourceListOptions, object resourceListFields, object useNamedFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceListOptions, resourceListFields, useNamedFilter);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignmentDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceListOptions">object showResourceListOptions</param>
		/// <param name="resourceListFields">optional NetOffice.MSProjectApi.Enums.PjAssignResourcesListFields ResourceListFields = 2</param>
		/// <param name="useNamedFilter">optional object useNamedFilter</param>
		/// <param name="filterName">optional object filterName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignmentDialog(object showResourceListOptions, object resourceListFields, object useNamedFilter, object filterName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceListOptions, resourceListFields, useNamedFilter, filterName);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignmentDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceListOptions">object showResourceListOptions</param>
		/// <param name="resourceListFields">optional NetOffice.MSProjectApi.Enums.PjAssignResourcesListFields ResourceListFields = 2</param>
		/// <param name="useNamedFilter">optional object useNamedFilter</param>
		/// <param name="filterName">optional object filterName</param>
		/// <param name="useAvailableToWorkFilter">optional object useAvailableToWorkFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceAssignmentDialog(object showResourceListOptions, object resourceListFields, object useNamedFilter, object filterName, object useAvailableToWorkFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceListOptions, resourceListFields, useNamedFilter, filterName, useAvailableToWorkFilter);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceAssignmentDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		/// <param name="wrapperPage">optional object wrapperPage</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebBrowserControl(string targetPage, object wrapperPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage, wrapperPage);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebBrowserControl", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebBrowserControl(string targetPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebBrowserControl", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveOffline(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveOffline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileSaveOffline()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileSaveOffline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpReference()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpReference", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool HelpWhatsNew()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HelpWhatsNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool StopWebBrowserControlNavigation()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "StopWebBrowserControlNavigation", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="backupFileName">optional object backupFileName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseGlobalBackup(object backupFileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(backupFileName);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseGlobalBackup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseGlobalBackup()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseGlobalBackup", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="profileName">optional object profileName</param>
		/// <param name="restoreFileName">optional object restoreFileName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseGlobalRestore(object profileName, object restoreFileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(profileName, restoreFileName);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseGlobalRestore", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseGlobalRestore()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseGlobalRestore", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="profileName">optional object profileName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseGlobalRestore(object profileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(profileName);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseGlobalRestore", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjSpellingField FieldName = -1</param>
		/// <param name="enableSpellCheck">optional object enableSpellCheck</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SpellCheckField(object fieldName, object enableSpellCheck)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, enableSpellCheck);
			object returnItem = Invoker.MethodReturn(_instance, "SpellCheckField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SpellCheckField()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SpellCheckField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjSpellingField FieldName = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SpellCheckField(object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "SpellCheckField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool AddResourcesFromProjectServer()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AddResourcesFromProjectServer", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResetTrackingMethod()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResetTrackingMethod", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ServiceOptionsDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ServiceOptionsDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseProjectDelete(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseProjectDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseProjectDelete()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseProjectDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fSaveChanges">optional object fSaveChanges</param>
		/// <param name="comments">optional object comments</param>
		/// <param name="fMakePublic">optional object fMakePublic</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckIn(object fSaveChanges, object comments, object fMakePublic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fSaveChanges, comments, fMakePublic);
			object returnItem = Invoker.MethodReturn(_instance, "CheckIn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckIn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CheckIn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fSaveChanges">optional object fSaveChanges</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckIn(object fSaveChanges)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fSaveChanges);
			object returnItem = Invoker.MethodReturn(_instance, "CheckIn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fSaveChanges">optional object fSaveChanges</param>
		/// <param name="comments">optional object comments</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckIn(object fSaveChanges, object comments)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fSaveChanges, comments);
			object returnItem = Invoker.MethodReturn(_instance, "CheckIn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckOut()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CheckOut", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DocumentLibraryVersionsDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DocumentLibraryVersionsDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DisplaySharedWorkspace()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DisplaySharedWorkspace", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseSynchActuals(object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseSynchActuals", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseSynchActuals()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseSynchActuals", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="removeFileProperties">optional object removeFileProperties</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSecurity(object removeFileProperties)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(removeFileProperties);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurity", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSecurity()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurity", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SaveSheetSelection()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SaveSheetSelection", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool RestoreSheetSelection()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RestoreSheetSelection", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="field">Int32 field</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldDelete(Int32 field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldDelete", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="commitmentDate">optional object commitmentDate</param>
		/// <param name="commitmentGuid">optional object commitmentGuid</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ImportCommitment(object commitmentDate, object commitmentGuid)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(commitmentDate, commitmentGuid);
			object returnItem = Invoker.MethodReturn(_instance, "ImportCommitment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ImportCommitment()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ImportCommitment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="commitmentDate">optional object commitmentDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ImportCommitment(object commitmentDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(commitmentDate);
			object returnItem = Invoker.MethodReturn(_instance, "ImportCommitment", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SummaryResourceAssignmentsRefresh()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SummaryResourceAssignmentsRefresh", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="uniqueID">optional object uniqueID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditEnterpriseCalendar(object uniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(uniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "EditEnterpriseCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditEnterpriseCalendar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditEnterpriseCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CreateEnterpriseCalendar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CreateEnterpriseCalendar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		/// <param name="wrapperPage">optional object wrapperPage</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebPaneControl(string targetPage, object wrapperPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage, wrapperPage);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebPaneControl", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebPaneControl(string targetPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebPaneControl", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ResourceMappingDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceMappingDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="oldName">optional object oldName</param>
		/// <param name="newName">optional object newName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeLocalCalendarEnterprise(object oldName, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(oldName, newName);
			object returnItem = Invoker.MethodReturn(_instance, "MakeLocalCalendarEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeLocalCalendarEnterprise()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MakeLocalCalendarEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="oldName">optional object oldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeLocalCalendarEnterprise(object oldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(oldName);
			object returnItem = Invoker.MethodReturn(_instance, "MakeLocalCalendarEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskCustomFields">optional object taskCustomFields</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldMappingDialog(object taskCustomFields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskCustomFields);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldMappingDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldMappingDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldMappingDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckTaskErrors(object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "CheckTaskErrors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckTaskErrors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CheckTaskErrors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="localRUID">optional object localRUID</param>
		/// <param name="resetImport">optional object resetImport</param>
		/// <param name="checkEnterprise">optional object checkEnterprise</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckResourceErrors(object localRUID, object resetImport, object checkEnterprise)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(localRUID, resetImport, checkEnterprise);
			object returnItem = Invoker.MethodReturn(_instance, "CheckResourceErrors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckResourceErrors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CheckResourceErrors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="localRUID">optional object localRUID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckResourceErrors(object localRUID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(localRUID);
			object returnItem = Invoker.MethodReturn(_instance, "CheckResourceErrors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="localRUID">optional object localRUID</param>
		/// <param name="resetImport">optional object resetImport</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CheckResourceErrors(object localRUID, object resetImport)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(localRUID, resetImport);
			object returnItem = Invoker.MethodReturn(_instance, "CheckResourceErrors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EditRedo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EditRedo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="republish">optional object republish</param>
		/// <param name="wssUrl">optional object wssUrl</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Publish(object republish, object wssUrl)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(republish, wssUrl);
			object returnItem = Invoker.MethodReturn(_instance, "Publish", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Publish()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Publish", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="republish">optional object republish</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Publish(object republish)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(republish);
			object returnItem = Invoker.MethodReturn(_instance, "Publish", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="lookupTableName">optional object lookupTableName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeFieldEnterprise(object fieldID, object fieldName, object lookupTableName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, fieldName, lookupTableName);
			object returnItem = Invoker.MethodReturn(_instance, "MakeFieldEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeFieldEnterprise()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "MakeFieldEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">optional object fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeFieldEnterprise(object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "MakeFieldEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="fieldName">optional object fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool MakeFieldEnterprise(object fieldID, object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "MakeFieldEnterprise", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fileName">optional object fileName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SaveForSharing(object fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName);
			object returnItem = Invoker.MethodReturn(_instance, "SaveForSharing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool SaveForSharing()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SaveForSharing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CacheSettings()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CacheSettings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CleanupCache()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CleanupCache", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CacheStatus()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CacheStatus", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fOffline">optional object fOffline</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WorkOffline(object fOffline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fOffline);
			object returnItem = Invoker.MethodReturn(_instance, "WorkOffline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool WorkOffline()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WorkOffline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TaskDrivers()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskDrivers", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ToggleChangeHighlighting()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleChangeHighlighting", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="pjVisualReportsTab">optional NetOffice.MSProjectApi.Enums.PjVisualReportsTab PjVisualReportsTab = 0</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReports(object pjVisualReportsTab)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pjVisualReportsTab);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReports", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReports()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "VisualReports", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strNamePath">object strNamePath</param>
		/// <param name="pjVisualReportsDataLevel">optional NetOffice.MSProjectApi.Enums.PjVisualReportsDataLevel PjVisualReportsDataLevel = 5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsSaveDatabase(object strNamePath, object pjVisualReportsDataLevel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strNamePath, pjVisualReportsDataLevel);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsSaveDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strNamePath">object strNamePath</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsSaveDatabase(object strNamePath)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strNamePath);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsSaveDatabase", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strNamePath">object strNamePath</param>
		/// <param name="pjVisualReportsCubeType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsCubeType PjVisualReportsCubeType = 1</param>
		/// <param name="reportAllFields">object reportAllFields</param>
		/// <param name="pjVisualReportsDataLevel">optional NetOffice.MSProjectApi.Enums.PjVisualReportsDataLevel PjVisualReportsDataLevel = 5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsSaveCube(object strNamePath, object pjVisualReportsCubeType, object reportAllFields, object pjVisualReportsDataLevel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strNamePath, pjVisualReportsCubeType, reportAllFields, pjVisualReportsDataLevel);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsSaveCube", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strNamePath">object strNamePath</param>
		/// <param name="pjVisualReportsCubeType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsCubeType PjVisualReportsCubeType = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsSaveCube(object strNamePath, object pjVisualReportsCubeType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strNamePath, pjVisualReportsCubeType);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsSaveCube", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strNamePath">object strNamePath</param>
		/// <param name="pjVisualReportsCubeType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsCubeType PjVisualReportsCubeType = 1</param>
		/// <param name="reportAllFields">object reportAllFields</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsSaveCube(object strNamePath, object pjVisualReportsCubeType, object reportAllFields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strNamePath, pjVisualReportsCubeType, reportAllFields);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsSaveCube", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="pjVisualReportsTemplateType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsTemplateType PjVisualReportsTemplateType = 1</param>
		/// <param name="pjVisualReportsCubeType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsCubeType PjVisualReportsCubeType = 1</param>
		/// <param name="reportAllFields">object reportAllFields</param>
		/// <param name="pjVisualReportsDataLevel">optional NetOffice.MSProjectApi.Enums.PjVisualReportsDataLevel PjVisualReportsDataLevel = 5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsNewTemplate(object pjVisualReportsTemplateType, object pjVisualReportsCubeType, object reportAllFields, object pjVisualReportsDataLevel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pjVisualReportsTemplateType, pjVisualReportsCubeType, reportAllFields, pjVisualReportsDataLevel);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsNewTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="pjVisualReportsTemplateType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsTemplateType PjVisualReportsTemplateType = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsNewTemplate(object pjVisualReportsTemplateType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pjVisualReportsTemplateType);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsNewTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="pjVisualReportsTemplateType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsTemplateType PjVisualReportsTemplateType = 1</param>
		/// <param name="pjVisualReportsCubeType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsCubeType PjVisualReportsCubeType = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsNewTemplate(object pjVisualReportsTemplateType, object pjVisualReportsCubeType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pjVisualReportsTemplateType, pjVisualReportsCubeType);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsNewTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="pjVisualReportsTemplateType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsTemplateType PjVisualReportsTemplateType = 1</param>
		/// <param name="pjVisualReportsCubeType">optional NetOffice.MSProjectApi.Enums.PjVisualReportsCubeType PjVisualReportsCubeType = 1</param>
		/// <param name="reportAllFields">object reportAllFields</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsNewTemplate(object pjVisualReportsTemplateType, object pjVisualReportsCubeType, object reportAllFields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pjVisualReportsTemplateType, pjVisualReportsCubeType, reportAllFields);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsNewTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strVisualReportTemplateFile">object strVisualReportTemplateFile</param>
		/// <param name="pjVisualReportsDataLevel">optional NetOffice.MSProjectApi.Enums.PjVisualReportsDataLevel PjVisualReportsDataLevel = 5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsView(object strVisualReportTemplateFile, object pjVisualReportsDataLevel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strVisualReportTemplateFile, pjVisualReportsDataLevel);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strVisualReportTemplateFile">object strVisualReportTemplateFile</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsView(object strVisualReportTemplateFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strVisualReportTemplateFile);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsView", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CommitmentsPane()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CommitmentsPane", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool DependenciesPane()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DependenciesPane", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strVisualReportTemplateFile">object strVisualReportTemplateFile</param>
		/// <param name="pjVisualReportsDataLevel">optional NetOffice.MSProjectApi.Enums.PjVisualReportsDataLevel PjVisualReportsDataLevel = 5</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsEdit(object strVisualReportTemplateFile, object pjVisualReportsDataLevel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strVisualReportTemplateFile, pjVisualReportsDataLevel);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="strVisualReportTemplateFile">object strVisualReportTemplateFile</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool VisualReportsEdit(object strVisualReportTemplateFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strVisualReportTemplateFile);
			object returnItem = Invoker.MethodReturn(_instance, "VisualReportsEdit", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="ignoreReadOnlyRecommended">optional object ignoreReadOnlyRecommended</param>
		/// <param name="xMLName">optional object xMLName</param>
		/// <param name="doNotLoadFromEnterprise">optional object doNotLoadFromEnterprise</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword, object ignoreReadOnlyRecommended, object xMLName, object doNotLoadFromEnterprise)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword, ignoreReadOnlyRecommended, xMLName, doNotLoadFromEnterprise);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="ignoreReadOnlyRecommended">optional object ignoreReadOnlyRecommended</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword, object ignoreReadOnlyRecommended)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword, ignoreReadOnlyRecommended);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="readOnly">object readOnly</param>
		/// <param name="merge">object merge</param>
		/// <param name="taskInformation">object taskInformation</param>
		/// <param name="table">object table</param>
		/// <param name="sheet">object sheet</param>
		/// <param name="noAuto">object noAuto</param>
		/// <param name="userID">object userID</param>
		/// <param name="databasePassWord">object databasePassWord</param>
		/// <param name="formatID">object formatID</param>
		/// <param name="map">object map</param>
		/// <param name="openPool">optional NetOffice.MSProjectApi.Enums.PjPoolOpen openPool = 0</param>
		/// <param name="password">optional object password</param>
		/// <param name="writeResPassword">optional object writeResPassword</param>
		/// <param name="ignoreReadOnlyRecommended">optional object ignoreReadOnlyRecommended</param>
		/// <param name="xMLName">optional object xMLName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileOpenEx(object name, object readOnly, object merge, object taskInformation, object table, object sheet, object noAuto, object userID, object databasePassWord, object formatID, object map, object openPool, object password, object writeResPassword, object ignoreReadOnlyRecommended, object xMLName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, readOnly, merge, taskInformation, table, sheet, noAuto, userID, databasePassWord, formatID, map, openPool, password, writeResPassword, ignoreReadOnlyRecommended, xMLName);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		/// <param name="noAuto">optional object noAuto</param>
		/// <param name="checkIn">optional object checkIn</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseEx(object save, object noAuto, object checkIn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save, noAuto, checkIn);
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseEx(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		/// <param name="noAuto">optional object noAuto</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseEx(object save, object noAuto)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save, noAuto);
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		/// <param name="checkIn">optional object checkIn</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseAllEx(object save, object checkIn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save, checkIn);
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseAllEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseAllEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseAllEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="save">optional NetOffice.MSProjectApi.Enums.PjSaveType Save = 2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FileCloseAllEx(object save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(save);
			object returnItem = Invoker.MethodReturn(_instance, "FileCloseAllEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		/// <param name="fontConversion">optional object fontConversion</param>
		/// <param name="showStartupWorkpane">optional object showStartupWorkpane</param>
		/// <param name="maxUndoRecords">optional object maxUndoRecords</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum, object fontConversion, object showStartupWorkpane, object maxUndoRecords)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum, fontConversion, showStartupWorkpane, maxUndoRecords);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		/// <param name="fontConversion">optional object fontConversion</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum, object fontConversion)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum, fontConversion);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="planningWizard">optional object planningWizard</param>
		/// <param name="wizardUsage">optional object wizardUsage</param>
		/// <param name="wizardErrors">optional object wizardErrors</param>
		/// <param name="wizardScheduling">optional object wizardScheduling</param>
		/// <param name="showTipOfDay">optional object showTipOfDay</param>
		/// <param name="autoAddResources">optional object autoAddResources</param>
		/// <param name="standardRate">optional object standardRate</param>
		/// <param name="overtimeRate">optional object overtimeRate</param>
		/// <param name="lastFile">optional object lastFile</param>
		/// <param name="summaryInfo">optional object summaryInfo</param>
		/// <param name="userName">optional object userName</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="showWelcome">optional object showWelcome</param>
		/// <param name="autoFilter">optional object autoFilter</param>
		/// <param name="macroVirusProtection">optional object macroVirusProtection</param>
		/// <param name="displayRecentFiles">optional object displayRecentFiles</param>
		/// <param name="recentFilesMaximum">optional object recentFilesMaximum</param>
		/// <param name="fontConversion">optional object fontConversion</param>
		/// <param name="showStartupWorkpane">optional object showStartupWorkpane</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsGeneralEx(object planningWizard, object wizardUsage, object wizardErrors, object wizardScheduling, object showTipOfDay, object autoAddResources, object standardRate, object overtimeRate, object lastFile, object summaryInfo, object userName, object setDefaults, object showWelcome, object autoFilter, object macroVirusProtection, object displayRecentFiles, object recentFilesMaximum, object fontConversion, object showStartupWorkpane)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(planningWizard, wizardUsage, wizardErrors, wizardScheduling, showTipOfDay, autoAddResources, standardRate, overtimeRate, lastFile, summaryInfo, userName, setDefaults, showWelcome, autoFilter, macroVirusProtection, displayRecentFiles, recentFilesMaximum, fontConversion, showStartupWorkpane);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsGeneralEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		/// <param name="displayWindowsInTaskbar">optional object displayWindowsInTaskbar</param>
		/// <param name="displayScreentips">optional object displayScreentips</param>
		/// <param name="calendarType">optional object calendarType</param>
		/// <param name="use3DLook">optional object use3DLook</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData, object displayWindowsInTaskbar, object displayScreentips, object calendarType, object use3DLook)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData, displayWindowsInTaskbar, displayScreentips, calendarType, use3DLook);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		/// <param name="displayWindowsInTaskbar">optional object displayWindowsInTaskbar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData, object displayWindowsInTaskbar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData, displayWindowsInTaskbar);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		/// <param name="displayWindowsInTaskbar">optional object displayWindowsInTaskbar</param>
		/// <param name="displayScreentips">optional object displayScreentips</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData, object displayWindowsInTaskbar, object displayScreentips)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData, displayWindowsInTaskbar, displayScreentips);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="defaultView">optional object defaultView</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="projectSummary">optional object projectSummary</param>
		/// <param name="displayStatusBar">optional object displayStatusBar</param>
		/// <param name="displayEntryBar">optional object displayEntryBar</param>
		/// <param name="displayScrollBars">optional object displayScrollBars</param>
		/// <param name="currencySymbol">optional object currencySymbol</param>
		/// <param name="symbolPlacement">optional object symbolPlacement</param>
		/// <param name="currencyDigits">optional object currencyDigits</param>
		/// <param name="projectCurrency">optional object projectCurrency</param>
		/// <param name="displayOutlineNumber">optional object displayOutlineNumber</param>
		/// <param name="displayOutlineSymbols">optional object displayOutlineSymbols</param>
		/// <param name="displayNameIndent">optional object displayNameIndent</param>
		/// <param name="displaySummaryTasks">optional object displaySummaryTasks</param>
		/// <param name="displayOLEIndicator">optional object displayOLEIndicator</param>
		/// <param name="displayExternalSuccessors">optional object displayExternalSuccessors</param>
		/// <param name="displayExternalPredecessors">optional object displayExternalPredecessors</param>
		/// <param name="crossProjectLinksInfo">optional object crossProjectLinksInfo</param>
		/// <param name="acceptNewExternalData">optional object acceptNewExternalData</param>
		/// <param name="displayWindowsInTaskbar">optional object displayWindowsInTaskbar</param>
		/// <param name="displayScreentips">optional object displayScreentips</param>
		/// <param name="calendarType">optional object calendarType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsViewEx(object defaultView, object dateFormat, object projectSummary, object displayStatusBar, object displayEntryBar, object displayScrollBars, object currencySymbol, object symbolPlacement, object currencyDigits, object projectCurrency, object displayOutlineNumber, object displayOutlineSymbols, object displayNameIndent, object displaySummaryTasks, object displayOLEIndicator, object displayExternalSuccessors, object displayExternalPredecessors, object crossProjectLinksInfo, object acceptNewExternalData, object displayWindowsInTaskbar, object displayScreentips, object calendarType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultView, dateFormat, projectSummary, displayStatusBar, displayEntryBar, displayScrollBars, currencySymbol, symbolPlacement, currencyDigits, projectCurrency, displayOutlineNumber, displayOutlineSymbols, displayNameIndent, displaySummaryTasks, displayOLEIndicator, displayExternalSuccessors, displayExternalPredecessors, crossProjectLinksInfo, acceptNewExternalData, displayWindowsInTaskbar, displayScreentips, calendarType);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsViewEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="calendarName">optional object calendarName</param>
		/// <param name="locked">optional object locked</param>
		/// <param name="selectedDate">optional object selectedDate</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTimeEx(object calendarName, object locked, object selectedDate, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(calendarName, locked, selectedDate, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTimeEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTimeEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTimeEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="calendarName">optional object calendarName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTimeEx(object calendarName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(calendarName);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTimeEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="calendarName">optional object calendarName</param>
		/// <param name="locked">optional object locked</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTimeEx(object calendarName, object locked)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(calendarName, locked);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTimeEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="calendarName">optional object calendarName</param>
		/// <param name="locked">optional object locked</param>
		/// <param name="selectedDate">optional object selectedDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool ChangeWorkingTimeEx(object calendarName, object locked, object selectedDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(calendarName, locked, selectedDate);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeWorkingTimeEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool TextStylesEx(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor);
			object returnItem = Invoker.MethodReturn(_instance, "TextStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold, object italic, object underline, object color, object reset, object cellColor, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset, cellColor, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold, object italic, object underline, object color, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="cellColor">optional object cellColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool FontEx(object name, object size, object bold, object italic, object underline, object color, object reset, object cellColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset, cellColor);
			object returnItem = Invoker.MethodReturn(_instance, "FontEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		/// <param name="showPreview">optional object showPreview</param>
		/// <param name="daysPerWeek">optional object daysPerWeek</param>
		/// <param name="showTitleBeginningEndDates">optional object showTitleBeginningEndDates</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx(object monthTitle, object weekTitle, object dayTitle, object showPreview, object daysPerWeek, object showTitleBeginningEndDates)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle, showPreview, daysPerWeek, showTitleBeginningEndDates);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx(object monthTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx(object monthTitle, object weekTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx(object monthTitle, object weekTitle, object dayTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		/// <param name="showPreview">optional object showPreview</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx(object monthTitle, object weekTitle, object dayTitle, object showPreview)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle, showPreview);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="monthTitle">optional object monthTitle</param>
		/// <param name="weekTitle">optional object weekTitle</param>
		/// <param name="dayTitle">optional object dayTitle</param>
		/// <param name="showPreview">optional object showPreview</param>
		/// <param name="daysPerWeek">optional object daysPerWeek</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CalendarWeekHeadingsEx(object monthTitle, object weekTitle, object dayTitle, object showPreview, object daysPerWeek)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(monthTitle, weekTitle, dayTitle, showPreview, daysPerWeek);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarWeekHeadingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		/// <param name="requiredCode">optional object requiredCode</param>
		/// <param name="lookupDefault">optional object lookupDefault</param>
		/// <param name="defaultValue">optional object defaultValue</param>
		/// <param name="sortOrder">optional object sortOrder</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric, object requiredCode, object lookupDefault, object defaultValue, object sortOrder)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric, requiredCode, lookupDefault, defaultValue, sortOrder);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		/// <param name="requiredCode">optional object requiredCode</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric, object requiredCode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric, requiredCode);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		/// <param name="requiredCode">optional object requiredCode</param>
		/// <param name="lookupDefault">optional object lookupDefault</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric, object requiredCode, object lookupDefault)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric, requiredCode, lookupDefault);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">object level</param>
		/// <param name="sequence">optional NetOffice.MSProjectApi.Enums.PjCustomOutlineCodeSequence Sequence = -1</param>
		/// <param name="length">optional object length</param>
		/// <param name="separator">optional object separator</param>
		/// <param name="onlyLookUpTableCodes">optional object onlyLookUpTableCodes</param>
		/// <param name="onlyCompleteCodes">optional object onlyCompleteCodes</param>
		/// <param name="lookupTableLink">optional object lookupTableLink</param>
		/// <param name="onlyLeaves">optional object onlyLeaves</param>
		/// <param name="matchGeneric">optional object matchGeneric</param>
		/// <param name="requiredCode">optional object requiredCode</param>
		/// <param name="lookupDefault">optional object lookupDefault</param>
		/// <param name="defaultValue">optional object defaultValue</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomOutlineCodeEditEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object sequence, object length, object separator, object onlyLookUpTableCodes, object onlyCompleteCodes, object lookupTableLink, object onlyLeaves, object matchGeneric, object requiredCode, object lookupDefault, object defaultValue)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, sequence, length, separator, onlyLookUpTableCodes, onlyCompleteCodes, lookupTableLink, onlyLeaves, matchGeneric, requiredCode, lookupDefault, defaultValue);
			object returnItem = Invoker.MethodReturn(_instance, "CustomOutlineCodeEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		/// <param name="code">optional object code</param>
		/// <param name="description">optional object description</param>
		/// <param name="phonetic">optional object phonetic</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAddEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object code, object description, object phonetic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, code, description, phonetic);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAddEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAddEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAddEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAddEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAddEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		/// <param name="code">optional object code</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAddEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object code)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, code);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAddEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="level">optional object level</param>
		/// <param name="code">optional object code</param>
		/// <param name="description">optional object description</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LookUpTableAddEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object level, object code, object description)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, level, code, description);
			object returnItem = Invoker.MethodReturn(_instance, "LookUpTableAddEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		/// <param name="graphicalIndicators">optional object graphicalIndicators</param>
		/// <param name="required">optional object required</param>
		/// <param name="automaticallyRolldownToAssn">optional object automaticallyRolldownToAssn</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldPropertiesEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc, object graphicalIndicators, object required, object automaticallyRolldownToAssn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc, graphicalIndicators, required, automaticallyRolldownToAssn);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldPropertiesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldPropertiesEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldPropertiesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldPropertiesEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldPropertiesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldPropertiesEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldPropertiesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		/// <param name="graphicalIndicators">optional object graphicalIndicators</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldPropertiesEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc, object graphicalIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc, graphicalIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldPropertiesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjCustomField fieldID</param>
		/// <param name="attribute">optional NetOffice.MSProjectApi.Enums.PjCustomFieldAttribute Attribute = -1</param>
		/// <param name="summaryCalc">optional NetOffice.MSProjectApi.Enums.PjSummaryCalc SummaryCalc = -1</param>
		/// <param name="graphicalIndicators">optional object graphicalIndicators</param>
		/// <param name="required">optional object required</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool CustomFieldPropertiesEx(NetOffice.MSProjectApi.Enums.PjCustomField fieldID, object attribute, object summaryCalc, object graphicalIndicators, object required)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, attribute, summaryCalc, graphicalIndicators, required);
			object returnItem = Invoker.MethodReturn(_instance, "CustomFieldPropertiesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		/// <param name="projectGuideContent">optional object projectGuideContent</param>
		/// <param name="setAsDefaults">optional object setAsDefaults</param>
		/// <param name="useOMIDs">optional object useOMIDs</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent, object projectGuideContent, object setAsDefaults, object useOMIDs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent, projectGuideContent, setAsDefaults, useOMIDs);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		/// <param name="projectGuideContent">optional object projectGuideContent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent, object projectGuideContent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent, projectGuideContent);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="showResourceAssignmentIndicators">optional object showResourceAssignmentIndicators</param>
		/// <param name="showEditToStartFinishDates">optional object showEditToStartFinishDates</param>
		/// <param name="showEditsToWorkUnitsDurationIndicators">optional object showEditsToWorkUnitsDurationIndicators</param>
		/// <param name="showDeletionInNameColumn">optional object showDeletionInNameColumn</param>
		/// <param name="displayProjectGuide">optional object displayProjectGuide</param>
		/// <param name="projectGuideUseDefaultFunctionalLayoutPage">optional object projectGuideUseDefaultFunctionalLayoutPage</param>
		/// <param name="projectGuideFunctionalLayoutPage">optional object projectGuideFunctionalLayoutPage</param>
		/// <param name="projectGuideUseDefaultContent">optional object projectGuideUseDefaultContent</param>
		/// <param name="projectGuideContent">optional object projectGuideContent</param>
		/// <param name="setAsDefaults">optional object setAsDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsInterfaceEx(object showResourceAssignmentIndicators, object showEditToStartFinishDates, object showEditsToWorkUnitsDurationIndicators, object showDeletionInNameColumn, object displayProjectGuide, object projectGuideUseDefaultFunctionalLayoutPage, object projectGuideFunctionalLayoutPage, object projectGuideUseDefaultContent, object projectGuideContent, object setAsDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(showResourceAssignmentIndicators, showEditToStartFinishDates, showEditsToWorkUnitsDurationIndicators, showDeletionInNameColumn, displayProjectGuide, projectGuideUseDefaultFunctionalLayoutPage, projectGuideFunctionalLayoutPage, projectGuideUseDefaultContent, projectGuideContent, setAsDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsInterfaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="localRUIDs">optional object localRUIDs</param>
		/// <param name="useImportColumn">optional object useImportColumn</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesImportEx(object localRUIDs, object useImportColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(localRUIDs, useImportColumn);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesImportEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesImportEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesImportEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="localRUIDs">optional object localRUIDs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool EnterpriseResourcesImportEx(object localRUIDs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(localRUIDs);
			object returnItem = Invoker.MethodReturn(_instance, "EnterpriseResourcesImportEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		/// <param name="wrapperPage">optional object wrapperPage</param>
		/// <param name="functionalityName">optional object functionalityName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebBrowserControlEx(string targetPage, object wrapperPage, object functionalityName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage, wrapperPage, functionalityName);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebBrowserControlEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebBrowserControlEx(string targetPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebBrowserControlEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="targetPage">string targetPage</param>
		/// <param name="wrapperPage">optional object wrapperPage</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool LoadWebBrowserControlEx(string targetPage, object wrapperPage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(targetPage, wrapperPage);
			object returnItem = Invoker.MethodReturn(_instance, "LoadWebBrowserControlEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="removeFileProperties">optional object removeFileProperties</param>
		/// <param name="trustWSS">optional object trustWSS</param>
		/// <param name="legacyFileFormats">optional object legacyFileFormats</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSecurityEx(object removeFileProperties, object trustWSS, object legacyFileFormats)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(removeFileProperties, trustWSS, legacyFileFormats);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurityEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSecurityEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurityEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="removeFileProperties">optional object removeFileProperties</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSecurityEx(object removeFileProperties)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(removeFileProperties);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurityEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="removeFileProperties">optional object removeFileProperties</param>
		/// <param name="trustWSS">optional object trustWSS</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool OptionsSecurityEx(object removeFileProperties, object trustWSS)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(removeFileProperties, trustWSS);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurityEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool IsUndoingOrRedoing()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "IsUndoingOrRedoing", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="propertyID">Int32 propertyID</param>
		/// <param name="strFormula">string strFormula</param>
		/// <param name="localized">optional bool Localized = false</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static string ValidateEnterpriseFormula(Int32 propertyID, string strFormula, object localized)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(propertyID, strFormula, localized);
			object returnItem = Invoker.MethodReturn(_instance, "ValidateEnterpriseFormula", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="propertyID">Int32 propertyID</param>
		/// <param name="strFormula">string strFormula</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static string ValidateEnterpriseFormula(Int32 propertyID, string strFormula)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(propertyID, strFormula);
			object returnItem = Invoker.MethodReturn(_instance, "ValidateEnterpriseFormula", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void UndoClear()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "UndoClear", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="howManyUndos">optional Int32 HowManyUndos = 1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Undo(object howManyUndos)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(howManyUndos);
			object returnItem = Invoker.MethodReturn(_instance, "Undo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Undo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Undo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="howManyRedos">optional Int32 HowManyRedos = 1</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Redo(object howManyRedos)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(howManyRedos);
			object returnItem = Invoker.MethodReturn(_instance, "Redo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool Redo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Redo", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="label">string label</param>
		/// <param name="guid">optional object guid</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void OpenUndoTransaction(string label, object guid)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(label, guid);
			Invoker.Method(_instance, "OpenUndoTransaction", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="label">string label</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static void OpenUndoTransaction(string label)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(label);
			Invoker.Method(_instance, "OpenUndoTransaction", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void CloseUndoTransaction()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "CloseUndoTransaction", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="propertyID">Int32 propertyID</param>
		/// <param name="strGraphicalIndicators">string strGraphicalIndicators</param>
		/// <param name="localized">optional bool Localized = false</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,12,14)]
		public static string ValidateGraphicalIndicators(Int32 propertyID, string strGraphicalIndicators, object localized)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(propertyID, strGraphicalIndicators, localized);
			object returnItem = Invoker.MethodReturn(_instance, "ValidateGraphicalIndicators", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="propertyID">Int32 propertyID</param>
		/// <param name="strGraphicalIndicators">string strGraphicalIndicators</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,12,14)]
		public static string ValidateGraphicalIndicators(Int32 propertyID, string strGraphicalIndicators)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(propertyID, strGraphicalIndicators);
			object returnItem = Invoker.MethodReturn(_instance, "ValidateGraphicalIndicators", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 GetUndoListCount()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GetUndoListCount", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 GetRedoListCount()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GetRedoListCount", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="itemIndex">Int32 itemIndex</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string GetUndoListItem(Int32 itemIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(itemIndex);
			object returnItem = Invoker.MethodReturn(_instance, "GetUndoListItem", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="itemIndex">Int32 itemIndex</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string GetRedoListItem(Int32 itemIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(itemIndex);
			object returnItem = Invoker.MethodReturn(_instance, "GetRedoListItem", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="x">Int32 x</param>
		/// <param name="y">Int32 y</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static NetOffice.MSProjectApi.Cell GetCellInfo(Int32 x, Int32 y)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(x, y);
			object returnItem = Invoker.MethodReturn(_instance, "GetCellInfo", paramsArray);
			NetOffice.MSProjectApi.Cell newObject = Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.MSProjectApi.Cell.LateBindingApiWrapperType) as NetOffice.MSProjectApi.Cell;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string GetProjectServerSettingsEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GetProjectServerSettingsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static void AfterUnloadWebBrowserControl()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "AfterUnloadWebBrowserControl", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool IsOffline()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "IsOffline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,12,14)]
		public static bool IsReducedFunctionalityMode()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "IsReducedFunctionalityMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="elementType">NetOffice.MSProjectApi.Enums.PjThemeElement elementType</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static string GetThemedColor(NetOffice.MSProjectApi.Enums.PjThemeElement elementType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(elementType);
			object returnItem = Invoker.MethodReturn(_instance, "GetThemedColor", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 12, 14
		/// </summary>
		/// <param name="commandName">string commandName</param>
		[SupportByVersion("MSProject", 11,12,14)]
		public static Int32 IsCommandEnabled(string commandName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(commandName);
			object returnItem = Invoker.MethodReturn(_instance, "IsCommandEnabled", paramsArray);
			return NetRuntimeSystem.Convert.ToInt32(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="strURL">string strURL</param>
		/// <param name="strListGuid">string strListGuid</param>
		/// <param name="strListName">string strListName</param>
		/// <param name="bstrViewGUID">string bstrViewGUID</param>
		/// <param name="bstrViewName">string bstrViewName</param>
		/// <param name="iListID">Int32 iListID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,14)]
		public static string LoadTasksFromServer(string strURL, string strListGuid, string strListName, string bstrViewGUID, string bstrViewName, Int32 iListID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(strURL, strListGuid, strListName, bstrViewGUID, bstrViewName, iListID);
			object returnItem = Invoker.MethodReturn(_instance, "LoadTasksFromServer", paramsArray);
			return NetRuntimeSystem.Convert.ToString(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="start">object start</param>
		/// <param name="finish">object finish</param>
		[SupportByVersion("MSProject", 11,14)]
		public static void PanZoomZoomTo(object start, object finish)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start, finish);
			Invoker.Method(_instance, "PanZoomZoomTo", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="start">object start</param>
		[SupportByVersion("MSProject", 11,14)]
		public static void PanZoomPanTo(object start)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start);
			Invoker.Method(_instance, "PanZoomPanTo", paramsArray);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="applyTo">optional object applyTo</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewCopy(object name, object applyTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, applyTo);
			object returnItem = Invoker.MethodReturn(_instance, "ViewCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewCopy()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewCopy(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ViewCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewReset()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewReset", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableCopy(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "TableCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableCopy()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TableCopy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableReset()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TableReset", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="onOff">optional object onOff</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool AutoSaveToGlobal(object onOff)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(onOff);
			object returnItem = Invoker.MethodReturn(_instance, "AutoSaveToGlobal", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool AutoSaveToGlobal()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AutoSaveToGlobal", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="applyTo">optional object applyTo</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewsEx(object applyTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(applyTo);
			object returnItem = Invoker.MethodReturn(_instance, "ViewsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewsEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ViewsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="singlePane">object singlePane</param>
		/// <param name="toggle">object toggle</param>
		/// <param name="applyTo">object applyTo</param>
		/// <param name="builtInView">optional NetOffice.MSProjectApi.Enums.PjViewType BuiltInView = -1</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewApplyEx(object name, object singlePane, object toggle, object applyTo, object builtInView)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, singlePane, toggle, applyTo, builtInView);
			object returnItem = Invoker.MethodReturn(_instance, "ViewApplyEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="singlePane">object singlePane</param>
		/// <param name="toggle">object toggle</param>
		/// <param name="applyTo">object applyTo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ViewApplyEx(object name, object singlePane, object toggle, object applyTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, singlePane, toggle, applyTo);
			object returnItem = Invoker.MethodReturn(_instance, "ViewApplyEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool WrapText(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "WrapText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool WrapText()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "WrapText", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ShowAddNewColumn(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "ShowAddNewColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ShowAddNewColumn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ShowAddNewColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjFieldTypes Type = 0</param>
		/// <param name="column">optional object column</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ChangeColumnDataType(object type, object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type, column);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeColumnDataType", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ChangeColumnDataType()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ChangeColumnDataType", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjFieldTypes Type = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ChangeColumnDataType(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeColumnDataType", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="column">optional object column</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool AddNewColumn(object column)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(column);
			object returnItem = Invoker.MethodReturn(_instance, "AddNewColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool AddNewColumn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AddNewColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		/// <param name="headerAutoRowHeightAdjustment">optional object headerAutoRowHeightAdjustment</param>
		/// <param name="headerTextWrap">optional object headerTextWrap</param>
		/// <param name="wrapText">optional object wrapText</param>
		/// <param name="showAddNewColumn">optional object showAddNewColumn</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle, object headerAutoRowHeightAdjustment, object headerTextWrap, object wrapText, object showAddNewColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle, headerAutoRowHeightAdjustment, headerTextWrap, wrapText, showAddNewColumn);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		/// <param name="headerAutoRowHeightAdjustment">optional object headerAutoRowHeightAdjustment</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle, object headerAutoRowHeightAdjustment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle, headerAutoRowHeightAdjustment);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		/// <param name="headerAutoRowHeightAdjustment">optional object headerAutoRowHeightAdjustment</param>
		/// <param name="headerTextWrap">optional object headerTextWrap</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle, object headerAutoRowHeightAdjustment, object headerTextWrap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle, headerAutoRowHeightAdjustment, headerTextWrap);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="taskTable">bool taskTable</param>
		/// <param name="create">optional object create</param>
		/// <param name="overwriteExisting">optional object overwriteExisting</param>
		/// <param name="newName">optional object newName</param>
		/// <param name="fieldName">optional object fieldName</param>
		/// <param name="newFieldName">optional object newFieldName</param>
		/// <param name="title">optional object title</param>
		/// <param name="width">optional object width</param>
		/// <param name="align">optional object align</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="lockFirstColumn">optional object lockFirstColumn</param>
		/// <param name="dateFormat">optional object dateFormat</param>
		/// <param name="rowHeight">optional object rowHeight</param>
		/// <param name="columnPosition">optional object columnPosition</param>
		/// <param name="alignTitle">optional object alignTitle</param>
		/// <param name="headerAutoRowHeightAdjustment">optional object headerAutoRowHeightAdjustment</param>
		/// <param name="headerTextWrap">optional object headerTextWrap</param>
		/// <param name="wrapText">optional object wrapText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TableEditEx(string name, bool taskTable, object create, object overwriteExisting, object newName, object fieldName, object newFieldName, object title, object width, object align, object showInMenu, object lockFirstColumn, object dateFormat, object rowHeight, object columnPosition, object alignTitle, object headerAutoRowHeightAdjustment, object headerTextWrap, object wrapText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, taskTable, create, overwriteExisting, newName, fieldName, newFieldName, title, width, align, showInMenu, lockFirstColumn, dateFormat, rowHeight, columnPosition, alignTitle, headerAutoRowHeightAdjustment, headerTextWrap, wrapText);
			object returnItem = Invoker.MethodReturn(_instance, "TableEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		/// <param name="listName">optional object listName</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SynchronizeWithSite(object siteURL, object listName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL, listName);
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SynchronizeWithSite()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SynchronizeWithSite(object siteURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL);
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ManageSiteColumns()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ManageSiteColumns", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		/// <param name="listName">optional object listName</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool OpenFromSharePoint(object siteURL, object listName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL, listName);
			object returnItem = Invoker.MethodReturn(_instance, "OpenFromSharePoint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OpenFromSharePoint()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OpenFromSharePoint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OpenFromSharePoint(object siteURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL);
			object returnItem = Invoker.MethodReturn(_instance, "OpenFromSharePoint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="insideText">optional object insideText</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText, object leftText, object rightText, object insideText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText, leftText, rightText, insideText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="leftText">optional object leftText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText, object leftText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText, leftText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">string item</param>
		/// <param name="create">optional object create</param>
		/// <param name="name">optional object name</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="showFor">optional object showFor</param>
		/// <param name="row">optional object row</param>
		/// <param name="from">optional object from</param>
		/// <param name="to">optional object to</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarEditEx(string item, object create, object name, object startShape, object startType, object startColor, object middleShape, object middleColor, object middlePattern, object endShape, object endType, object endColor, object showFor, object row, object from, object to, object bottomText, object topText, object leftText, object rightText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, create, name, startShape, startType, startColor, middleShape, middleColor, middlePattern, endShape, endType, endColor, showFor, row, from, to, bottomText, topText, leftText, rightText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		/// <param name="field5">optional object field5</param>
		/// <param name="splitPattern">optional object splitPattern</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3, object field4, object field5, object splitPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3, field4, field5, splitPattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3, object field4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3, field4);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjBarItem item</param>
		/// <param name="bar">optional object bar</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		/// <param name="align">optional object align</param>
		/// <param name="wrap">optional object wrap</param>
		/// <param name="shadow">optional object shadow</param>
		/// <param name="field1">optional object field1</param>
		/// <param name="field2">optional object field2</param>
		/// <param name="field3">optional object field3</param>
		/// <param name="field4">optional object field4</param>
		/// <param name="field5">optional object field5</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarBarStylesEditEx(NetOffice.MSProjectApi.Enums.PjBarItem item, object bar, object pattern, object color, object align, object wrap, object shadow, object field1, object field2, object field3, object field4, object field5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, bar, pattern, color, align, wrap, shadow, field1, field2, field3, field4, field5);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarBarStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjCalendarShading item</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="color">optional object color</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateShadingEditEx(NetOffice.MSProjectApi.Enums.PjCalendarShading item, object pattern, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, pattern, color);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShadingEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjCalendarShading item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateShadingEditEx(NetOffice.MSProjectApi.Enums.PjCalendarShading item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShadingEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjCalendarShading item</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateShadingEditEx(NetOffice.MSProjectApi.Enums.PjCalendarShading item, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateShadingEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		/// <param name="bottomColor">optional object bottomColor</param>
		/// <param name="topPattern">optional object topPattern</param>
		/// <param name="bottomPattern">optional object bottomPattern</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor, object bottomColor, object topPattern, object bottomPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor, bottomColor, topPattern, bottomPattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight, object bottomLeft)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight, object bottomLeft, object bottomRight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		/// <param name="bottomColor">optional object bottomColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor, object bottomColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor, bottomColor);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeft">optional object topLeft</param>
		/// <param name="topRight">optional object topRight</param>
		/// <param name="bottomLeft">optional object bottomLeft</param>
		/// <param name="bottomRight">optional object bottomRight</param>
		/// <param name="topColor">optional object topColor</param>
		/// <param name="bottomColor">optional object bottomColor</param>
		/// <param name="topPattern">optional object topPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CalendarDateBoxesEx(object topLeft, object topRight, object bottomLeft, object bottomRight, object topColor, object bottomColor, object topPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeft, topRight, bottomLeft, bottomRight, topColor, bottomColor, topPattern);
			object returnItem = Invoker.MethodReturn(_instance, "CalendarDateBoxesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="strikethrough">optional object strikethrough</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic, object underline, object color, object reset, object cellColor, object pattern, object strikethrough)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset, cellColor, pattern, strikethrough);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic, object underline, object color, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="cellColor">optional object cellColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic, object underline, object color, object reset, object cellColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset, cellColor);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool Font32Ex(object name, object size, object bold, object italic, object underline, object color, object reset, object cellColor, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, size, bold, italic, underline, color, reset, cellColor, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "Font32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TextStyles32Ex(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor);
			object returnItem = Invoker.MethodReturn(_instance, "TextStyles32Ex", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="color">optional object color</param>
		/// <param name="pattern">optional object pattern</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimescaleNonWorkingEx(object draw, object calendar, object color, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw, calendar, color, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorkingEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimescaleNonWorkingEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorkingEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimescaleNonWorkingEx(object draw)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorkingEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		/// <param name="calendar">optional object calendar</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimescaleNonWorkingEx(object draw, object calendar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw, calendar);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorkingEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="draw">optional object draw</param>
		/// <param name="calendar">optional object calendar</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimescaleNonWorkingEx(object draw, object calendar, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(draw, calendar, color);
			object returnItem = Invoker.MethodReturn(_instance, "TimescaleNonWorkingEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		/// <param name="interval">optional object interval</param>
		/// <param name="intervalType">optional object intervalType</param>
		/// <param name="intervalColor">optional object intervalColor</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GridlinesEditEx(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor, object interval, object intervalType, object intervalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor, interval, intervalType, intervalColor);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GridlinesEditEx(NetOffice.MSProjectApi.Enums.PjGridline item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GridlinesEditEx(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GridlinesEditEx(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		/// <param name="interval">optional object interval</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GridlinesEditEx(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor, object interval)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor, interval);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjGridline item</param>
		/// <param name="normalType">optional object normalType</param>
		/// <param name="normalColor">optional object normalColor</param>
		/// <param name="interval">optional object interval</param>
		/// <param name="intervalType">optional object intervalType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GridlinesEditEx(NetOffice.MSProjectApi.Enums.PjGridline item, object normalType, object normalColor, object interval, object intervalType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, normalType, normalColor, interval, intervalType);
			object returnItem = Invoker.MethodReturn(_instance, "GridlinesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		/// <param name="proposedRightShowAs">optional object proposedRightShowAs</param>
		/// <param name="proposedRightColor">optional object proposedRightColor</param>
		/// <param name="proposedRightPattern">optional object proposedRightPattern</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern, object proposedRightShowAs, object proposedRightColor, object proposedRightPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern, proposedRightShowAs, proposedRightColor, proposedRightPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		/// <param name="proposedRightShowAs">optional object proposedRightShowAs</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern, object proposedRightShowAs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern, proposedRightShowAs);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="topLeftShowAs">optional object topLeftShowAs</param>
		/// <param name="topLeftColor">optional object topLeftColor</param>
		/// <param name="topLeftPattern">optional object topLeftPattern</param>
		/// <param name="bottomLeftShowAs">optional object bottomLeftShowAs</param>
		/// <param name="bottomLeftColor">optional object bottomLeftColor</param>
		/// <param name="bottomLeftPattern">optional object bottomLeftPattern</param>
		/// <param name="topRightShowAs">optional object topRightShowAs</param>
		/// <param name="topRightColor">optional object topRightColor</param>
		/// <param name="topRightPattern">optional object topRightPattern</param>
		/// <param name="bottomRightShowAs">optional object bottomRightShowAs</param>
		/// <param name="bottomRightColor">optional object bottomRightColor</param>
		/// <param name="bottomRightPattern">optional object bottomRightPattern</param>
		/// <param name="showValues">optional object showValues</param>
		/// <param name="showAvailabilityLine">optional object showAvailabilityLine</param>
		/// <param name="percentBarOverlap">optional object percentBarOverlap</param>
		/// <param name="proposedLeftShowAs">optional object proposedLeftShowAs</param>
		/// <param name="proposedLeftColor">optional object proposedLeftColor</param>
		/// <param name="proposedLeftPattern">optional object proposedLeftPattern</param>
		/// <param name="proposedRightShowAs">optional object proposedRightShowAs</param>
		/// <param name="proposedRightColor">optional object proposedRightColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceGraphBarStylesEx(object topLeftShowAs, object topLeftColor, object topLeftPattern, object bottomLeftShowAs, object bottomLeftColor, object bottomLeftPattern, object topRightShowAs, object topRightColor, object topRightPattern, object bottomRightShowAs, object bottomRightColor, object bottomRightPattern, object showValues, object showAvailabilityLine, object percentBarOverlap, object proposedLeftShowAs, object proposedLeftColor, object proposedLeftPattern, object proposedRightShowAs, object proposedRightColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(topLeftShowAs, topLeftColor, topLeftPattern, bottomLeftShowAs, bottomLeftColor, bottomLeftPattern, topRightShowAs, topRightColor, topRightPattern, bottomRightShowAs, bottomRightColor, bottomRightPattern, showValues, showAvailabilityLine, percentBarOverlap, proposedLeftShowAs, proposedLeftColor, proposedLeftPattern, proposedRightShowAs, proposedRightColor);
			object returnItem = Invoker.MethodReturn(_instance, "ResourceGraphBarStylesEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">object backgroundColor</param>
		/// <param name="backgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern BackgroundPattern = -1</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxStylesEditEx(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor, object backgroundPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor, backgroundPattern);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxStylesEditEx(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjBoxStyle style</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">object backgroundColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxStylesEditEx(NetOffice.MSProjectApi.Enums.PjBoxStyle style, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxStylesEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">object backgroundColor</param>
		/// <param name="backgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern BackgroundPattern = -1</param>
		/// <param name="reset">optional object reset</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxFormatEx(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor, object backgroundPattern, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor, backgroundPattern, reset);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxFormatEx(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">object backgroundColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxFormatEx(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="projectName">object projectName</param>
		/// <param name="taskID">object taskID</param>
		/// <param name="dataTemplate">object dataTemplate</param>
		/// <param name="horizontalGridlines">object horizontalGridlines</param>
		/// <param name="verticalGridlines">object verticalGridlines</param>
		/// <param name="borderShape">optional NetOffice.MSProjectApi.Enums.PjBoxShape BorderShape = -1</param>
		/// <param name="borderColor">object borderColor</param>
		/// <param name="borderWidth">object borderWidth</param>
		/// <param name="backgroundColor">object backgroundColor</param>
		/// <param name="backgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern BackgroundPattern = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxFormatEx(object projectName, object taskID, object dataTemplate, object horizontalGridlines, object verticalGridlines, object borderShape, object borderColor, object borderWidth, object backgroundColor, object backgroundPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectName, taskID, dataTemplate, horizontalGridlines, verticalGridlines, borderShape, borderColor, borderWidth, backgroundColor, backgroundPattern);
			object returnItem = Invoker.MethodReturn(_instance, "BoxFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">object fontColor</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		/// <param name="showLabel">object showLabel</param>
		/// <param name="label">object label</param>
		/// <param name="dateFormat">optional NetOffice.MSProjectApi.Enums.PjDateFormat DateFormat = -1</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxCellEditEx(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit, object showLabel, object label, object dateFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit, showLabel, label, dateFormat);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">object fontColor</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxCellEditEx(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">object fontColor</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxCellEditEx(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">object fontColor</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		/// <param name="showLabel">object showLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxCellEditEx(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit, object showLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit, showLabel);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">string name</param>
		/// <param name="cell">NetOffice.MSProjectApi.Enums.PjCell cell</param>
		/// <param name="fieldName">optional NetOffice.MSProjectApi.Enums.PjField FieldName = -1</param>
		/// <param name="font">object font</param>
		/// <param name="fontSize">object fontSize</param>
		/// <param name="fontColor">object fontColor</param>
		/// <param name="bold">object bold</param>
		/// <param name="italic">object italic</param>
		/// <param name="underline">object underline</param>
		/// <param name="horizontalAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment HorizontalAlignment = -1</param>
		/// <param name="verticalAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment VerticalAlignment = -1</param>
		/// <param name="textLineLimit">object textLineLimit</param>
		/// <param name="showLabel">object showLabel</param>
		/// <param name="label">object label</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxCellEditEx(string name, NetOffice.MSProjectApi.Enums.PjCell cell, object fieldName, object font, object fontSize, object fontColor, object bold, object italic, object underline, object horizontalAlignment, object verticalAlignment, object textLineLimit, object showLabel, object label)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, cell, fieldName, font, fontSize, fontColor, bold, italic, underline, horizontalAlignment, verticalAlignment, textLineLimit, showLabel, label);
			object returnItem = Invoker.MethodReturn(_instance, "BoxCellEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">object viewBackgroundColor</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		/// <param name="showProgressMarks">optional object showProgressMarks</param>
		/// <param name="showPageBreaks">optional object showPageBreaks</param>
		/// <param name="showIDOnly">optional object showIDOnly</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern, object showProgressMarks, object showPageBreaks, object showIDOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern, showProgressMarks, showPageBreaks, showIDOnly);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">object viewBackgroundColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">object viewBackgroundColor</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">object viewBackgroundColor</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		/// <param name="showProgressMarks">optional object showProgressMarks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern, object showProgressMarks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern, showProgressMarks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="layoutMode">optional NetOffice.MSProjectApi.Enums.PjLayoutMode LayoutMode = -1</param>
		/// <param name="layoutScheme">optional NetOffice.MSProjectApi.Enums.PjLayoutScheme LayoutScheme = -1</param>
		/// <param name="summaryPrecedence">object summaryPrecedence</param>
		/// <param name="rowAlignment">optional NetOffice.MSProjectApi.Enums.PjVerticalAlignment RowAlignment = -1</param>
		/// <param name="columnAlignment">optional NetOffice.MSProjectApi.Enums.PjAlignment ColumnAlignment = -1</param>
		/// <param name="rowSpacing">object rowSpacing</param>
		/// <param name="columnSpacing">object columnSpacing</param>
		/// <param name="rowHeight">optional NetOffice.MSProjectApi.Enums.PjRowColSize RowHeight = -1</param>
		/// <param name="columnWidth">optional NetOffice.MSProjectApi.Enums.PjRowColSize ColumnWidth = -1</param>
		/// <param name="adjustForPageBreaks">object adjustForPageBreaks</param>
		/// <param name="showSummaryTasks">object showSummaryTasks</param>
		/// <param name="viewBackgroundColor">object viewBackgroundColor</param>
		/// <param name="viewBackgroundPattern">optional NetOffice.MSProjectApi.Enums.PjBackgroundPattern ViewBackgroundPattern = -1</param>
		/// <param name="showProgressMarks">optional object showProgressMarks</param>
		/// <param name="showPageBreaks">optional object showPageBreaks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLayoutEx(object layoutMode, object layoutScheme, object summaryPrecedence, object rowAlignment, object columnAlignment, object rowSpacing, object columnSpacing, object rowHeight, object columnWidth, object adjustForPageBreaks, object showSummaryTasks, object viewBackgroundColor, object viewBackgroundPattern, object showProgressMarks, object showPageBreaks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(layoutMode, layoutScheme, summaryPrecedence, rowAlignment, columnAlignment, rowSpacing, columnSpacing, rowHeight, columnWidth, adjustForPageBreaks, showSummaryTasks, viewBackgroundColor, viewBackgroundPattern, showProgressMarks, showPageBreaks);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLayoutEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		/// <param name="colorMode">optional NetOffice.MSProjectApi.Enums.PjLinkColorMode ColorMode = -1</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		/// <param name="noncriticalColor">optional object noncriticalColor</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLinksEx(object style, object showArrows, object showLabels, object colorMode, object criticalColor, object noncriticalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels, colorMode, criticalColor, noncriticalColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinksEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLinksEx(object style, object showArrows)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinksEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLinksEx(object style, object showArrows, object showLabels)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinksEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		/// <param name="colorMode">optional NetOffice.MSProjectApi.Enums.PjLinkColorMode ColorMode = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLinksEx(object style, object showArrows, object showLabels, object colorMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels, colorMode);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinksEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">optional NetOffice.MSProjectApi.Enums.PjLinkStyle Style = -1</param>
		/// <param name="showArrows">object showArrows</param>
		/// <param name="showLabels">object showLabels</param>
		/// <param name="colorMode">optional NetOffice.MSProjectApi.Enums.PjLinkColorMode ColorMode = -1</param>
		/// <param name="criticalColor">optional object criticalColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool BoxLinksEx(object style, object showArrows, object showLabels, object colorMode, object criticalColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, showArrows, showLabels, colorMode, criticalColor);
			object returnItem = Invoker.MethodReturn(_instance, "BoxLinksEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaultsHyperlink">optional object setDefaultsHyperlink</param>
		/// <param name="inCellEditing">optional object inCellEditing</param>
		/// <param name="allowTaskDelegation">optional object allowTaskDelegation</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaultsHyperlink, object inCellEditing, object allowTaskDelegation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaultsHyperlink, inCellEditing, allowTaskDelegation);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaultsHyperlink">optional object setDefaultsHyperlink</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaultsHyperlink)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaultsHyperlink);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveAfterReturn">optional object moveAfterReturn</param>
		/// <param name="dragAndDrop">optional object dragAndDrop</param>
		/// <param name="updateLinks">optional object updateLinks</param>
		/// <param name="copyResourceUsageHeader">optional object copyResourceUsageHeader</param>
		/// <param name="phoneticInfo">optional object phoneticInfo</param>
		/// <param name="phoneticType">optional object phoneticType</param>
		/// <param name="minuteLabelDisplay">optional object minuteLabelDisplay</param>
		/// <param name="hourLabelDisplay">optional object hourLabelDisplay</param>
		/// <param name="dayLabelDisplay">optional object dayLabelDisplay</param>
		/// <param name="weekLabelDisplay">optional object weekLabelDisplay</param>
		/// <param name="yearLabelDisplay">optional object yearLabelDisplay</param>
		/// <param name="spaceBeforeTimeLabel">optional object spaceBeforeTimeLabel</param>
		/// <param name="setDefaults">optional object setDefaults</param>
		/// <param name="monthLabelDisplay">optional object monthLabelDisplay</param>
		/// <param name="setDefaultsTimeUnits">optional object setDefaultsTimeUnits</param>
		/// <param name="hyperlinkColor">optional object hyperlinkColor</param>
		/// <param name="followedHyperlinkColor">optional object followedHyperlinkColor</param>
		/// <param name="underlineHyperlinks">optional object underlineHyperlinks</param>
		/// <param name="setDefaultsHyperlink">optional object setDefaultsHyperlink</param>
		/// <param name="inCellEditing">optional object inCellEditing</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsEditEx(object moveAfterReturn, object dragAndDrop, object updateLinks, object copyResourceUsageHeader, object phoneticInfo, object phoneticType, object minuteLabelDisplay, object hourLabelDisplay, object dayLabelDisplay, object weekLabelDisplay, object yearLabelDisplay, object spaceBeforeTimeLabel, object setDefaults, object monthLabelDisplay, object setDefaultsTimeUnits, object hyperlinkColor, object followedHyperlinkColor, object underlineHyperlinks, object setDefaultsHyperlink, object inCellEditing)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveAfterReturn, dragAndDrop, updateLinks, copyResourceUsageHeader, phoneticInfo, phoneticType, minuteLabelDisplay, hourLabelDisplay, dayLabelDisplay, weekLabelDisplay, yearLabelDisplay, spaceBeforeTimeLabel, setDefaults, monthLabelDisplay, setDefaultsTimeUnits, hyperlinkColor, followedHyperlinkColor, underlineHyperlinks, setDefaultsHyperlink, inCellEditing);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsEditEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		/// <param name="labelFontName">optional object labelFontName</param>
		/// <param name="labelFontSize">optional object labelFontSize</param>
		/// <param name="labelFontBold">optional object labelFontBold</param>
		/// <param name="labelFontItalic">optional object labelFontItalic</param>
		/// <param name="labelFontUnderline">optional object labelFontUnderline</param>
		/// <param name="labelFontColor">optional object labelFontColor</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold, object labelFontItalic, object labelFontUnderline, object labelFontColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold, labelFontItalic, labelFontUnderline, labelFontColor);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		/// <param name="labelFontName">optional object labelFontName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		/// <param name="labelFontName">optional object labelFontName</param>
		/// <param name="labelFontSize">optional object labelFontSize</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		/// <param name="labelFontName">optional object labelFontName</param>
		/// <param name="labelFontSize">optional object labelFontSize</param>
		/// <param name="labelFontBold">optional object labelFontBold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		/// <param name="labelFontName">optional object labelFontName</param>
		/// <param name="labelFontSize">optional object labelFontSize</param>
		/// <param name="labelFontBold">optional object labelFontBold</param>
		/// <param name="labelFontItalic">optional object labelFontItalic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold, object labelFontItalic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold, labelFontItalic);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">object name</param>
		/// <param name="textWidth">object textWidth</param>
		/// <param name="legendOn">object legendOn</param>
		/// <param name="alignment">optional NetOffice.MSProjectApi.Enums.PjAlignment Alignment = 1</param>
		/// <param name="text">optional object text</param>
		/// <param name="labelFontName">optional object labelFontName</param>
		/// <param name="labelFontSize">optional object labelFontSize</param>
		/// <param name="labelFontBold">optional object labelFontBold</param>
		/// <param name="labelFontItalic">optional object labelFontItalic</param>
		/// <param name="labelFontUnderline">optional object labelFontUnderline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupLegendEx(object name, object textWidth, object legendOn, object alignment, object text, object labelFontName, object labelFontSize, object labelFontBold, object labelFontItalic, object labelFontUnderline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, textWidth, legendOn, alignment, text, labelFontName, labelFontSize, labelFontBold, labelFontItalic, labelFontUnderline);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupLegendEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilePageSetupCalendarTextEx(object name, object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "FilePageSetupCalendarTextEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		/// <param name="fontWord">optional object fontWord</param>
		/// <param name="cellBackground">optional object cellBackground</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="shortcut">optional object shortcut</param>
		/// <param name="displayField">optional object displayField</param>
		/// <param name="fontColor">optional object fontColor</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order, object fontWord, object cellBackground, object pattern, object shortcut, object displayField, object fontColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order, fontWord, cellBackground, pattern, shortcut, displayField, fontColor);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		/// <param name="fontWord">optional object fontWord</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order, object fontWord)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order, fontWord);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		/// <param name="fontWord">optional object fontWord</param>
		/// <param name="cellBackground">optional object cellBackground</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order, object fontWord, object cellBackground)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order, fontWord, cellBackground);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		/// <param name="fontWord">optional object fontWord</param>
		/// <param name="cellBackground">optional object cellBackground</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order, object fontWord, object cellBackground, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order, fontWord, cellBackground, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		/// <param name="fontWord">optional object fontWord</param>
		/// <param name="cellBackground">optional object cellBackground</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="shortcut">optional object shortcut</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order, object fontWord, object cellBackground, object pattern, object shortcut)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order, fontWord, cellBackground, pattern, shortcut);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="curIndex">optional object curIndex</param>
		/// <param name="order">optional object order</param>
		/// <param name="fontWord">optional object fontWord</param>
		/// <param name="cellBackground">optional object cellBackground</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="shortcut">optional object shortcut</param>
		/// <param name="displayField">optional object displayField</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool UsageViewEntryEx(object curIndex, object order, object fontWord, object cellBackground, object pattern, object shortcut, object displayField)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(curIndex, order, fontWord, cellBackground, pattern, shortcut, displayField);
			object returnItem = Invoker.MethodReturn(_instance, "UsageViewEntryEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		/// <param name="strikethrough">optional object strikethrough</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern, object showInMenu, object strikethrough)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern, showInMenu, strikethrough);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic, object underline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic, object underline, object color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">optional object item</param>
		/// <param name="font">optional object font</param>
		/// <param name="size">optional object size</param>
		/// <param name="bold">optional object bold</param>
		/// <param name="italic">optional object italic</param>
		/// <param name="underline">optional object underline</param>
		/// <param name="color">optional object color</param>
		/// <param name="cellColor">optional object cellColor</param>
		/// <param name="pattern">optional object pattern</param>
		/// <param name="showInMenu">optional object showInMenu</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailStylesFormatEx(object item, object font, object size, object bold, object italic, object underline, object color, object cellColor, object pattern, object showInMenu)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, font, size, bold, italic, underline, color, cellColor, pattern, showInMenu);
			object returnItem = Invoker.MethodReturn(_instance, "DetailStylesFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="insideText">optional object insideText</param>
		/// <param name="reset">optional object reset</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText, object insideText, object reset, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText, insideText, reset, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="insideText">optional object insideText</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText, object insideText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText, insideText);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="ganttStyle">optional object ganttStyle</param>
		/// <param name="startShape">optional object startShape</param>
		/// <param name="startType">optional object startType</param>
		/// <param name="startColor">optional object startColor</param>
		/// <param name="middleShape">optional object middleShape</param>
		/// <param name="middlePattern">optional object middlePattern</param>
		/// <param name="middleColor">optional object middleColor</param>
		/// <param name="endShape">optional object endShape</param>
		/// <param name="endType">optional object endType</param>
		/// <param name="endColor">optional object endColor</param>
		/// <param name="leftText">optional object leftText</param>
		/// <param name="rightText">optional object rightText</param>
		/// <param name="topText">optional object topText</param>
		/// <param name="bottomText">optional object bottomText</param>
		/// <param name="insideText">optional object insideText</param>
		/// <param name="reset">optional object reset</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarFormatEx(object taskID, object ganttStyle, object startShape, object startType, object startColor, object middleShape, object middlePattern, object middleColor, object endShape, object endType, object endColor, object leftText, object rightText, object topText, object bottomText, object insideText, object reset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, ganttStyle, startShape, startType, startColor, middleShape, middlePattern, middleColor, endShape, endType, endColor, leftText, rightText, topText, bottomText, insideText, reset);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarFormatEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="remove">optional object remove</param>
		/// <param name="timelineViewName">optional object timelineViewName</param>
		/// <param name="showDialog">optional object showDialog</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskOnTimeline(object taskID, object remove, object timelineViewName, object showDialog)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, remove, timelineViewName, showDialog);
			object returnItem = Invoker.MethodReturn(_instance, "TaskOnTimeline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskOnTimeline()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskOnTimeline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskOnTimeline(object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "TaskOnTimeline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="remove">optional object remove</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskOnTimeline(object taskID, object remove)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, remove);
			object returnItem = Invoker.MethodReturn(_instance, "TaskOnTimeline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="remove">optional object remove</param>
		/// <param name="timelineViewName">optional object timelineViewName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskOnTimeline(object taskID, object remove, object timelineViewName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID, remove, timelineViewName);
			object returnItem = Invoker.MethodReturn(_instance, "TaskOnTimeline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveForward">optional object moveForward</param>
		/// <param name="isWorkingDuration">optional object isWorkingDuration</param>
		/// <param name="moveDays">optional object moveDays</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMove(object moveForward, object isWorkingDuration, object moveDays)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveForward, isWorkingDuration, moveDays);
			object returnItem = Invoker.MethodReturn(_instance, "TaskMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveForward">optional object moveForward</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMove(object moveForward)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveForward);
			object returnItem = Invoker.MethodReturn(_instance, "TaskMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveForward">optional object moveForward</param>
		/// <param name="isWorkingDuration">optional object isWorkingDuration</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMove(object moveForward, object isWorkingDuration)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveForward, isWorkingDuration);
			object returnItem = Invoker.MethodReturn(_instance, "TaskMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		/// <param name="moveIncomplete">optional object moveIncomplete</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMoveToStatusDate(object moveCompleted, object moveIncomplete)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveCompleted, moveIncomplete);
			object returnItem = Invoker.MethodReturn(_instance, "TaskMoveToStatusDate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMoveToStatusDate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskMoveToStatusDate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="moveCompleted">optional object moveCompleted</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskMoveToStatusDate(object moveCompleted)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moveCompleted);
			object returnItem = Invoker.MethodReturn(_instance, "TaskMoveToStatusDate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="date">optional object date</param>
		/// <param name="moveDeadline">optional object moveDeadline</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ProjectMove(object date, object moveDeadline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(date, moveDeadline);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ProjectMove()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ProjectMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="date">optional object date</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ProjectMove(object date)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(date);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectMove", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="resolveMethod">optional NetOffice.MSProjectApi.Enums.PjLevelSelectedOption ResolveMethod = 0</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelSelected(object resolveMethod)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(resolveMethod);
			object returnItem = Invoker.MethodReturn(_instance, "LevelSelected", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelSelected()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LevelSelected", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style</param>
		/// <param name="fillColor">optional object fillColor</param>
		/// <param name="borderColor">optional object borderColor</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool EditTPStyle(NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style, object fillColor, object borderColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, fillColor, borderColor);
			object returnItem = Invoker.MethodReturn(_instance, "EditTPStyle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool EditTPStyle(NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style);
			object returnItem = Invoker.MethodReturn(_instance, "EditTPStyle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style</param>
		/// <param name="fillColor">optional object fillColor</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool EditTPStyle(NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style, object fillColor)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style, fillColor);
			object returnItem = Invoker.MethodReturn(_instance, "EditTPStyle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="style">NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResetTPStyle(NetOffice.MSProjectApi.Enums.PjTeamPlannerStyle style)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(style);
			object returnItem = Invoker.MethodReturn(_instance, "ResetTPStyle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="lineMultiple">Int16 lineMultiple</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SelectTPLineHeight(Int16 lineMultiple)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(lineMultiple);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTPLineHeight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjTimelineShowHide item</param>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineShowHide(NetOffice.MSProjectApi.Enums.PjTimelineShowHide item, object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item, show);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineShowHide", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="item">NetOffice.MSProjectApi.Enums.PjTimelineShowHide item</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineShowHide(NetOffice.MSProjectApi.Enums.PjTimelineShowHide item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(item);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineShowHide", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="textOnBar">optional object textOnBar</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineTextOnBar(object textOnBar)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(textOnBar);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineTextOnBar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineTextOnBar()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimelineTextOnBar", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="type">NetOffice.MSProjectApi.Enums.PjTimelineInsertTaskType type</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineInsertTask(NetOffice.MSProjectApi.Enums.PjTimelineInsertTaskType type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineInsertTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="selectionOnly">optional object selectionOnly</param>
		/// <param name="exportWidth">optional object exportWidth</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineExport(object selectionOnly, object exportWidth)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(selectionOnly, exportWidth);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineExport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimelineExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="selectionOnly">optional object selectionOnly</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineExport(object selectionOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(selectionOnly);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FontStrikethrough(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "FontStrikethrough", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FontStrikethrough()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FontStrikethrough", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjAutoFilterType FilterType = 0</param>
		/// <param name="test1">optional object test1</param>
		/// <param name="criteria1">optional object criteria1</param>
		/// <param name="operation">optional object operation</param>
		/// <param name="test2">optional object test2</param>
		/// <param name="criteria2">optional object criteria2</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName, object filterType, object test1, object criteria1, object operation, object test2, object criteria2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, filterType, test1, criteria1, operation, test2, criteria2);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjAutoFilterType FilterType = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName, object filterType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, filterType);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjAutoFilterType FilterType = 0</param>
		/// <param name="test1">optional object test1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName, object filterType, object test1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, filterType, test1);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjAutoFilterType FilterType = 0</param>
		/// <param name="test1">optional object test1</param>
		/// <param name="criteria1">optional object criteria1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName, object filterType, object test1, object criteria1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, filterType, test1, criteria1);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjAutoFilterType FilterType = 0</param>
		/// <param name="test1">optional object test1</param>
		/// <param name="criteria1">optional object criteria1</param>
		/// <param name="operation">optional object operation</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName, object filterType, object test1, object criteria1, object operation)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, filterType, test1, criteria1, operation);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldName">object fieldName</param>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjAutoFilterType FilterType = 0</param>
		/// <param name="test1">optional object test1</param>
		/// <param name="criteria1">optional object criteria1</param>
		/// <param name="operation">optional object operation</param>
		/// <param name="test2">optional object test2</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetAutoFilter(object fieldName, object filterType, object test1, object criteria1, object operation, object test2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldName, filterType, test1, criteria1, operation, test2);
			object returnItem = Invoker.MethodReturn(_instance, "SetAutoFilter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filterType">optional NetOffice.MSProjectApi.Enums.PjFilterViewType FilterType = 65535</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilterNew(object filterType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filterType);
			object returnItem = Invoker.MethodReturn(_instance, "FilterNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilterNew()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilterNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilterClear()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FilterClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GroupNew()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GroupNew", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GroupClear()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GroupClear", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertScheduledTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertScheduledTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertManualTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertManualTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertMilestoneTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertMilestoneTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertBlankRow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertBlankRow", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="startOnDate">optional NetOffice.MSProjectApi.Enums.PjNewTasksStartOnDate StartOnDate = 0</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool NewTasksStartOn(object startOnDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(startOnDate);
			object returnItem = Invoker.MethodReturn(_instance, "NewTasksStartOn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool NewTasksStartOn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "NewTasksStartOn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="on">bool on</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GroupMaintainHierarchy(bool on)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(on);
			object returnItem = Invoker.MethodReturn(_instance, "GroupMaintainHierarchy", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="on">bool on</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FilterShowSummaryRows(bool on)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(on);
			object returnItem = Invoker.MethodReturn(_instance, "FilterShowSummaryRows", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleTaskDetails()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleTaskDetails", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleResourceDetails()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleResourceDetails", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleCritical(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleCritical", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleCritical()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleCritical", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleSlack(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleSlack", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleSlack()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleSlack", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleLate(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleLate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleLate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleLate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="baseline">Int16 baseline</param>
		/// <param name="show">bool show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleBaseline(Int16 baseline, bool show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(baseline, show);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleBaseline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="baseline">Int16 baseline</param>
		/// <param name="show">bool show</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GanttBarStyleSlippage(Int16 baseline, bool show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(baseline, show);
			object returnItem = Invoker.MethodReturn(_instance, "GanttBarStyleSlippage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TogglePreventResOveralloc()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TogglePreventResOveralloc", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleTPAutoExpand()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleTPAutoExpand", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleTPUnassigned()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleTPUnassigned", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleTPUnscheduled()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleTPUnscheduled", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="manual">optional object manual</param>
		/// <param name="isStickyDates">optional object isStickyDates</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskMode(object manual, object isStickyDates)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manual, isStickyDates);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskMode()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="manual">optional object manual</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskMode(object manual)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(manual);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskMode", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="makeActive">optional object makeActive</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InactivateTaskToggle(object makeActive)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(makeActive);
			object returnItem = Invoker.MethodReturn(_instance, "InactivateTaskToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool InactivateTaskToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InactivateTaskToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedTasks, object create, object taskID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedTasks, create, taskID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedTasks);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedTasks, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedTasks, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTaskFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedTasks, object create, object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedTasks, create, taskID);
			object returnItem = Invoker.MethodReturn(_instance, "SetTaskFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		/// <param name="create">optional object create</param>
		/// <param name="resourceID">optional object resourceID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetResourceFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedResources, object create, object resourceID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedResources, create, resourceID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetResourceFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetResourceFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedResources)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedResources);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetResourceFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedResources, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedResources, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="fieldID">NetOffice.MSProjectApi.Enums.PjField fieldID</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedResources">optional object allSelectedResources</param>
		/// <param name="create">optional object create</param>
		/// <param name="resourceID">optional object resourceID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetResourceFieldByID(NetOffice.MSProjectApi.Enums.PjField fieldID, string value, object allSelectedResources, object create, object resourceID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fieldID, value, allSelectedResources, create, resourceID);
			object returnItem = Invoker.MethodReturn(_instance, "SetResourceFieldByID", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="timeline">optional object timeline</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailsPaneToggle(object timeline)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(timeline);
			object returnItem = Invoker.MethodReturn(_instance, "DetailsPaneToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DetailsPaneToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DetailsPaneToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="testID">optional object testID</param>
		/// <param name="searchAllFields">optional object searchAllFields</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test, object value, object next, object matchCase, object fieldID, object testID, object searchAllFields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase, fieldID, testID, searchAllFields);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test, object value, object next)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test, object value, object next, object matchCase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test, object value, object next, object matchCase, object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase, fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="testID">optional object testID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool FindEx(object field, object test, object value, object next, object matchCase, object fieldID, object testID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, next, matchCase, fieldID, testID);
			object returnItem = Invoker.MethodReturn(_instance, "FindEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="testID">optional object testID</param>
		/// <param name="searchAllFields">optional object searchAllFields</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase, object fieldID, object testID, object searchAllFields)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase, fieldID, testID, searchAllFields);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement, object replaceAll)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement, object replaceAll, object next)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase, object fieldID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase, fieldID);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">optional object field</param>
		/// <param name="test">optional object test</param>
		/// <param name="value">optional object value</param>
		/// <param name="replacement">optional object replacement</param>
		/// <param name="replaceAll">optional object replaceAll</param>
		/// <param name="next">optional object next</param>
		/// <param name="matchCase">optional object matchCase</param>
		/// <param name="fieldID">optional object fieldID</param>
		/// <param name="testID">optional object testID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplaceEx(object field, object test, object value, object replacement, object replaceAll, object next, object matchCase, object fieldID, object testID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, test, value, replacement, replaceAll, next, matchCase, fieldID, testID);
			object returnItem = Invoker.MethodReturn(_instance, "ReplaceEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SelectToEnd()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectToEnd", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SelectTaskAssns()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectTaskAssns", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="resourceUniqueID">optional object resourceUniqueID</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReassignSelectedAssns(object resourceUniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(resourceUniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "ReassignSelectedAssns", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReassignSelectedAssns()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReassignSelectedAssns", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		/// <param name="taskID">optional object taskID</param>
		/// <param name="projectName">optional object projectName</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTPField(string field, string value, object allSelectedTasks, object create, object taskID, object projectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks, create, taskID, projectName);
			object returnItem = Invoker.MethodReturn(_instance, "SetTPField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTPField(string field, string value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value);
			object returnItem = Invoker.MethodReturn(_instance, "SetTPField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTPField(string field, string value, object allSelectedTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks);
			object returnItem = Invoker.MethodReturn(_instance, "SetTPField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTPField(string field, string value, object allSelectedTasks, object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks, create);
			object returnItem = Invoker.MethodReturn(_instance, "SetTPField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="field">string field</param>
		/// <param name="value">string value</param>
		/// <param name="allSelectedTasks">optional object allSelectedTasks</param>
		/// <param name="create">optional object create</param>
		/// <param name="taskID">optional object taskID</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetTPField(string field, string value, object allSelectedTasks, object create, object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(field, value, allSelectedTasks, create, taskID);
			object returnItem = Invoker.MethodReturn(_instance, "SetTPField", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="fileType">optional NetOffice.MSProjectApi.Enums.PjDocExportType FileType = 0</param>
		/// <param name="includeDocumentProperties">optional object includeDocumentProperties</param>
		/// <param name="includeDocumentMarkup">optional object includeDocumentMarkup</param>
		/// <param name="archiveFormat">optional object archiveFormat</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename, object fileType, object includeDocumentProperties, object includeDocumentMarkup, object archiveFormat, object fromDate, object toDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, fileType, includeDocumentProperties, includeDocumentMarkup, archiveFormat, fromDate, toDate);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="fileType">optional NetOffice.MSProjectApi.Enums.PjDocExportType FileType = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename, object fileType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, fileType);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="fileType">optional NetOffice.MSProjectApi.Enums.PjDocExportType FileType = 0</param>
		/// <param name="includeDocumentProperties">optional object includeDocumentProperties</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename, object fileType, object includeDocumentProperties)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, fileType, includeDocumentProperties);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="fileType">optional NetOffice.MSProjectApi.Enums.PjDocExportType FileType = 0</param>
		/// <param name="includeDocumentProperties">optional object includeDocumentProperties</param>
		/// <param name="includeDocumentMarkup">optional object includeDocumentMarkup</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename, object fileType, object includeDocumentProperties, object includeDocumentMarkup)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, fileType, includeDocumentProperties, includeDocumentMarkup);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="fileType">optional NetOffice.MSProjectApi.Enums.PjDocExportType FileType = 0</param>
		/// <param name="includeDocumentProperties">optional object includeDocumentProperties</param>
		/// <param name="includeDocumentMarkup">optional object includeDocumentMarkup</param>
		/// <param name="archiveFormat">optional object archiveFormat</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename, object fileType, object includeDocumentProperties, object includeDocumentMarkup, object archiveFormat)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, fileType, includeDocumentProperties, includeDocumentMarkup, archiveFormat);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="fileType">optional NetOffice.MSProjectApi.Enums.PjDocExportType FileType = 0</param>
		/// <param name="includeDocumentProperties">optional object includeDocumentProperties</param>
		/// <param name="includeDocumentMarkup">optional object includeDocumentMarkup</param>
		/// <param name="archiveFormat">optional object archiveFormat</param>
		/// <param name="fromDate">optional object fromDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool DocumentExport(object filename, object fileType, object includeDocumentProperties, object includeDocumentMarkup, object archiveFormat, object fromDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, fileType, includeDocumentProperties, includeDocumentMarkup, archiveFormat, fromDate);
			object returnItem = Invoker.MethodReturn(_instance, "DocumentExport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="create">optional object create</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskDeliverableCreate(object create)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(create);
			object returnItem = Invoker.MethodReturn(_instance, "TaskDeliverableCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskDeliverableCreate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskDeliverableCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskDeliverableSync()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskDeliverableSync", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskDependencySync()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskDependencySync", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskRespectLinks()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskRespectLinks", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetShowTaskWarnings(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "SetShowTaskWarnings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetShowTaskWarnings()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetShowTaskWarnings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetShowTaskSuggestions(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "SetShowTaskSuggestions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetShowTaskSuggestions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetShowTaskSuggestions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ShowIgnoredTaskWarnings()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ShowIgnoredTaskWarnings", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="type">optional NetOffice.MSProjectApi.Enums.PjResourceTypes Type = 0</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertResource(object type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.MethodReturn(_instance, "InsertResource", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertResource()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertResource", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool InsertSummaryTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "InsertSummaryTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="date">optional object date</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ChangeStatusDate(object date)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(date);
			object returnItem = Invoker.MethodReturn(_instance, "ChangeStatusDate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ChangeStatusDate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ChangeStatusDate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="taskTable">object taskTable</param>
		/// <param name="resourceTable">object resourceTable</param>
		/// <param name="items">optional NetOffice.MSProjectApi.Enums.PjCompareVersionItems Items = 6</param>
		/// <param name="columns">optional NetOffice.MSProjectApi.Enums.PjCompareVersionColumns Columns = 0</param>
		/// <param name="showLegend">optional object showLegend</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CreateComparisonReport(object filename, object taskTable, object resourceTable, object items, object columns, object showLegend)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, taskTable, resourceTable, items, columns, showLegend);
			object returnItem = Invoker.MethodReturn(_instance, "CreateComparisonReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="taskTable">object taskTable</param>
		/// <param name="resourceTable">object resourceTable</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CreateComparisonReport(object filename, object taskTable, object resourceTable)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, taskTable, resourceTable);
			object returnItem = Invoker.MethodReturn(_instance, "CreateComparisonReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="taskTable">object taskTable</param>
		/// <param name="resourceTable">object resourceTable</param>
		/// <param name="items">optional NetOffice.MSProjectApi.Enums.PjCompareVersionItems Items = 6</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CreateComparisonReport(object filename, object taskTable, object resourceTable, object items)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, taskTable, resourceTable, items);
			object returnItem = Invoker.MethodReturn(_instance, "CreateComparisonReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">object filename</param>
		/// <param name="taskTable">object taskTable</param>
		/// <param name="resourceTable">object resourceTable</param>
		/// <param name="items">optional NetOffice.MSProjectApi.Enums.PjCompareVersionItems Items = 6</param>
		/// <param name="columns">optional NetOffice.MSProjectApi.Enums.PjCompareVersionColumns Columns = 0</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CreateComparisonReport(object filename, object taskTable, object resourceTable, object items, object columns)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename, taskTable, resourceTable, items, columns);
			object returnItem = Invoker.MethodReturn(_instance, "CreateComparisonReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CompareProjectVersions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CompareProjectVersions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskComparison()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskComparison", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ResourceComparison()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ResourceComparison", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool GoToItemInVersions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "GoToItemInVersions", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CloseComparison()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CloseComparison", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CompareProjectsLegendToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CompareProjectsLegendToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">Int32 taskID</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ClearConstraint(Int32 taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "ClearConstraint", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TaskInspector()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TaskInspector", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="defaultTab">optional NetOffice.MSProjectApi.Enums.PjOptionsSecurityTab DefaultTab = 0</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsSecurityTab(object defaultTab)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(defaultTab);
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurityTab", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OptionsSecurityTab()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OptionsSecurityTab", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="action">optional object action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplanAssignments(object action)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(action);
			object returnItem = Invoker.MethodReturn(_instance, "ReplanAssignments", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ReplanAssignments()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReplanAssignments", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="set">optional object set</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetIgnoreWarningsForTask(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "SetIgnoreWarningsForTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SetIgnoreWarningsForTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetIgnoreWarningsForTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="page">optional NetOffice.MSProjectApi.Enums.PjServerPage Page = 0</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool OpenServerPage(object page)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(page);
			object returnItem = Invoker.MethodReturn(_instance, "OpenServerPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool OpenServerPage()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OpenServerPage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="numLines">optional object numLines</param>
		/// <param name="minimized">optional object minimized</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineFormat(object numLines, object minimized)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numLines, minimized);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineFormat()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimelineFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="numLines">optional object numLines</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineFormat(object numLines)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(numLines);
			object returnItem = Invoker.MethodReturn(_instance, "TimelineFormat", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		/// <param name="levelingCanSplit">optional object levelingCanSplit</param>
		/// <param name="levelProposedBookings">optional object levelProposedBookings</param>
		/// <param name="levelPinnedTasks">optional object levelPinnedTasks</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments, object levelingCanSplit, object levelProposedBookings, object levelPinnedTasks)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments, levelingCanSplit, levelProposedBookings, levelPinnedTasks);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		/// <param name="levelingCanSplit">optional object levelingCanSplit</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments, object levelingCanSplit)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments, levelingCanSplit);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="automatic">optional object automatic</param>
		/// <param name="delayInSlack">optional object delayInSlack</param>
		/// <param name="autoClearLeveling">optional object autoClearLeveling</param>
		/// <param name="order">optional object order</param>
		/// <param name="levelEntireProject">optional object levelEntireProject</param>
		/// <param name="fromDate">optional object fromDate</param>
		/// <param name="toDate">optional object toDate</param>
		/// <param name="periodBasis">optional object periodBasis</param>
		/// <param name="levelIndividualAssignments">optional object levelIndividualAssignments</param>
		/// <param name="levelingCanSplit">optional object levelingCanSplit</param>
		/// <param name="levelProposedBookings">optional object levelProposedBookings</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool LevelingOptionsEx(object automatic, object delayInSlack, object autoClearLeveling, object order, object levelEntireProject, object fromDate, object toDate, object periodBasis, object levelIndividualAssignments, object levelingCanSplit, object levelProposedBookings)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(automatic, delayInSlack, autoClearLeveling, order, levelEntireProject, fromDate, toDate, periodBasis, levelIndividualAssignments, levelingCanSplit, levelProposedBookings);
			object returnItem = Invoker.MethodReturn(_instance, "LevelingOptionsEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="color">Int32 color</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SegmentFillColor(Int32 color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(color);
			object returnItem = Invoker.MethodReturn(_instance, "SegmentFillColor", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="color">Int32 color</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SegmentBorderColor(Int32 color)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(color);
			object returnItem = Invoker.MethodReturn(_instance, "SegmentBorderColor", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineGotoSelectedTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimelineGotoSelectedTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="resourceUniqueID">optional object resourceUniqueID</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleTPResourceExpand(object resourceUniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(resourceUniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "ToggleTPResourceExpand", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool ToggleTPResourceExpand()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ToggleTPResourceExpand", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="filename">optional object filename</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool CleanupProjectFromCache(object filename)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filename);
			object returnItem = Invoker.MethodReturn(_instance, "CleanupProjectFromCache", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool CleanupProjectFromCache()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CleanupProjectFromCache", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool ShareProjectOnline()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ShareProjectOnline", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskUniqueID">optional object taskUniqueID</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool SelectTPTask(object taskUniqueID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskUniqueID);
			object returnItem = Invoker.MethodReturn(_instance, "SelectTPTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool SelectTPTask()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectTPTask", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		/// <param name="taskID">optional object taskID</param>
		[SupportByVersion("MSProject", 11,14)]
		public static bool RescheduleToNextAvailable(object taskID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(taskID);
			object returnItem = Invoker.MethodReturn(_instance, "RescheduleToNextAvailable", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11,14)]
		public static bool RescheduleToNextAvailable()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RescheduleToNextAvailable", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11, 14
		/// </summary>
		[SupportByVersion("MSProject", 11,14)]
		public static bool TimelineViewToggle()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "TimelineViewToggle", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool Table()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Table", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool ReportsDialog()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ReportsDialog", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="percent">optional object percent</param>
		/// <param name="entire">optional object entire</param>
		[SupportByVersion("MSProject", 11)]
		public static bool ZoomReport(object percent, object entire)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percent, entire);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ZoomReport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ZoomReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="percent">optional object percent</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ZoomReport(object percent)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(percent);
			object returnItem = Invoker.MethodReturn(_instance, "ZoomReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="name">optional object name</param>
		/// <param name="applyTo">optional object applyTo</param>
		[SupportByVersion("MSProject", 11)]
		public static bool ApplyReport(object name, object applyTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, applyTo);
			object returnItem = Invoker.MethodReturn(_instance, "ApplyReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ApplyReport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ApplyReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="name">optional object name</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ApplyReport(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ApplyReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11)]
		public static bool FileOpenOrCreate(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenOrCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool FileOpenOrCreate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenOrCreate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11)]
		public static bool ShowOSFTaskPane(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ShowOSFTaskPane", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ShowOSFTaskPane()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ShowOSFTaskPane", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="parentSiteUrl">optional object parentSiteUrl</param>
		/// <param name="newSiteName">optional object newSiteName</param>
		/// <param name="launchBrowser">optional object launchBrowser</param>
		[SupportByVersion("MSProject", 11)]
		public static bool CreateProjectSite(object parentSiteUrl, object newSiteName, object launchBrowser)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(parentSiteUrl, newSiteName, launchBrowser);
			object returnItem = Invoker.MethodReturn(_instance, "CreateProjectSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool CreateProjectSite()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CreateProjectSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="parentSiteUrl">optional object parentSiteUrl</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool CreateProjectSite(object parentSiteUrl)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(parentSiteUrl);
			object returnItem = Invoker.MethodReturn(_instance, "CreateProjectSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="parentSiteUrl">optional object parentSiteUrl</param>
		/// <param name="newSiteName">optional object newSiteName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool CreateProjectSite(object parentSiteUrl, object newSiteName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(parentSiteUrl, newSiteName);
			object returnItem = Invoker.MethodReturn(_instance, "CreateProjectSite", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		/// <param name="taskListName">optional object taskListName</param>
		[SupportByVersion("MSProject", 11)]
		public static bool LinkToTaskList(object siteURL, object taskListName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL, taskListName);
			object returnItem = Invoker.MethodReturn(_instance, "LinkToTaskList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool LinkToTaskList()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "LinkToTaskList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool LinkToTaskList(object siteURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL);
			object returnItem = Invoker.MethodReturn(_instance, "LinkToTaskList", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="uRL">optional object uRL</param>
		[SupportByVersion("MSProject", 11)]
		public static bool OpenBrowser(object uRL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(uRL);
			object returnItem = Invoker.MethodReturn(_instance, "OpenBrowser", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool OpenBrowser()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "OpenBrowser", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool PasteAsPicture()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PasteAsPicture", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool PasteSourceFormatting()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PasteSourceFormatting", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool PasteDestFormatting()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "PasteDestFormatting", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool CopyReport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "CopyReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="name">optional object name</param>
		[SupportByVersion("MSProject", 11)]
		public static bool ProjectCheckOut(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			object returnItem = Invoker.MethodReturn(_instance, "ProjectCheckOut", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ProjectCheckOut()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ProjectCheckOut", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool SelectTable()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SelectTable", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool DistributeTableRows()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DistributeTableRows", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool DistributeTableColumns()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "DistributeTableColumns", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool SetRTLTable()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetRTLTable", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool SetLTRTable()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SetLTRTable", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool AlignTableCellTop()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AlignTableCellTop", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool AlignTableCellVerticalCenter()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AlignTableCellVerticalCenter", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool AlignTableCellBottom()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AlignTableCellBottom", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="templateId">optional NetOffice.MSProjectApi.Enums.PjReportLayoutTemplateId TemplateId = 0</param>
		[SupportByVersion("MSProject", 11)]
		public static bool ApplyReportLayoutTemplate(object templateId)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(templateId);
			object returnItem = Invoker.MethodReturn(_instance, "ApplyReportLayoutTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ApplyReportLayoutTemplate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ApplyReportLayoutTemplate", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		/// <param name="listName">optional object listName</param>
		/// <param name="doSync">optional object doSync</param>
		/// <param name="fromSave">optional object fromSave</param>
		[SupportByVersion("MSProject", 11)]
		public static bool SynchronizeWithSiteEx(object siteURL, object listName, object doSync, object fromSave)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL, listName, doSync, fromSave);
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSiteEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool SynchronizeWithSiteEx()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSiteEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool SynchronizeWithSiteEx(object siteURL)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL);
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSiteEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		/// <param name="listName">optional object listName</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool SynchronizeWithSiteEx(object siteURL, object listName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL, listName);
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSiteEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="siteURL">optional object siteURL</param>
		/// <param name="listName">optional object listName</param>
		/// <param name="doSync">optional object doSync</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool SynchronizeWithSiteEx(object siteURL, object listName, object doSync)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(siteURL, listName, doSync);
			object returnItem = Invoker.MethodReturn(_instance, "SynchronizeWithSiteEx", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightPredecessors(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "HighlightPredecessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightPredecessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HighlightPredecessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightDrivingPredecessors(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "HighlightDrivingPredecessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightDrivingPredecessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HighlightDrivingPredecessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightSuccessors(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "HighlightSuccessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightSuccessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HighlightSuccessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="set">optional object set</param>
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightDrivenSuccessors(object set)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(set);
			object returnItem = Invoker.MethodReturn(_instance, "HighlightDrivenSuccessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool HighlightDrivenSuccessors()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "HighlightDrivenSuccessors", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool RemoveHighlight()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RemoveHighlight", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="show">optional object show</param>
		[SupportByVersion("MSProject", 11)]
		public static bool ShowReportDataPane(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			object returnItem = Invoker.MethodReturn(_instance, "ShowReportDataPane", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool ShowReportDataPane()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "ShowReportDataPane", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool RenameReport()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "RenameReport", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[SupportByVersion("MSProject", 11)]
		public static bool FileOpenUsingBackstage()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "FileOpenUsingBackstage", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="projectField">optional NetOffice.MSProjectApi.Enums.PjField ProjectField = -1</param>
		/// <param name="sharePointName">optional object sharePointName</param>
		[SupportByVersion("MSProject", 11)]
		public static bool AddSiteColumn(object projectField, object sharePointName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectField, sharePointName);
			object returnItem = Invoker.MethodReturn(_instance, "AddSiteColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool AddSiteColumn()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "AddSiteColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion MSProject 11
		/// </summary>
		/// <param name="projectField">optional NetOffice.MSProjectApi.Enums.PjField ProjectField = -1</param>
		[CustomMethod]
		[SupportByVersion("MSProject", 11)]
		public static bool AddSiteColumn(object projectField)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(projectField);
			object returnItem = Invoker.MethodReturn(_instance, "AddSiteColumn", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		#endregion
	}
}
